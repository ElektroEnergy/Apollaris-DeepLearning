import numpy as np
    
def inverter_parameters(pro = None): 
    
    
    # Prepared by: Gustavo Dill - 12/03/2020
    
    # Function show the datasheet of Fronius Inverter
    
    # LEGEND:[Ninv_tilt,Ninv_glo,Ninv_dir,Ninv_dif,Cinv_tilt,Cinv_glo,Cinv_dir,
# Cinv_dif,pos_atem]=inverter1(v_out,v_sis,P_tilt,P_glo,P_dir,P_dif,a_temp,nf);
#Imppt = Max. Idc for Mppt (A)
#NPPT = Number of MPP trackers
#Icc1 = Max. short-circuit for Imppt (A)
#Vmpptm = Min. Usage Mppt Voltage (V)
#VmpptM = Max. Usage Mppt Voltage (V)
#mVn = Min. voltage for nominal power (V)
#MVn = Max. voltage for nominal power (V)
#NoDC = Number of DC connections
#Pdc = DC power (W)
#Iac = AC output current (A)
#Pac = AC nominal power (W)
#Sac = AC Max. Output power (VA)
#mVac = AC Min. voltage range (V)
#Mvac = AC Min. voltage range (V)
#mfac = AC Min. frequency range (V)
#Mf  = AC Max. frequency range (V)
#thd = total harmonic distorcion (#)
#fp = Min. power factor
#ef =  Max. efficiency
#minT  = Min. temperature range
#maxT = Max. temperature range
#weig = Weight (kg)
#heig = height (mm)
#widt = width (mm)
#leng = length (mm)
#icost = index
#Phase = number of phases
#hum = Max. humidity
#alt = Max. Altitud
# mod = [10] to on-grid /  [20] to hybrid / [30] to off-grid pure senoid  / [31] to off-grid modified senoid
#tier = IEC -60529; IEC-60000-3-2; IEC-61727; IEC-62109; IEEE-929;UL-1741;DIN-VDE-0126-1; EN-61000;
    
    ####OS VALORES DOS EQUIPAMENTOS PODEM SER CONSULTADOS NO SITE DA NEOSOLAR,
####ASSIM COMO O CATÁLOGO
    
    #      type                      no  Imppt  NMPP   Icc  Vmpptm  VmpptM     mVn   MVn  NoDC    Pdc    Iac    Pac    Sac   mVac  Mvac   mf   Mf  thd   fp      ef  minT  maxT  weig  heig  widt leng   icost Phase   hum    alt   mod  tier   I6010   UL1703
    fronius = np.array(['Fronius_PRIMO_3.0.1',1,12,2,18,80,800,200,800,2,4500,13,3000,3000,180,270,45,65,5,0.85,97.6,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_3.5.1',2,12,2,18,80,800,200,800,2,5300,15.2,3500,3500,180,270,45,65,5,0.85,97.7,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_3.6.1',3,12,2,18,80,800,200,800,2,5500,16,3680,3680,180,270,45,65,5,0.85,97.7,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_4.0.1',4,12,2,18,80,800,200,800,2,6000,17.4,4000,4000,180,270,45,65,5,0.85,97.7,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_4.6.1',5,12,2,18,80,800,200,800,2,6900,20,4600,4600,180,270,45,65,5,0.85,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_5.0.1',6,12,2,18,80,800,240,800,2,7500,21.7,5000,5000,180,270,45,65,5,0.85,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_5.0.1AUS',7,18,2,27,80,800,240,800,2,7500,21.7,4600,5000,180,270,45,65,5,0.85,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_6.0.1',8,18,2,27,80,800,240,800,2,9000,26.1,6000,6000,180,270,45,65,5,0.85,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_8.2.1',9,18,2,27,80,800,270,800,2,12300,35.7,8200,8200,180,270,45,65,5,0.85,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5])
    #      type                      no  Imppt  NMPP   Icc  Vmpptm  VmpptM    mVn   MVn  NoDC    Pdc    Iac    Pac    Sac   mVac  Mvac   mf   Mf     thd   fp     ef  minT  maxT  weig  heig  widt leng   icost Phase   hum    alt   mod  tier
    canadian = np.array(['Canadian_CSI-7KTL1P-GI-FL',1,10,3,15.6,100,500,120,500,3,8000,30.4,7000,7700,160,285,47,62,1.5,0.8,98.1,- 25,60,18.0,573,333,249,1,1,100,4000,10,4,'Canadian_CSI-8KTL1P-GI-FL',2,10,3,15.6,100,500,120,500,3,9200,34.8,8000,8800,160,285,47,62,1.5,0.8,98.1,- 25,60,18.0,573,333,249,1,1,100,4000,10,4,'Canadian_CSI-9KTL1P-GI-FL',3,10,3,15.6,100,500,120,500,3,10800,39.1,9000,9900,160,285,47,62,1.5,0.8,98.1,- 25,60,18.0,573,333,249,1,1,100,4000,10,4,'Canadian_CSI-10KTL1P-GI-FL',4,10,3,15.6,100,500,120,500,3,11500,43.5,10000,10000,160,285,47,62,1.5,0.8,98.1,- 25,60,18.0,573,333,249,1,1,100,4000,10,4])
    #      type                      no  Imppt  NMPP   Icc  Vmpptm  VmpptM    mVn   MVn  NoDC    Pdc    Iac    Pac    Sac   mVac  Mvac   mf   Mf   thd   fp      ef  minT  maxT  weig  heig  widt leng   icost Phase   hum    alt   mod  tier
    abb = np.array(['ABB_PVI-3.0-1',1,10,2,12.5,160,530,200,530,2,3000,14.5,3000,3000,183,228,57,60.5,2,0.8,96.9,- 25,60,21.5,859,325,222,1,1,100,2000,10,4,'ABB_PVI-3.0-2',2,10,2,12.5,160,530,200,530,2,3300,14.5,3000,3000,211,264,57,60.5,2,0.8,96.9,- 25,60,21.5,859,325,222,1,1,100,2000,10,4,'ABB_PVI-3.0-3',3,10,2,12.5,160,530,200,530,2,3300,12,3000,3000,244,304,57,60.5,2,0.8,96.9,- 25,60,21.5,859,325,222,1,1,100,2000,10,4,'ABB_PVI-3.6-1',4,16,2,20,120,530,200,530,2,3600,17.2,3600,3600,183,228,57,60.5,2,0.8,97.0,- 25,60,21.5,859,325,222,1,1,100,2000,10,4,'ABB_PVI-3.6-2',5,16,2,20,120,530,200,530,2,4000,16.0,3600,3600,211,264,57,60.5,2,0.8,97.0,- 25,60,21.5,859,325,222,1,1,100,2000,10,4,'ABB_PVI-3.6-3',6,16,2,20,120,530,200,530,2,4000,16.0,3600,3600,244,304,57,60.5,2,0.8,97.0,- 25,60,21.5,859,325,222,1,1,100,2000,10,4,'ABB_PVI-3.8-1',7,16,2,20,140,530,200,530,2,3300,16.0,3300,3300,183,228,57,60.5,2,0.8,97.0,- 25,60,21.5,859,325,222,1,1,100,2000,10,4,'ABB_PVI-3.8-2',8,16,2,20,140,530,200,530,2,4200,16.0,3800,3800,211,264,57,60.5,2,0.8,97.0,- 25,60,21.5,859,325,222,1,1,100,2000,10,4,'ABB_PVI-3.8-3',9,16,2,20,140,530,200,530,2,4200,16.0,3800,3800,244,304,57,60.5,2,0.8,97.0,- 25,60,21.5,859,325,222,1,1,100,2000,10,4,'ABB_PVI-4.2-1',10,16,2,20,140,530,200,530,2,4200,20.0,4200,4200,183,228,57,60.5,2,0.8,97.0,- 25,60,21.5,859,325,222,1,1,100,2000,10,4,'ABB_PVI-4.2-2',11,16,2,20,140,530,200,530,2,4600,20.0,4200,4200,211,264,57,60.5,2,0.8,97.0,- 25,60,21.5,859,325,222,1,1,100,2000,10,4,'ABB_PVI-4.2-3',12,16,2,20,140,530,200,530,2,4600,20.0,4200,4200,244,304,57,60.5,2,0.8,97.0,- 25,60,21.5,859,325,222,1,1,100,2000,10,4])
    #      type                      no  Imppt  NMPP   Icc  Vmpptm  VmpptM    mVn   MVn  NoDC    Pdc    Iac    Pac    Sac   mVac  Mvac   mf   Mf   thd   fp      ef  minT  maxT  weig  heig  widt leng   icost Phase   hum    alt   mod  tier
    sma = np.array(['SMA_Sunny_Tripower_12000TL-US',1,33,2,53.0,150,1000,300,800,2,18000,14.4,12000,12000,244,305,44,65,3,0.0,98.2,- 25,60,55.0,650,665,250,1,3,0,0,10,6,'SMA_Sunny_Tripower_15000TL-US',2,33,2,53.0,150,1000,300,800,2,22500,18.0,15000,15000,244,305,44,65,3,0.0,98.2,- 25,60,55.0,650,665,250,1,3,0,0,10,6,'SMA_Sunny_Tripower_20000TL-US',3,33,2,53.0,150,1000,380,800,2,30000,24.0,20000,20000,244,305,44,65,3,0.0,98.5,- 25,60,55.0,650,665,250,1,3,0,0,10,6,'SMA_Sunny_Tripower_24000TL-US',4,33,2,53.0,150,1000,450,800,2,36000,29.0,24000,24000,244,305,44,65,3,0.0,98.5,- 25,60,55.0,650,665,250,1,3,0,0,10,6,'SMA_Sunny_Tripower_30000TL-US',5,33,2,53.0,150,1000,500,800,2,45000,36.2,30000,30000,244,305,44,65,3,0.0,98.6,- 25,60,55.0,650,665,250,1,3,0,0,10,6])
    #      type                      no  Imppt  NMPP   Icc  Vmpptm  VmpptM    mVn   MVn  NoDC    Pdc    Iac    Pac    Sac   mVac  Mvac   mf   Mf   thd   fp     ef  minT  maxT  weig  heig  widt leng   icost Phase   hum    alt   mod  tier
    phb = np.array(['PHB_1500-NS',1,10,1,0.0,80,400,80,400,1,1950,7.5,1500,1500,176,242,57.5,62,5,0.0,97.0,- 25,60,7.5,312.5,344,135,1,1,95,4000,10,2,'PHB_3000-NS',2,15,1,0.0,80,400,80,400,1,3900,13.5,3000,3000,176,242,57.5,62,5,0.0,97.5,- 25,60,8.5,312.5,344,135,1,1,95,4000,10,2,'PHB_5000D-NS',3,11,2,0.0,120,550,125,550,1,6500,22.8,5000,5000,176,242,57.5,62,5,0.95,97.8,- 25,60,14.0,431,347,150,1,1,95,4000,10,2])
    #      type                      no  Imppt  NMPP   Icc  Vmpptm  VmpptM    mVn   MVn  NoDC    Pdc    Iac    Pac    Sac   mVac  Mvac   mf   Mf   thd   fp      ef  minT  maxT  weig  heig  widt leng   icost Phase   hum    alt   mod  tier
    refusol = np.array(['REFUsol_008k',1,23,1,0,350,850,370,850,3,9900,12,8250,8250,320,460,45,65,2.5,0.8,98.0,- 25,55,28.5,601,535,205,1,3,100,2000,10,3,'REFUsol_010k',2,25,1,0,350,850,410,850,3,12000,16,10000,10000,320,460,45,65,1.8,0.8,98.0,- 25,55,28.5,601,535,205,1,3,100,2000,10,3,'REFUsol_013k',3,31.1,1,0,350,850,430,850,4,15600,21,13000,13000,320,460,45,65,2.5,0.8,98.0,- 25,55,32.2,601,535,277,1,3,100,4000,10,3,'REFUsol_017k',4,38.3,1,0,350,850,460,850,6,20400,29,17000,17000,320,460,45,65,1.8,0.8,98.2,- 25,55,38.4,601,535,277,1,3,100,4000,10,3,'REFUsol_020k',5,41.8,1,0,350,850,490,850,6,24000,29.2,20000,20000,320,460,45,65,1.8,0.8,98.2,- 25,55,38.4,601,535,277,1,3,100,4000,10,3])
    #      type                      no  Imppt  NMPP   Icc  Vmpptm  VmpptM    mVn   MVn  NoDC    Pdc    Iac    Pac    Sac   mVac  Mvac   mf   Mf   thd   fp      ef  minT  maxT  weig  heig  widt leng   icost Phase   hum    alt   mod  tier
    sungrow = np.array(['Sungrow SG60KTL',1,120,1,140,570,850,570,850,14,0,96,6600,6600,310,480,45,65,3.0,0.8,98.9,- 25,60,60.0,959,634,267,1,3,100,4000,10,4,'Sungrow SG10KTL-M',2,11,2,15,200,1000,470,850,2,0,16.5,10000,10000,270,480,45,65,3.0,0.8,98.6,- 25,60,20.0,485,370,160,1,3,100,4000,10,4,'Sungrow SG12KTL-M',3,11,2,15,200,1000,550,850,2,0,20.0,12000,12000,270,480,45,65,3.0,0.8,98.6,- 25,60,20.0,485,370,160,1,3,100,4000,10,4,'Sungrow SG15KTL-M',4,22,2,30,200,1000,380,850,2,0,24.0,15000,15000,270,480,45,65,3.0,0.8,98.6,- 25,60,24.0,485,370,210,1,3,100,4000,10,4,'Sungrow SG20KTL-M',5,22,2,30,200,1000,480,850,2,0,31.9,20000,20000,270,480,45,65,3.0,0.8,98.6,- 25,60,24.0,485,370,210,1,3,100,4000,10,4])
    #      type                      no  Imppt  NMPP   Icc  Vmpptm  VmpptM    mVn   MVn  NoDC    Pdc    Iac    Pac    Sac   mVac  Mvac   mf   Mf   thd    fp     ef  minT  maxT  weig   heig  widt   leng   icost Phase   hum    alt   mod  tier
    weg = np.array(['WEG_SIW600_T011-22',1,28.3,1,0,480,800,480,800,1,13800,30.4,11500,11500,127,220,60,60,3.0,0.9,98.0,- 10,60,50.0,588.5,624,301.6,1,3,0,0,10,4,'WEG_SIW600_T010-44-1',2,10.7,2,0,480,800,480,800,1,10300,15.2,10000,10000,220,380,60,60,3.0,0.9,98.0,- 10,60,50.0,588.5,624,301.6,1,3,0,0,10,4,'WEG_SIW600_T010-44-2',3,10.7,2,0,480,800,480,800,1,10300,13.1,10000,10000,254,400,60,60,3.0,0.9,98.0,- 10,60,50.0,588.5,624,301.6,1,3,0,0,10,4,'WEG_SIW600_T020-44-1',4,21.5,2,0,480,800,480,800,1,20600,30.4,20000,20000,220,380,60,60,3.0,0.9,98.0,- 10,60,50.0,588.5,624,301.6,1,3,0,0,10,4,'WEG_SIW600_T020-44-2',5,21.5,2,0,480,800,480,800,1,20600,26.2,20000,20000,254,400,60,60,3.0,0.9,98.0,- 10,60,50.0,588.5,624,301.6,1,3,0,0,10,4,'WEG_SIW300H_M020',6,11,2,15,90,600,160,480,1,2000,10.0,2000,2200,220,240,50,60,3.0,0.8,98.4,- 30,60,10.6,375.0,375,161.5,1,1,100,4000,10,3,'WEG_SIW300H_M030',7,11,2,15,90,600,160,480,1,0,15.0,3000,3300,220,240,50,60,3.0,0.8,98.5,- 30,60,10.6,375.0,375,161.5,1,1,100,4000,10,3,'WEG_SIW300H_M040',8,11,2,15,90,600,210,480,1,0,20.0,4000,4400,220,240,50,60,3.0,0.8,98.6,- 30,60,10.6,375.0,375,161.5,1,1,100,4000,10,3,'WEG_SIW300H_M050',9,11,2,15,90,600,260,480,1,0,25.0,5000,5500,220,240,50,60,3.0,0.8,98.6,- 30,60,10.6,375.0,375,161.5,1,1,100,4000,10,3,'WEG_SIW500H-ST012-1',10,22,2,0,160,950,160,950,4,0,54.5,12000,12000,220,220,50,60,3.0,0.8,98.5,- 25,60,25.0,470.0,525,262.0,1,1,0,0,10,1,'WEG_SIW500H-ST012-2',11,22,2,0,160,950,160,950,4,0,18.2,12000,12000,380,380,50,60,3.0,0.8,98.5,- 25,60,25.0,470.0,525,262.0,1,3,0,0,10,1,'WEG_SIW500H-ST012-3',12,22,2,0,160,950,160,950,4,0,17.3,12000,12000,230,400,50,60,3.0,0.8,98.5,- 25,60,25.0,470.0,525,262.0,1,3,0,0,10,1,'WEG_SIW500H-ST015-1',13,22,2,0,160,950,160,950,4,0,68.2,15000,15000,220,220,50,60,3.0,0.8,98.65,- 25,60,25.0,470.0,525,262.0,1,1,0,0,10,1,'WEG_SIW500H-ST015-2',14,22,2,0,160,950,160,950,4,0,22.8,15000,15000,380,380,50,60,3.0,0.8,98.65,- 25,60,25.0,470.0,525,262.0,1,3,0,0,10,1,'WEG_SIW500H-ST015-3',15,22,2,0,160,950,160,950,4,0,21.6,15000,15000,230,400,50,60,3.0,0.8,98.65,- 25,60,25.0,470.0,525,262.0,1,3,0,0,10,1,'WEG_SIW500H-ST020-1',16,22,2,0,160,950,160,950,4,0,90.9,20000,20000,220,220,50,60,3.0,0.8,98.65,- 25,60,25.0,470.0,525,262.0,1,1,0,0,10,1,'WEG_SIW500H-ST020-2',17,22,2,0,160,950,160,950,4,0,30.4,20000,20000,380,380,50,60,3.0,0.8,98.65,- 25,60,25.0,470.0,525,262.0,1,3,0,0,10,1,'WEG_SIW500H-ST020-3',18,22,2,0,160,950,160,950,4,0,28.9,20000,20000,230,400,50,60,3.0,0.8,98.65,- 25,60,25.0,470.0,525,262.0,1,3,0,0,10,1,'WEG_SIW500H-ST030-1',19,22,4,0,480,800,480,800,8,0,136.3,30000,33000,220,220,50,60,3.0,0.8,98.6,- 25,60,60.0,550.0,930,260.0,1,1,0,0,10,1,'WEG_SIW500H-ST030-2',20,22,4,0,480,800,480,800,8,0,45.6,30000,33000,380,380,50,60,3.0,0.8,98.6,- 25,60,60.0,550.0,930,260.0,1,3,0,0,10,1,'WEG_SIW500H-ST030-3',21,22,4,0,480,800,480,800,8,0,43.3,30000,33000,230,400,50,60,3.0,0.8,98.6,- 25,60,60.0,550.0,930,260.0,1,3,0,0,10,1,'WEG_SIW500H-ST036-1',22,22,4,0,380,850,380,850,8,0,181.1,36000,39600,220,220,60,60,3.0,0.8,98.8,- 25,60,55.0,550.0,930,260.0,1,1,0,0,10,1,'WEG_SIW500H-ST036-2',23,22,4,0,380,850,380,850,8,0,54.8,36000,39600,380,380,60,60,3.0,0.8,98.8,- 25,60,55.0,550.0,930,260.0,1,3,0,0,10,1,'WEG_SIW500H-ST036-3',24,22,4,0,380,850,380,850,8,0,52.0,36000,39600,230,400,60,60,3.0,0.8,98.8,- 25,60,55.0,550.0,930,260.0,1,3,0,0,10,1,'WEG_SIW500H-ST040-1',25,22,4,0,380,850,380,850,8,0,181.1,40000,44000,220,220,60,60,3.0,0.8,98.8,- 25,60,55.0,550.0,930,260.0,1,1,0,0,10,1,'WEG_SIW500H-ST040-2',26,22,4,0,380,850,380,850,8,0,57.8,40000,44000,380,380,60,60,3.0,0.8,98.8,- 25,60,55.0,550.0,930,260.0,1,3,0,0,10,1,'WEG_SIW500H-ST040-3',27,22,4,0,380,850,380,850,8,0,48.2,40000,44000,230,400,60,60,3.0,0.8,98.8,- 25,60,55.0,550.0,930,260.0,1,3,0,0,10,1,'WEG_SIW500H-ST060-1',28,22,6,30,200,1000,200,1000,12,0,91.2,60000,66000,220,380,50,60,3.0,0.8,98.7,- 25,60,73.0,550.0,1075,300.0,1,3,100,4000,10,1,'WEG_SIW500H-ST060-2',29,22,6,30,200,1000,200,1000,12,0,86.7,60000,66000,230,400,50,60,3.0,0.8,98.7,- 25,60,73.0,550.0,1075,300.0,1,3,100,4000,10,1,'WEG_SIW500H-ST0100HV',30,22,6,33,600,1450,600,1450,12,0,72.2,100000,105000,800,800,50,60,3.0,0.8,99.0,- 25,60,73.0,605.0,1075,310.0,1,3,100,4000,10,1])
    froS = np.array([[fronius],[canadian],[abb],[sma],[phb],[refusol],[sungrow],[weg]])
    froN = cell2mat(froS(:,np.arange(2,33+1)))
    l,c = froN.shape
    froN[:,1] = np.transpose((np.arange(1,l+1)))
    for k in np.arange(1,l+1).reshape(-1):
        if froN(k,10) != 0:
            froN[k,10] = froN(k,10)
        else:
            froN[k,10] = froN(k,12) / (froN(k,20) / 100)
    
    mcpv = 1
    vr = froN(:,6) / froN(:,5)
    t = froN(:,22) - froN(:,21)
    sr = froN(:,12) / froN(:,10)
    Imppt = np.multiply(froN(:,2),froN(:,3))
    av_ef = np.sqrt(sum(froN(:,20) ** 2))
    av_Imppt = np.sqrt(sum(Imppt(:,1) ** 2))
    av_tier = np.sqrt(sum(froN(:,32) ** 2))
    av_sr = np.sqrt(sum(sr(:,1) ** 2))
    av_vr = np.sqrt(sum(vr(:,1) ** 2))
    av_t = np.sqrt(sum(t(:,1) ** 2))
    # Computing the base value
    b_ef[:,1] = froN(:,20) / av_ef
    b_tier[:,1] = froN(:,32) / av_tier
    for i in np.arange(1,l+1).reshape(-1):
        b_Imppt[i,1] = Imppt(i,1) / av_Imppt
        b_SR[i,1] = sr(i,1) / av_sr
        b_VR[i,1] = vr(i,1) / av_vr
        b_T[i,1] = t(i,1) / av_t
        ibest[i,1] = ((1) / (np.multiply(np.multiply(np.multiply(np.multiply(b_ef(i,1),b_Imppt(i,1)),b_tier(i,1)),b_VR(i,1)),b_SR(i,1))))
    
    #fro(:,15)=ibest;
    av_ibest = np.sqrt(sum(ibest(:,1) ** 2))
    for i in np.arange(1,l+1).reshape(-1):
        b_ibest[i,1] = np.multiply(3.4,(ibest(i,1) / av_ibest))
    
    froN[:,27] = b_ibest
    return froS,froN