[
    {
        "label": "combinations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "Site",
        "importPath": "site",
        "description": "site",
        "isExtraImport": true,
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "Inverter",
        "importPath": "inverters",
        "description": "inverters",
        "isExtraImport": true,
        "detail": "inverters",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "modules",
        "description": "modules",
        "isExtraImport": true,
        "detail": "modules",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "estimate_cell_temperature",
        "importPath": "irradiance",
        "description": "irradiance",
        "isExtraImport": true,
        "detail": "irradiance",
        "documentation": {}
    },
    {
        "label": "System",
        "kind": 6,
        "importPath": "modules.decision",
        "description": "modules.decision",
        "peekOfCode": "class System():\n    def __init__(self):\n        self.site = Site()\n        self.inverters = json.load(open('data/inverters.json')).inverters\n        self.modules = json.load(open('data/modules.json')).modules\n    # Decide the best configuration for the system\n    def decision_making(self):\n        combinations = []\n        for module in self.modules:\n            PVModule = Module(module['pmp'], module['vmp'], module['imp'], module['voc'], module['isc'], module['tcoef_voc'], module['tcoef_vmp'], module['area'], module['icost'], module['ef'], module['ncel'], module['tol'], module['dur'], module['material'], module['tmax'], module['tmin'], module['tnm'], module['tier'], module['max_fuse'], self.site)",
        "detail": "modules.decision",
        "documentation": {}
    },
    {
        "label": "Inverter",
        "kind": 6,
        "importPath": "modules.inverters",
        "description": "modules.inverters",
        "peekOfCode": "class Inverter:\n    def __init__(self, pdc, nmmpts, pmp, vmp, imp, voc, isc, ef, icost):\n        self.pdc = pdc              # DC Power Input (W)\n        self.nmmpts = nmmpts        # Number of MPPTs\n        self.pmp = pmp              # Maximum Power per MPPT (Pmp)\n        self.vmp = vmp              # Maximum Voltage per MPPT (Vmp)\n        self.imp = imp              # Maximum Current per MPPT (Imp)\n        self.voc = voc              # Open Circuit Voltage per MPPT (Voc)\n        self.isc = isc              # Short-Circuit Current per MPPT(Isc)\n        self.ef = ef                # Efficiency (Ef)",
        "detail": "modules.inverters",
        "documentation": {}
    },
    {
        "label": "estimate_cell_temperature",
        "kind": 2,
        "importPath": "modules.irradiance",
        "description": "modules.irradiance",
        "peekOfCode": "def estimate_cell_temperature(tmed_amb, tnm, trmtabs, ef, irr, wind_speed):\n    # Constants\n    irr_noct = 800\n    t_ambnoct = 20\n    tnm_corr = tmed_amb + (irr / irr_noct) * (9.5 / (5.7 + (3.8 * wind_speed))) * (tnm - t_ambnoct) * (1 - (ef / trmtabs))\n    return tnm_corr",
        "detail": "modules.irradiance",
        "documentation": {}
    },
    {
        "label": "Module",
        "kind": 6,
        "importPath": "modules.modules",
        "description": "modules.modules",
        "peekOfCode": "class Module:\n    def __init__(self, voc, isc, vmp, imp, pmp, vmax_sys, tcoef_voc, tcoef_vmp, tcoef_isc, weight, depth, width, length, area, icost, ef, ncel, tol, dur, material, tmax, tmin, tnm, tier, max_fuse, site):\n        self.voc = voc                  # Open Circuit Voltage (Voc)\n        self.isc = isc                  # Short-Circuit Current (Isc)\n        self.vmp = vmp                  # Maximum Voltage at 25°C (Vmp)\n        self.imp = imp                  # Maximum Current at 25°C (Imp)\n        self.pmp = pmp                  # Maximum Power at 25°C (Pmp)\n        self.vmax_sys = vmax_sys        # Maximum System Voltage\n        self.tcoef_voc = tcoef_voc      # Open Circuit Voltage Temperature Coefficient (V/°C)\n        self.tcoef_vmp = tcoef_vmp      # Output Temperature Coefficient (V/°C)",
        "detail": "modules.modules",
        "documentation": {}
    },
    {
        "label": "Site",
        "kind": 6,
        "importPath": "modules.site",
        "description": "modules.site",
        "peekOfCode": "class Site:\n    def __init__(self):\n        self.capacity_factor = 0.8   # Capacity Factor (%)\n        # Demand Data\n        self.annual_demand = 0.0    # Annual Energy Demand (kWh)\n        # Ambient Data\n        self.tmed_amb = []          # Average Ambient Temperature for the Year (°C)\n        self.irrmed = []            # Average Irradiance for the Year (W/m²)\n        self.wind_speed = []        # Average Wind Speed for the Year (m/s)",
        "detail": "modules.site",
        "documentation": {}
    },
    {
        "label": "Console",
        "kind": 6,
        "importPath": "utils.io",
        "description": "utils.io",
        "peekOfCode": "class Console():\n    @staticmethod\n    def header():\n        print(\"\")\n        print(\"                         Elektro\")\n        print(\"   _____                .__  .__               .__        \")\n        print(\"  /  _  \\ ______   ____ |  | |  | _____ _______|__| ______\")\n        print(\" /  /_\\  \\\\____ \\ /  _ \\|  | |  | \\__  \\\\_  __ \\  |/  ___/\")\n        print(\"/    |    \\  |_> >  <_> )  |_|  |__/ __ \\|  | \\/  |\\___ \\ \")\n        print(\"\\____|__  /   __/ \\____/|____/____(____  /__|  |__/____  >\")",
        "detail": "utils.io",
        "documentation": {}
    }
]