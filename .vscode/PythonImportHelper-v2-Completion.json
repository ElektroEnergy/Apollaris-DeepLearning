[
    {
        "label": "Site",
        "importPath": "site",
        "description": "site",
        "isExtraImport": true,
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "estimate_cell_temperature",
        "importPath": "irradiance",
        "description": "irradiance",
        "isExtraImport": true,
        "detail": "irradiance",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "inverter_parameters",
        "importPath": "inverter_parameters_matheus",
        "description": "inverter_parameters_matheus",
        "isExtraImport": true,
        "detail": "inverter_parameters_matheus",
        "documentation": {}
    },
    {
        "label": "pv_parameters",
        "importPath": "pv_parameters_matheus",
        "description": "pv_parameters_matheus",
        "isExtraImport": true,
        "detail": "pv_parameters_matheus",
        "documentation": {}
    },
    {
        "label": "brapv",
        "importPath": "brapv",
        "description": "brapv",
        "isExtraImport": true,
        "detail": "brapv",
        "documentation": {}
    },
    {
        "label": "consumption",
        "importPath": "consumption",
        "description": "consumption",
        "isExtraImport": true,
        "detail": "consumption",
        "documentation": {}
    },
    {
        "label": "irradiation",
        "importPath": "irradiation",
        "description": "irradiation",
        "isExtraImport": true,
        "detail": "irradiation",
        "documentation": {}
    },
    {
        "label": "month_hour",
        "importPath": "month_hour",
        "description": "month_hour",
        "isExtraImport": true,
        "detail": "month_hour",
        "documentation": {}
    },
    {
        "label": "sol_por_dia",
        "importPath": "sol_por_dia",
        "description": "sol_por_dia",
        "isExtraImport": true,
        "detail": "sol_por_dia",
        "documentation": {}
    },
    {
        "label": "module_temperature",
        "importPath": "module_temperature",
        "description": "module_temperature",
        "isExtraImport": true,
        "detail": "module_temperature",
        "documentation": {}
    },
    {
        "label": "distancia_de_sombreamento",
        "importPath": "distancia_de_sombreamento",
        "description": "distancia_de_sombreamento",
        "isExtraImport": true,
        "detail": "distancia_de_sombreamento",
        "documentation": {}
    },
    {
        "label": "power24",
        "importPath": "power24",
        "description": "power24",
        "isExtraImport": true,
        "detail": "power24",
        "documentation": {}
    },
    {
        "label": "pv2",
        "importPath": "pv2",
        "description": "pv2",
        "isExtraImport": true,
        "detail": "pv2",
        "documentation": {}
    },
    {
        "label": "inverter2t",
        "importPath": "inverter2t",
        "description": "inverter2t",
        "isExtraImport": true,
        "detail": "inverter2t",
        "documentation": {}
    },
    {
        "label": "optm2ttopsis",
        "importPath": "optm2ttopsis",
        "description": "optm2ttopsis",
        "isExtraImport": true,
        "detail": "optm2ttopsis",
        "documentation": {}
    },
    {
        "label": "optm2ta",
        "importPath": "optm2ta",
        "description": "optm2ta",
        "isExtraImport": true,
        "detail": "optm2ta",
        "documentation": {}
    },
    {
        "label": "optm2tc",
        "importPath": "optm2tc",
        "description": "optm2tc",
        "isExtraImport": true,
        "detail": "optm2tc",
        "documentation": {}
    },
    {
        "label": "optm2t",
        "importPath": "optm2t",
        "description": "optm2t",
        "isExtraImport": true,
        "detail": "optm2t",
        "documentation": {}
    },
    {
        "label": "pv4",
        "importPath": "pv4",
        "description": "pv4",
        "isExtraImport": true,
        "detail": "pv4",
        "documentation": {}
    },
    {
        "label": "inverter4t",
        "importPath": "inverter4t",
        "description": "inverter4t",
        "isExtraImport": true,
        "detail": "inverter4t",
        "documentation": {}
    },
    {
        "label": "optm4ttopsis",
        "importPath": "optm4ttopsis",
        "description": "optm4ttopsis",
        "isExtraImport": true,
        "detail": "optm4ttopsis",
        "documentation": {}
    },
    {
        "label": "optm4ta",
        "importPath": "optm4ta",
        "description": "optm4ta",
        "isExtraImport": true,
        "detail": "optm4ta",
        "documentation": {}
    },
    {
        "label": "optm4tc",
        "importPath": "optm4tc",
        "description": "optm4tc",
        "isExtraImport": true,
        "detail": "optm4tc",
        "documentation": {}
    },
    {
        "label": "optm4t",
        "importPath": "optm4t",
        "description": "optm4t",
        "isExtraImport": true,
        "detail": "optm4t",
        "documentation": {}
    },
    {
        "label": "cor_P",
        "importPath": "cor_P",
        "description": "cor_P",
        "isExtraImport": true,
        "detail": "cor_P",
        "documentation": {}
    },
    {
        "label": "pv_inv_string2",
        "importPath": "pv_inv_string2",
        "description": "pv_inv_string2",
        "isExtraImport": true,
        "detail": "pv_inv_string2",
        "documentation": {}
    },
    {
        "label": "checking",
        "importPath": "checking",
        "description": "checking",
        "isExtraImport": true,
        "detail": "checking",
        "documentation": {}
    },
    {
        "label": "protection_system",
        "importPath": "protection_system",
        "description": "protection_system",
        "isExtraImport": true,
        "detail": "protection_system",
        "documentation": {}
    },
    {
        "label": "pv_inv_string4",
        "importPath": "pv_inv_string4",
        "description": "pv_inv_string4",
        "isExtraImport": true,
        "detail": "pv_inv_string4",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "System",
        "kind": 6,
        "importPath": "modules.decision",
        "description": "modules.decision",
        "peekOfCode": "class System():\n    def __init__(self):\n        self.site = Site()\n        self.inverters = json.load(open('data/inverters.json'))\n        self.modules = json.load(open('data/modules.json'))\n    def decision_making(self):\n        for module in self.modules:\n            Module = Module(module['pmp'], module['vmp'], module['imp'], module['voc'], module['isc'], module['tcoef_voc'], module['tcoef_vmp'], module['area'], module['icost'], module['ef'], module['ncel'], module['tol'], module['dur'], module['material'], module['tmax'], module['tmin'], module['tnm'], module['tier'], module['max_fuse'], self.site)\n            # Make the corrections based on the site conditions\n            Module.correct_voc_vmp_by_temp(self.site)",
        "detail": "modules.decision",
        "documentation": {}
    },
    {
        "label": "Inverter",
        "kind": 6,
        "importPath": "modules.inverters",
        "description": "modules.inverters",
        "peekOfCode": "class Inverter:\n    def __init__(self, pdc, nmmpts, pmp, vmp, imp, voc, isc, ef, icost):\n        self.pdc = pdc              # DC Power Input (W)\n        self.nmmpts = nmmpts        # Number of MPPTs\n        self.pmp = pmp              # Maximum Power per MPPT (Pmp)\n        self.vmp = vmp              # Maximum Voltage per MPPT (Vmp)\n        self.imp = imp              # Maximum Current per MPPT (Imp)\n        self.voc = voc              # Open Circuit Voltage per MPPT (Voc)\n        self.isc = isc              # Short-Circuit Current per MPPT(Isc)\n        self.ef = ef                # Efficiency (Ef)",
        "detail": "modules.inverters",
        "documentation": {}
    },
    {
        "label": "estimate_cell_temperature",
        "kind": 2,
        "importPath": "modules.irradiance",
        "description": "modules.irradiance",
        "peekOfCode": "def estimate_cell_temperature(tmed_amb, tnm, trmtabs, ef, irr, wind_speed):\n    # Constants\n    irr_noct = 800\n    t_ambnoct = 20\n    tnm_corr = tmed_amb + (irr / irr_noct) * (9.5 / (5.7 + (3.8 * wind_speed))) * (tnm - t_ambnoct) * (1 - (ef / trmtabs))\n    return tnm_corr",
        "detail": "modules.irradiance",
        "documentation": {}
    },
    {
        "label": "Module",
        "kind": 6,
        "importPath": "modules.modules",
        "description": "modules.modules",
        "peekOfCode": "class Module:\n    def __init__(self, voc, isc, vmp, imp, pmp, vmax_sys, tcoef_voc, tcoef_vmp, tcoef_isc, weight, depth, width, length, area, icost, ef, ncel, tol, dur, material, tmax, tmin, tnm, tier, max_fuse, site):\n        self.voc = voc                  # Open Circuit Voltage (Voc)\n        self.isc = isc                  # Short-Circuit Current (Isc)\n        self.vmp = vmp                  # Maximum Voltage at 25°C (Vmp)\n        self.imp = imp                  # Maximum Current at 25°C (Imp)\n        self.pmp = pmp                  # Maximum Power at 25°C (Pmp)\n        self.vmax_sys = vmax_sys        # Maximum System Voltage\n        self.tcoef_voc = tcoef_voc      # Open Circuit Voltage Temperature Coefficient (V/°C)\n        self.tcoef_vmp = tcoef_vmp      # Output Temperature Coefficient (V/°C)",
        "detail": "modules.modules",
        "documentation": {}
    },
    {
        "label": "Site",
        "kind": 6,
        "importPath": "modules.site",
        "description": "modules.site",
        "peekOfCode": "class Site:\n    def __init__(self):\n        self.capacity_factor = 0.8   # Capacity Factor (%)\n        # Demand Data\n        self.annual_demand = 0.0    # Annual Energy Demand (kWh)\n        # Ambient Data\n        self.tmed_amb = []          # Average Ambient Temperature for the Year (°C)\n        self.irrmed = []            # Average Irradiance for the Year (W/m²)\n        self.wind_speed = []        # Average Wind Speed for the Year (m/s)",
        "detail": "modules.site",
        "documentation": {}
    },
    {
        "label": "brapv",
        "kind": 2,
        "importPath": "old.brapv",
        "description": "old.brapv",
        "peekOfCode": "def brapv(sunS = None,brandpv = None): \n    list = np.array(['JINKO','CANADIAN','YINGLI','GLOBO BRASIL','KYOCERA'])\n    bra,tf = listdlg('ListString',list)\n    if bra == 1:\n        list = brandpv.jinko(:,1)\n    else:\n        if bra == 2:\n            list = brandpv.canadian(:,1)\n        else:\n            if bra == 3:",
        "detail": "old.brapv",
        "documentation": {}
    },
    {
        "label": "checking",
        "kind": 2,
        "importPath": "old.checking",
        "description": "old.checking",
        "peekOfCode": "def checking(Nt = None,Nto = None,Ntc = None,Nta = None,NFT = None,NFTa = None,NFTo = None,NFTc = None): \n    if Nt <= 0.5:\n        nft = 0\n    else:\n        nft = num2str(NFT[0])\n    if Nta <= 0.5:\n        nfta = 0\n    else:\n        nfta = num2str(NFTa[0])\n    if Nto <= 0.5:",
        "detail": "old.checking",
        "documentation": {}
    },
    {
        "label": "consumption",
        "kind": 2,
        "importPath": "old.consumption",
        "description": "old.consumption",
        "peekOfCode": "def consumption(sel = None,area = None): \n    # clc\n# clear all\n# sel=3;\n# #area=400;\n# area=60;\n    #Prepared by Gustavo K. Dill - 26/07/2017\n    if sel == 1:\n        options.Resize = 'On'\n        options.WindowStyle = 'modal'",
        "detail": "old.consumption",
        "documentation": {}
    },
    {
        "label": "cor_P",
        "kind": 2,
        "importPath": "old.cor_P",
        "description": "old.cor_P",
        "peekOfCode": "def cor_P(pit = None,P_tilt = None): \n    if pit(1) == 0:\n        P_tilt = np.zeros((1,12))\n    else:\n        P_tilt = P_tilt(pit(1),:)\n    return P_tilt",
        "detail": "old.cor_P",
        "documentation": {}
    },
    {
        "label": "demand_factor",
        "kind": 2,
        "importPath": "old.demand_factor",
        "description": "old.demand_factor",
        "peekOfCode": "def demand_factor(n2 = None,n3 = None,n4 = None,n5 = None,n6 = None,n7 = None,mod1 = None): \n    fd2 = np.array([1,0.75,0.7,0.66,0.62,0.59,0.56,0.53,0.51,0.49,0.47,0.45,0.43,0.41,0.4,0.39,0.38,0.37,0.36,0.35,0.34,0.33,0.32,0.31,0.3])\n    fd3a = np.array([1,0.7,0.6,0.55,0.53,0.52,0.5])\n    fd3b = np.array([1,0.75,0.7,0.65,0.6,0.55,0.5])\n    fd4 = np.array([1,0.75,0.7,0.65,0.6,0.55,0.5])\n    fd5 = np.array([1,0.75,0.6333,0.575,0.54,0.5,0.4714,0.45,0.4333,0.42])\n    fd6 = np.array([1,0.7,0.6,0.5])\n    fd7 = np.array([1,0.6,0.5,0.4])\n    if n2 == 0:\n        f2 = 0",
        "detail": "old.demand_factor",
        "documentation": {}
    },
    {
        "label": "distancia_de_sombreamento",
        "kind": 2,
        "importPath": "old.distancia_de_sombreamento",
        "description": "old.distancia_de_sombreamento",
        "peekOfCode": "def distancia_de_sombreamento(lat = None,sunN = None,sunrise = None): \n    ###########################################################################\n    # Based on Optimal displacement of photovoltaic array�s rows using a novel\n#shading model Nuria Novas Castellano, Jos� Antonio G�zquez Parra, Juan\n#Valls-Guirado, Francisco Manzano-Agugliaro\n    # http://www.lusosol.com/fileiras.htm\n    # Created by Gustavo Dill - april 2020\n###########################################################################\n# clc\n# clear all",
        "detail": "old.distancia_de_sombreamento",
        "documentation": {}
    },
    {
        "label": "group_residential_customers",
        "kind": 2,
        "importPath": "old.group_residential_customers",
        "description": "old.group_residential_customers",
        "peekOfCode": "def group_residential_customers(mod1 = None,area = None): \n    mod3 = input_('Enter the total number of units \\n')\n    if mod3 > 300:\n        print('THE LIGHT CRITEREA CONSIDER MAXIMMUM 300 UNITS. CHOOSE LESS UNITS')\n        demand = 0\n        return demand\n    print('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')\n    print('The demand for one residential unit according to Light RECON is sorted by 6 criterea: Air conditioners; Central air conditioners;')\n    print('heating devices; lightning and outlets; electric motors equipments; power transformer and weld and x-ray machines')\n    print('Split the total power load into these criteria and alocate the total amount into each criterea')",
        "detail": "old.group_residential_customers",
        "documentation": {}
    },
    {
        "label": "inclination",
        "kind": 2,
        "importPath": "old.inclination",
        "description": "old.inclination",
        "peekOfCode": "def inclination(lat = None,lon = None,alt = None,x_atemp = None,stil = None,sazi = None): \n    # clc\n# clear all\n    #ESTIMATIVA DA IRRADIA��O TOTAL SOBRE UMA SUPERF�CIE INCLINADA\n#A PARTIR DA IRRADIA��O GLOBAL NA HORIZONTAL\n#Jos� Scolar,1\n# Dinival Martins,2\n# Jo�o Francisco Escobedo3\n    #https://pvpmc.sandia.gov/modeling-steps/1-weather-design-inputs/array-orientation/fixed-tilt/\n# References",
        "detail": "old.inclination",
        "documentation": {}
    },
    {
        "label": "individual_customers",
        "kind": 2,
        "importPath": "old.individual_customers",
        "description": "old.individual_customers",
        "peekOfCode": "def individual_customers(mod1 = None,area = None): \n    print('The demand according to Light RECON is sorted by 6 criterea: Air conditioners; Central air conditioners;')\n    print('heating devices; lightning and outlets; electric motors equipments; power transformer and weld and x-ray machines')\n    print('Split the total power load into these criteria and alocate the total amount into each criterea')\n    options.Resize = 'On'\n    options.WindowStyle = 'modal'\n    options.Interpreter = 'tex'\n    prompt = np.array(['Enter the total power of lighting and outlets (in kVA)','Enter the total power of the heating devices, shower, electric tap and heating (in kVA)','Enter the total number of the heating devices, shower, electric tap and heating','Enter the total power of the air conditioners, split and window model (in kVA)','Enter the total number of the air conditioners, split and window model','Enter the total power of central air conditioners (in kVA)','Enter the total number of central air conditioners','Enter the total power of electric motors and motor-generator weld machines (in kVA)','Enter the total number of electric motors and motor-generator weld machines','Enter the total power of electric weld machines and power transformers (in kVA)','Enter the total number of electric weld machines and power transformers','Enter the total power of x-ray, tomography, mammography and magnetic image equipments (in kVA)','Enter the total number of x-ray, tomography, mammography and magnetic image equipments'])\n    dlg_title = 'Location and System Information'\n    num_lines = np.array([1,100])",
        "detail": "old.individual_customers",
        "documentation": {}
    },
    {
        "label": "inverter2t",
        "kind": 2,
        "importPath": "old.inverter2t",
        "description": "old.inverter2t",
        "peekOfCode": "def inverter2t(M_tilt = None,min_atemp = None,max_atemp = None,p = None,pt = None,Ntt = None,vfn = None,nf = None,alt = None,hum = None,freq = None): \n    # Prepared by: Gustavo Dill - 25/07/2017\n# # # the power transformer are not being considered in the cost function of\n# the inverter in this new version - april/2019\n    pos_t = []\n    pos_atem = []\n    pos_p = []\n    pos_v = []\n    pit = []\n    ptt = []",
        "detail": "old.inverter2t",
        "documentation": {}
    },
    {
        "label": "inverter4t",
        "kind": 2,
        "importPath": "old.inverter4t",
        "description": "old.inverter4t",
        "peekOfCode": "def inverter4t(M_tilt = None,min_atemp = None,max_atemp = None,p = None,pt = None,Ntt = None,vfn = None,nf = None,alt = None,hum = None,freq = None): \n    # Prepared by: Gustavo Dill - 25/07/2017\n    pos_t = []\n    pos_atem = []\n    pos_p = []\n    pos_v = []\n    pit = []\n    #########################################################################################\n# FOR TILTED INSTALATION\n    if len(p)==0 == 1:",
        "detail": "old.inverter4t",
        "documentation": {}
    },
    {
        "label": "inverter_parameters",
        "kind": 2,
        "importPath": "old.inverter_parameters",
        "description": "old.inverter_parameters",
        "peekOfCode": "def inverter_parameters(pro = None): \n    # Prepared by: Gustavo Dill - 12/03/2020\n    # Function show the datasheet of Fronius Inverter\n    # LEGEND:[Ninv_tilt,Ninv_glo,Ninv_dir,Ninv_dif,Cinv_tilt,Cinv_glo,Cinv_dir,\n# Cinv_dif,pos_atem]=inverter1(v_out,v_sis,P_tilt,P_glo,P_dir,P_dif,a_temp,nf);\n#Imppt = Max. Idc for Mppt (A)\n#NPPT = Number of MPP trackers\n#Icc1 = Max. short-circuit for Imppt (A)\n#Vmpptm = Min. Usage Mppt Voltage (V)\n#VmpptM = Max. Usage Mppt Voltage (V)",
        "detail": "old.inverter_parameters",
        "documentation": {}
    },
    {
        "label": "#Imppt",
        "kind": 5,
        "importPath": "old.inverter_parameters",
        "description": "old.inverter_parameters",
        "peekOfCode": "#Imppt = Max. Idc for Mppt (A)\n#NPPT = Number of MPP trackers\n#Icc1 = Max. short-circuit for Imppt (A)\n#Vmpptm = Min. Usage Mppt Voltage (V)\n#VmpptM = Max. Usage Mppt Voltage (V)\n#mVn = Min. voltage for nominal power (V)\n#MVn = Max. voltage for nominal power (V)\n#NoDC = Number of DC connections\n#Pdc = DC power (W)\n#Iac = AC output current (A)",
        "detail": "old.inverter_parameters",
        "documentation": {}
    },
    {
        "label": "#NPPT",
        "kind": 5,
        "importPath": "old.inverter_parameters",
        "description": "old.inverter_parameters",
        "peekOfCode": "#NPPT = Number of MPP trackers\n#Icc1 = Max. short-circuit for Imppt (A)\n#Vmpptm = Min. Usage Mppt Voltage (V)\n#VmpptM = Max. Usage Mppt Voltage (V)\n#mVn = Min. voltage for nominal power (V)\n#MVn = Max. voltage for nominal power (V)\n#NoDC = Number of DC connections\n#Pdc = DC power (W)\n#Iac = AC output current (A)\n#Pac = AC nominal power (W)",
        "detail": "old.inverter_parameters",
        "documentation": {}
    },
    {
        "label": "#Icc1",
        "kind": 5,
        "importPath": "old.inverter_parameters",
        "description": "old.inverter_parameters",
        "peekOfCode": "#Icc1 = Max. short-circuit for Imppt (A)\n#Vmpptm = Min. Usage Mppt Voltage (V)\n#VmpptM = Max. Usage Mppt Voltage (V)\n#mVn = Min. voltage for nominal power (V)\n#MVn = Max. voltage for nominal power (V)\n#NoDC = Number of DC connections\n#Pdc = DC power (W)\n#Iac = AC output current (A)\n#Pac = AC nominal power (W)\n#Sac = AC Max. Output power (VA)",
        "detail": "old.inverter_parameters",
        "documentation": {}
    },
    {
        "label": "#Vmpptm",
        "kind": 5,
        "importPath": "old.inverter_parameters",
        "description": "old.inverter_parameters",
        "peekOfCode": "#Vmpptm = Min. Usage Mppt Voltage (V)\n#VmpptM = Max. Usage Mppt Voltage (V)\n#mVn = Min. voltage for nominal power (V)\n#MVn = Max. voltage for nominal power (V)\n#NoDC = Number of DC connections\n#Pdc = DC power (W)\n#Iac = AC output current (A)\n#Pac = AC nominal power (W)\n#Sac = AC Max. Output power (VA)\n#mVac = AC Min. voltage range (V)",
        "detail": "old.inverter_parameters",
        "documentation": {}
    },
    {
        "label": "#VmpptM",
        "kind": 5,
        "importPath": "old.inverter_parameters",
        "description": "old.inverter_parameters",
        "peekOfCode": "#VmpptM = Max. Usage Mppt Voltage (V)\n#mVn = Min. voltage for nominal power (V)\n#MVn = Max. voltage for nominal power (V)\n#NoDC = Number of DC connections\n#Pdc = DC power (W)\n#Iac = AC output current (A)\n#Pac = AC nominal power (W)\n#Sac = AC Max. Output power (VA)\n#mVac = AC Min. voltage range (V)\n#Mvac = AC Min. voltage range (V)",
        "detail": "old.inverter_parameters",
        "documentation": {}
    },
    {
        "label": "#mVn",
        "kind": 5,
        "importPath": "old.inverter_parameters",
        "description": "old.inverter_parameters",
        "peekOfCode": "#mVn = Min. voltage for nominal power (V)\n#MVn = Max. voltage for nominal power (V)\n#NoDC = Number of DC connections\n#Pdc = DC power (W)\n#Iac = AC output current (A)\n#Pac = AC nominal power (W)\n#Sac = AC Max. Output power (VA)\n#mVac = AC Min. voltage range (V)\n#Mvac = AC Min. voltage range (V)\n#mfac = AC Min. frequency range (V)",
        "detail": "old.inverter_parameters",
        "documentation": {}
    },
    {
        "label": "#MVn",
        "kind": 5,
        "importPath": "old.inverter_parameters",
        "description": "old.inverter_parameters",
        "peekOfCode": "#MVn = Max. voltage for nominal power (V)\n#NoDC = Number of DC connections\n#Pdc = DC power (W)\n#Iac = AC output current (A)\n#Pac = AC nominal power (W)\n#Sac = AC Max. Output power (VA)\n#mVac = AC Min. voltage range (V)\n#Mvac = AC Min. voltage range (V)\n#mfac = AC Min. frequency range (V)\n#Mf  = AC Max. frequency range (V)",
        "detail": "old.inverter_parameters",
        "documentation": {}
    },
    {
        "label": "#NoDC",
        "kind": 5,
        "importPath": "old.inverter_parameters",
        "description": "old.inverter_parameters",
        "peekOfCode": "#NoDC = Number of DC connections\n#Pdc = DC power (W)\n#Iac = AC output current (A)\n#Pac = AC nominal power (W)\n#Sac = AC Max. Output power (VA)\n#mVac = AC Min. voltage range (V)\n#Mvac = AC Min. voltage range (V)\n#mfac = AC Min. frequency range (V)\n#Mf  = AC Max. frequency range (V)\n#thd = total harmonic distorcion (#)",
        "detail": "old.inverter_parameters",
        "documentation": {}
    },
    {
        "label": "#Pdc",
        "kind": 5,
        "importPath": "old.inverter_parameters",
        "description": "old.inverter_parameters",
        "peekOfCode": "#Pdc = DC power (W)\n#Iac = AC output current (A)\n#Pac = AC nominal power (W)\n#Sac = AC Max. Output power (VA)\n#mVac = AC Min. voltage range (V)\n#Mvac = AC Min. voltage range (V)\n#mfac = AC Min. frequency range (V)\n#Mf  = AC Max. frequency range (V)\n#thd = total harmonic distorcion (#)\n#fp = Min. power factor",
        "detail": "old.inverter_parameters",
        "documentation": {}
    },
    {
        "label": "#Iac",
        "kind": 5,
        "importPath": "old.inverter_parameters",
        "description": "old.inverter_parameters",
        "peekOfCode": "#Iac = AC output current (A)\n#Pac = AC nominal power (W)\n#Sac = AC Max. Output power (VA)\n#mVac = AC Min. voltage range (V)\n#Mvac = AC Min. voltage range (V)\n#mfac = AC Min. frequency range (V)\n#Mf  = AC Max. frequency range (V)\n#thd = total harmonic distorcion (#)\n#fp = Min. power factor\n#ef =  Max. efficiency",
        "detail": "old.inverter_parameters",
        "documentation": {}
    },
    {
        "label": "#Pac",
        "kind": 5,
        "importPath": "old.inverter_parameters",
        "description": "old.inverter_parameters",
        "peekOfCode": "#Pac = AC nominal power (W)\n#Sac = AC Max. Output power (VA)\n#mVac = AC Min. voltage range (V)\n#Mvac = AC Min. voltage range (V)\n#mfac = AC Min. frequency range (V)\n#Mf  = AC Max. frequency range (V)\n#thd = total harmonic distorcion (#)\n#fp = Min. power factor\n#ef =  Max. efficiency\n#minT  = Min. temperature range",
        "detail": "old.inverter_parameters",
        "documentation": {}
    },
    {
        "label": "#Sac",
        "kind": 5,
        "importPath": "old.inverter_parameters",
        "description": "old.inverter_parameters",
        "peekOfCode": "#Sac = AC Max. Output power (VA)\n#mVac = AC Min. voltage range (V)\n#Mvac = AC Min. voltage range (V)\n#mfac = AC Min. frequency range (V)\n#Mf  = AC Max. frequency range (V)\n#thd = total harmonic distorcion (#)\n#fp = Min. power factor\n#ef =  Max. efficiency\n#minT  = Min. temperature range\n#maxT = Max. temperature range",
        "detail": "old.inverter_parameters",
        "documentation": {}
    },
    {
        "label": "#mVac",
        "kind": 5,
        "importPath": "old.inverter_parameters",
        "description": "old.inverter_parameters",
        "peekOfCode": "#mVac = AC Min. voltage range (V)\n#Mvac = AC Min. voltage range (V)\n#mfac = AC Min. frequency range (V)\n#Mf  = AC Max. frequency range (V)\n#thd = total harmonic distorcion (#)\n#fp = Min. power factor\n#ef =  Max. efficiency\n#minT  = Min. temperature range\n#maxT = Max. temperature range\n#weig = Weight (kg)",
        "detail": "old.inverter_parameters",
        "documentation": {}
    },
    {
        "label": "#Mvac",
        "kind": 5,
        "importPath": "old.inverter_parameters",
        "description": "old.inverter_parameters",
        "peekOfCode": "#Mvac = AC Min. voltage range (V)\n#mfac = AC Min. frequency range (V)\n#Mf  = AC Max. frequency range (V)\n#thd = total harmonic distorcion (#)\n#fp = Min. power factor\n#ef =  Max. efficiency\n#minT  = Min. temperature range\n#maxT = Max. temperature range\n#weig = Weight (kg)\n#heig = height (mm)",
        "detail": "old.inverter_parameters",
        "documentation": {}
    },
    {
        "label": "#mfac",
        "kind": 5,
        "importPath": "old.inverter_parameters",
        "description": "old.inverter_parameters",
        "peekOfCode": "#mfac = AC Min. frequency range (V)\n#Mf  = AC Max. frequency range (V)\n#thd = total harmonic distorcion (#)\n#fp = Min. power factor\n#ef =  Max. efficiency\n#minT  = Min. temperature range\n#maxT = Max. temperature range\n#weig = Weight (kg)\n#heig = height (mm)\n#widt = width (mm)",
        "detail": "old.inverter_parameters",
        "documentation": {}
    },
    {
        "label": "#thd",
        "kind": 5,
        "importPath": "old.inverter_parameters",
        "description": "old.inverter_parameters",
        "peekOfCode": "#thd = total harmonic distorcion (#)\n#fp = Min. power factor\n#ef =  Max. efficiency\n#minT  = Min. temperature range\n#maxT = Max. temperature range\n#weig = Weight (kg)\n#heig = height (mm)\n#widt = width (mm)\n#leng = length (mm)\n#icost = index",
        "detail": "old.inverter_parameters",
        "documentation": {}
    },
    {
        "label": "#fp",
        "kind": 5,
        "importPath": "old.inverter_parameters",
        "description": "old.inverter_parameters",
        "peekOfCode": "#fp = Min. power factor\n#ef =  Max. efficiency\n#minT  = Min. temperature range\n#maxT = Max. temperature range\n#weig = Weight (kg)\n#heig = height (mm)\n#widt = width (mm)\n#leng = length (mm)\n#icost = index\n#Phase = number of phases",
        "detail": "old.inverter_parameters",
        "documentation": {}
    },
    {
        "label": "#ef",
        "kind": 5,
        "importPath": "old.inverter_parameters",
        "description": "old.inverter_parameters",
        "peekOfCode": "#ef =  Max. efficiency\n#minT  = Min. temperature range\n#maxT = Max. temperature range\n#weig = Weight (kg)\n#heig = height (mm)\n#widt = width (mm)\n#leng = length (mm)\n#icost = index\n#Phase = number of phases\n#hum = Max. humidity",
        "detail": "old.inverter_parameters",
        "documentation": {}
    },
    {
        "label": "#maxT",
        "kind": 5,
        "importPath": "old.inverter_parameters",
        "description": "old.inverter_parameters",
        "peekOfCode": "#maxT = Max. temperature range\n#weig = Weight (kg)\n#heig = height (mm)\n#widt = width (mm)\n#leng = length (mm)\n#icost = index\n#Phase = number of phases\n#hum = Max. humidity\n#alt = Max. Altitud\n# mod = [10] to on-grid /  [20] to hybrid / [30] to off-grid pure senoid  / [31] to off-grid modified senoid",
        "detail": "old.inverter_parameters",
        "documentation": {}
    },
    {
        "label": "#weig",
        "kind": 5,
        "importPath": "old.inverter_parameters",
        "description": "old.inverter_parameters",
        "peekOfCode": "#weig = Weight (kg)\n#heig = height (mm)\n#widt = width (mm)\n#leng = length (mm)\n#icost = index\n#Phase = number of phases\n#hum = Max. humidity\n#alt = Max. Altitud\n# mod = [10] to on-grid /  [20] to hybrid / [30] to off-grid pure senoid  / [31] to off-grid modified senoid\n#tier = IEC -60529; IEC-60000-3-2; IEC-61727; IEC-62109; IEEE-929;UL-1741;DIN-VDE-0126-1; EN-61000;",
        "detail": "old.inverter_parameters",
        "documentation": {}
    },
    {
        "label": "#heig",
        "kind": 5,
        "importPath": "old.inverter_parameters",
        "description": "old.inverter_parameters",
        "peekOfCode": "#heig = height (mm)\n#widt = width (mm)\n#leng = length (mm)\n#icost = index\n#Phase = number of phases\n#hum = Max. humidity\n#alt = Max. Altitud\n# mod = [10] to on-grid /  [20] to hybrid / [30] to off-grid pure senoid  / [31] to off-grid modified senoid\n#tier = IEC -60529; IEC-60000-3-2; IEC-61727; IEC-62109; IEEE-929;UL-1741;DIN-VDE-0126-1; EN-61000;\n    ####OS VALORES DOS EQUIPAMENTOS PODEM SER CONSULTADOS NO SITE DA NEOSOLAR,",
        "detail": "old.inverter_parameters",
        "documentation": {}
    },
    {
        "label": "#widt",
        "kind": 5,
        "importPath": "old.inverter_parameters",
        "description": "old.inverter_parameters",
        "peekOfCode": "#widt = width (mm)\n#leng = length (mm)\n#icost = index\n#Phase = number of phases\n#hum = Max. humidity\n#alt = Max. Altitud\n# mod = [10] to on-grid /  [20] to hybrid / [30] to off-grid pure senoid  / [31] to off-grid modified senoid\n#tier = IEC -60529; IEC-60000-3-2; IEC-61727; IEC-62109; IEEE-929;UL-1741;DIN-VDE-0126-1; EN-61000;\n    ####OS VALORES DOS EQUIPAMENTOS PODEM SER CONSULTADOS NO SITE DA NEOSOLAR,\n####ASSIM COMO O CAT�LOGO",
        "detail": "old.inverter_parameters",
        "documentation": {}
    },
    {
        "label": "#leng",
        "kind": 5,
        "importPath": "old.inverter_parameters",
        "description": "old.inverter_parameters",
        "peekOfCode": "#leng = length (mm)\n#icost = index\n#Phase = number of phases\n#hum = Max. humidity\n#alt = Max. Altitud\n# mod = [10] to on-grid /  [20] to hybrid / [30] to off-grid pure senoid  / [31] to off-grid modified senoid\n#tier = IEC -60529; IEC-60000-3-2; IEC-61727; IEC-62109; IEEE-929;UL-1741;DIN-VDE-0126-1; EN-61000;\n    ####OS VALORES DOS EQUIPAMENTOS PODEM SER CONSULTADOS NO SITE DA NEOSOLAR,\n####ASSIM COMO O CAT�LOGO\n    #      type                      no  Imppt  NMPP   Icc  Vmpptm  VmpptM     mVn   MVn  NoDC    Pdc    Iac    Pac    Sac   mVac  Mvac   mf   Mf  thd   fp      ef  minT  maxT  weig  heig  widt leng   icost Phase   hum    alt   mod  tier   I6010   UL1703",
        "detail": "old.inverter_parameters",
        "documentation": {}
    },
    {
        "label": "#icost",
        "kind": 5,
        "importPath": "old.inverter_parameters",
        "description": "old.inverter_parameters",
        "peekOfCode": "#icost = index\n#Phase = number of phases\n#hum = Max. humidity\n#alt = Max. Altitud\n# mod = [10] to on-grid /  [20] to hybrid / [30] to off-grid pure senoid  / [31] to off-grid modified senoid\n#tier = IEC -60529; IEC-60000-3-2; IEC-61727; IEC-62109; IEEE-929;UL-1741;DIN-VDE-0126-1; EN-61000;\n    ####OS VALORES DOS EQUIPAMENTOS PODEM SER CONSULTADOS NO SITE DA NEOSOLAR,\n####ASSIM COMO O CAT�LOGO\n    #      type                      no  Imppt  NMPP   Icc  Vmpptm  VmpptM     mVn   MVn  NoDC    Pdc    Iac    Pac    Sac   mVac  Mvac   mf   Mf  thd   fp      ef  minT  maxT  weig  heig  widt leng   icost Phase   hum    alt   mod  tier   I6010   UL1703\n    fronius = np.array(['Fronius_PRIMO_3.0.1',1,12,2,18,80,800,200,800,2,4500,13,3000,3000,180,270,45,65,5,0.85,97.6,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_3.5.1',2,12,2,18,80,800,200,800,2,5300,15.2,3500,3500,180,270,45,65,5,0.85,97.7,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_3.6.1',3,12,2,18,80,800,200,800,2,5500,16,3680,3680,180,270,45,65,5,0.85,97.7,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_4.0.1',4,12,2,18,80,800,200,800,2,6000,17.4,4000,4000,180,270,45,65,5,0.85,97.7,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_4.6.1',5,12,2,18,80,800,200,800,2,6900,20,4600,4600,180,270,45,65,5,0.85,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_5.0.1',6,12,2,18,80,800,240,800,2,7500,21.7,5000,5000,180,270,45,65,5,0.85,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_5.0.1AUS',7,18,2,27,80,800,240,800,2,7500,21.7,4600,5000,180,270,45,65,5,0.85,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_6.0.1',8,18,2,27,80,800,240,800,2,9000,26.1,6000,6000,180,270,45,65,5,0.85,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_8.2.1',9,18,2,27,80,800,270,800,2,12300,35.7,8200,8200,180,270,45,65,5,0.85,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5])",
        "detail": "old.inverter_parameters",
        "documentation": {}
    },
    {
        "label": "#Phase",
        "kind": 5,
        "importPath": "old.inverter_parameters",
        "description": "old.inverter_parameters",
        "peekOfCode": "#Phase = number of phases\n#hum = Max. humidity\n#alt = Max. Altitud\n# mod = [10] to on-grid /  [20] to hybrid / [30] to off-grid pure senoid  / [31] to off-grid modified senoid\n#tier = IEC -60529; IEC-60000-3-2; IEC-61727; IEC-62109; IEEE-929;UL-1741;DIN-VDE-0126-1; EN-61000;\n    ####OS VALORES DOS EQUIPAMENTOS PODEM SER CONSULTADOS NO SITE DA NEOSOLAR,\n####ASSIM COMO O CAT�LOGO\n    #      type                      no  Imppt  NMPP   Icc  Vmpptm  VmpptM     mVn   MVn  NoDC    Pdc    Iac    Pac    Sac   mVac  Mvac   mf   Mf  thd   fp      ef  minT  maxT  weig  heig  widt leng   icost Phase   hum    alt   mod  tier   I6010   UL1703\n    fronius = np.array(['Fronius_PRIMO_3.0.1',1,12,2,18,80,800,200,800,2,4500,13,3000,3000,180,270,45,65,5,0.85,97.6,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_3.5.1',2,12,2,18,80,800,200,800,2,5300,15.2,3500,3500,180,270,45,65,5,0.85,97.7,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_3.6.1',3,12,2,18,80,800,200,800,2,5500,16,3680,3680,180,270,45,65,5,0.85,97.7,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_4.0.1',4,12,2,18,80,800,200,800,2,6000,17.4,4000,4000,180,270,45,65,5,0.85,97.7,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_4.6.1',5,12,2,18,80,800,200,800,2,6900,20,4600,4600,180,270,45,65,5,0.85,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_5.0.1',6,12,2,18,80,800,240,800,2,7500,21.7,5000,5000,180,270,45,65,5,0.85,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_5.0.1AUS',7,18,2,27,80,800,240,800,2,7500,21.7,4600,5000,180,270,45,65,5,0.85,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_6.0.1',8,18,2,27,80,800,240,800,2,9000,26.1,6000,6000,180,270,45,65,5,0.85,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_8.2.1',9,18,2,27,80,800,270,800,2,12300,35.7,8200,8200,180,270,45,65,5,0.85,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5])\n    #      type                      no  Imppt  NMPP   Icc  Vmpptm  VmpptM    mVn   MVn  NoDC    Pdc    Iac    Pac    Sac   mVac  Mvac   mf   Mf     thd   fp     ef  minT  maxT  weig  heig  widt leng   icost Phase   hum    alt   mod  tier",
        "detail": "old.inverter_parameters",
        "documentation": {}
    },
    {
        "label": "#hum",
        "kind": 5,
        "importPath": "old.inverter_parameters",
        "description": "old.inverter_parameters",
        "peekOfCode": "#hum = Max. humidity\n#alt = Max. Altitud\n# mod = [10] to on-grid /  [20] to hybrid / [30] to off-grid pure senoid  / [31] to off-grid modified senoid\n#tier = IEC -60529; IEC-60000-3-2; IEC-61727; IEC-62109; IEEE-929;UL-1741;DIN-VDE-0126-1; EN-61000;\n    ####OS VALORES DOS EQUIPAMENTOS PODEM SER CONSULTADOS NO SITE DA NEOSOLAR,\n####ASSIM COMO O CAT�LOGO\n    #      type                      no  Imppt  NMPP   Icc  Vmpptm  VmpptM     mVn   MVn  NoDC    Pdc    Iac    Pac    Sac   mVac  Mvac   mf   Mf  thd   fp      ef  minT  maxT  weig  heig  widt leng   icost Phase   hum    alt   mod  tier   I6010   UL1703\n    fronius = np.array(['Fronius_PRIMO_3.0.1',1,12,2,18,80,800,200,800,2,4500,13,3000,3000,180,270,45,65,5,0.85,97.6,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_3.5.1',2,12,2,18,80,800,200,800,2,5300,15.2,3500,3500,180,270,45,65,5,0.85,97.7,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_3.6.1',3,12,2,18,80,800,200,800,2,5500,16,3680,3680,180,270,45,65,5,0.85,97.7,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_4.0.1',4,12,2,18,80,800,200,800,2,6000,17.4,4000,4000,180,270,45,65,5,0.85,97.7,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_4.6.1',5,12,2,18,80,800,200,800,2,6900,20,4600,4600,180,270,45,65,5,0.85,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_5.0.1',6,12,2,18,80,800,240,800,2,7500,21.7,5000,5000,180,270,45,65,5,0.85,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_5.0.1AUS',7,18,2,27,80,800,240,800,2,7500,21.7,4600,5000,180,270,45,65,5,0.85,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_6.0.1',8,18,2,27,80,800,240,800,2,9000,26.1,6000,6000,180,270,45,65,5,0.85,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_8.2.1',9,18,2,27,80,800,270,800,2,12300,35.7,8200,8200,180,270,45,65,5,0.85,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5])\n    #      type                      no  Imppt  NMPP   Icc  Vmpptm  VmpptM    mVn   MVn  NoDC    Pdc    Iac    Pac    Sac   mVac  Mvac   mf   Mf     thd   fp     ef  minT  maxT  weig  heig  widt leng   icost Phase   hum    alt   mod  tier\n    canadian = np.array(['Canadian_CSI-7KTL1P-GI-FL',1,10,3,15.6,100,500,120,500,3,8000,30.4,7000,7700,160,285,47,62,1.5,0.8,98.1,- 25,60,18.0,573,333,249,1,1,100,4000,10,4,'Canadian_CSI-8KTL1P-GI-FL',2,10,3,15.6,100,500,120,500,3,9200,34.8,8000,8800,160,285,47,62,1.5,0.8,98.1,- 25,60,18.0,573,333,249,1,1,100,4000,10,4,'Canadian_CSI-9KTL1P-GI-FL',3,10,3,15.6,100,500,120,500,3,10800,39.1,9000,9900,160,285,47,62,1.5,0.8,98.1,- 25,60,18.0,573,333,249,1,1,100,4000,10,4,'Canadian_CSI-10KTL1P-GI-FL',4,10,3,15.6,100,500,120,500,3,11500,43.5,10000,10000,160,285,47,62,1.5,0.8,98.1,- 25,60,18.0,573,333,249,1,1,100,4000,10,4])",
        "detail": "old.inverter_parameters",
        "documentation": {}
    },
    {
        "label": "#alt",
        "kind": 5,
        "importPath": "old.inverter_parameters",
        "description": "old.inverter_parameters",
        "peekOfCode": "#alt = Max. Altitud\n# mod = [10] to on-grid /  [20] to hybrid / [30] to off-grid pure senoid  / [31] to off-grid modified senoid\n#tier = IEC -60529; IEC-60000-3-2; IEC-61727; IEC-62109; IEEE-929;UL-1741;DIN-VDE-0126-1; EN-61000;\n    ####OS VALORES DOS EQUIPAMENTOS PODEM SER CONSULTADOS NO SITE DA NEOSOLAR,\n####ASSIM COMO O CAT�LOGO\n    #      type                      no  Imppt  NMPP   Icc  Vmpptm  VmpptM     mVn   MVn  NoDC    Pdc    Iac    Pac    Sac   mVac  Mvac   mf   Mf  thd   fp      ef  minT  maxT  weig  heig  widt leng   icost Phase   hum    alt   mod  tier   I6010   UL1703\n    fronius = np.array(['Fronius_PRIMO_3.0.1',1,12,2,18,80,800,200,800,2,4500,13,3000,3000,180,270,45,65,5,0.85,97.6,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_3.5.1',2,12,2,18,80,800,200,800,2,5300,15.2,3500,3500,180,270,45,65,5,0.85,97.7,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_3.6.1',3,12,2,18,80,800,200,800,2,5500,16,3680,3680,180,270,45,65,5,0.85,97.7,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_4.0.1',4,12,2,18,80,800,200,800,2,6000,17.4,4000,4000,180,270,45,65,5,0.85,97.7,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_4.6.1',5,12,2,18,80,800,200,800,2,6900,20,4600,4600,180,270,45,65,5,0.85,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_5.0.1',6,12,2,18,80,800,240,800,2,7500,21.7,5000,5000,180,270,45,65,5,0.85,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_5.0.1AUS',7,18,2,27,80,800,240,800,2,7500,21.7,4600,5000,180,270,45,65,5,0.85,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_6.0.1',8,18,2,27,80,800,240,800,2,9000,26.1,6000,6000,180,270,45,65,5,0.85,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_8.2.1',9,18,2,27,80,800,270,800,2,12300,35.7,8200,8200,180,270,45,65,5,0.85,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5])\n    #      type                      no  Imppt  NMPP   Icc  Vmpptm  VmpptM    mVn   MVn  NoDC    Pdc    Iac    Pac    Sac   mVac  Mvac   mf   Mf     thd   fp     ef  minT  maxT  weig  heig  widt leng   icost Phase   hum    alt   mod  tier\n    canadian = np.array(['Canadian_CSI-7KTL1P-GI-FL',1,10,3,15.6,100,500,120,500,3,8000,30.4,7000,7700,160,285,47,62,1.5,0.8,98.1,- 25,60,18.0,573,333,249,1,1,100,4000,10,4,'Canadian_CSI-8KTL1P-GI-FL',2,10,3,15.6,100,500,120,500,3,9200,34.8,8000,8800,160,285,47,62,1.5,0.8,98.1,- 25,60,18.0,573,333,249,1,1,100,4000,10,4,'Canadian_CSI-9KTL1P-GI-FL',3,10,3,15.6,100,500,120,500,3,10800,39.1,9000,9900,160,285,47,62,1.5,0.8,98.1,- 25,60,18.0,573,333,249,1,1,100,4000,10,4,'Canadian_CSI-10KTL1P-GI-FL',4,10,3,15.6,100,500,120,500,3,11500,43.5,10000,10000,160,285,47,62,1.5,0.8,98.1,- 25,60,18.0,573,333,249,1,1,100,4000,10,4])\n    #      type                      no  Imppt  NMPP   Icc  Vmpptm  VmpptM    mVn   MVn  NoDC    Pdc    Iac    Pac    Sac   mVac  Mvac   mf   Mf   thd   fp      ef  minT  maxT  weig  heig  widt leng   icost Phase   hum    alt   mod  tier",
        "detail": "old.inverter_parameters",
        "documentation": {}
    },
    {
        "label": "#tier",
        "kind": 5,
        "importPath": "old.inverter_parameters",
        "description": "old.inverter_parameters",
        "peekOfCode": "#tier = IEC -60529; IEC-60000-3-2; IEC-61727; IEC-62109; IEEE-929;UL-1741;DIN-VDE-0126-1; EN-61000;\n    ####OS VALORES DOS EQUIPAMENTOS PODEM SER CONSULTADOS NO SITE DA NEOSOLAR,\n####ASSIM COMO O CAT�LOGO\n    #      type                      no  Imppt  NMPP   Icc  Vmpptm  VmpptM     mVn   MVn  NoDC    Pdc    Iac    Pac    Sac   mVac  Mvac   mf   Mf  thd   fp      ef  minT  maxT  weig  heig  widt leng   icost Phase   hum    alt   mod  tier   I6010   UL1703\n    fronius = np.array(['Fronius_PRIMO_3.0.1',1,12,2,18,80,800,200,800,2,4500,13,3000,3000,180,270,45,65,5,0.85,97.6,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_3.5.1',2,12,2,18,80,800,200,800,2,5300,15.2,3500,3500,180,270,45,65,5,0.85,97.7,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_3.6.1',3,12,2,18,80,800,200,800,2,5500,16,3680,3680,180,270,45,65,5,0.85,97.7,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_4.0.1',4,12,2,18,80,800,200,800,2,6000,17.4,4000,4000,180,270,45,65,5,0.85,97.7,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_4.6.1',5,12,2,18,80,800,200,800,2,6900,20,4600,4600,180,270,45,65,5,0.85,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_5.0.1',6,12,2,18,80,800,240,800,2,7500,21.7,5000,5000,180,270,45,65,5,0.85,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_5.0.1AUS',7,18,2,27,80,800,240,800,2,7500,21.7,4600,5000,180,270,45,65,5,0.85,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_6.0.1',8,18,2,27,80,800,240,800,2,9000,26.1,6000,6000,180,270,45,65,5,0.85,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5,'Fronius_PRIMO_8.2.1',9,18,2,27,80,800,270,800,2,12300,35.7,8200,8200,180,270,45,65,5,0.85,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,5])\n    #      type                      no  Imppt  NMPP   Icc  Vmpptm  VmpptM    mVn   MVn  NoDC    Pdc    Iac    Pac    Sac   mVac  Mvac   mf   Mf     thd   fp     ef  minT  maxT  weig  heig  widt leng   icost Phase   hum    alt   mod  tier\n    canadian = np.array(['Canadian_CSI-7KTL1P-GI-FL',1,10,3,15.6,100,500,120,500,3,8000,30.4,7000,7700,160,285,47,62,1.5,0.8,98.1,- 25,60,18.0,573,333,249,1,1,100,4000,10,4,'Canadian_CSI-8KTL1P-GI-FL',2,10,3,15.6,100,500,120,500,3,9200,34.8,8000,8800,160,285,47,62,1.5,0.8,98.1,- 25,60,18.0,573,333,249,1,1,100,4000,10,4,'Canadian_CSI-9KTL1P-GI-FL',3,10,3,15.6,100,500,120,500,3,10800,39.1,9000,9900,160,285,47,62,1.5,0.8,98.1,- 25,60,18.0,573,333,249,1,1,100,4000,10,4,'Canadian_CSI-10KTL1P-GI-FL',4,10,3,15.6,100,500,120,500,3,11500,43.5,10000,10000,160,285,47,62,1.5,0.8,98.1,- 25,60,18.0,573,333,249,1,1,100,4000,10,4])\n    #      type                      no  Imppt  NMPP   Icc  Vmpptm  VmpptM    mVn   MVn  NoDC    Pdc    Iac    Pac    Sac   mVac  Mvac   mf   Mf   thd   fp      ef  minT  maxT  weig  heig  widt leng   icost Phase   hum    alt   mod  tier\n    abb = np.array(['ABB_PVI-3.0-1',1,10,2,12.5,160,530,200,530,2,3000,14.5,3000,3000,183,228,57,60.5,2,0.8,96.9,- 25,60,21.5,859,325,222,1,1,100,2000,10,4,'ABB_PVI-3.0-2',2,10,2,12.5,160,530,200,530,2,3300,14.5,3000,3000,211,264,57,60.5,2,0.8,96.9,- 25,60,21.5,859,325,222,1,1,100,2000,10,4,'ABB_PVI-3.0-3',3,10,2,12.5,160,530,200,530,2,3300,12,3000,3000,244,304,57,60.5,2,0.8,96.9,- 25,60,21.5,859,325,222,1,1,100,2000,10,4,'ABB_PVI-3.6-1',4,16,2,20,120,530,200,530,2,3600,17.2,3600,3600,183,228,57,60.5,2,0.8,97.0,- 25,60,21.5,859,325,222,1,1,100,2000,10,4,'ABB_PVI-3.6-2',5,16,2,20,120,530,200,530,2,4000,16.0,3600,3600,211,264,57,60.5,2,0.8,97.0,- 25,60,21.5,859,325,222,1,1,100,2000,10,4,'ABB_PVI-3.6-3',6,16,2,20,120,530,200,530,2,4000,16.0,3600,3600,244,304,57,60.5,2,0.8,97.0,- 25,60,21.5,859,325,222,1,1,100,2000,10,4,'ABB_PVI-3.8-1',7,16,2,20,140,530,200,530,2,3300,16.0,3300,3300,183,228,57,60.5,2,0.8,97.0,- 25,60,21.5,859,325,222,1,1,100,2000,10,4,'ABB_PVI-3.8-2',8,16,2,20,140,530,200,530,2,4200,16.0,3800,3800,211,264,57,60.5,2,0.8,97.0,- 25,60,21.5,859,325,222,1,1,100,2000,10,4,'ABB_PVI-3.8-3',9,16,2,20,140,530,200,530,2,4200,16.0,3800,3800,244,304,57,60.5,2,0.8,97.0,- 25,60,21.5,859,325,222,1,1,100,2000,10,4,'ABB_PVI-4.2-1',10,16,2,20,140,530,200,530,2,4200,20.0,4200,4200,183,228,57,60.5,2,0.8,97.0,- 25,60,21.5,859,325,222,1,1,100,2000,10,4,'ABB_PVI-4.2-2',11,16,2,20,140,530,200,530,2,4600,20.0,4200,4200,211,264,57,60.5,2,0.8,97.0,- 25,60,21.5,859,325,222,1,1,100,2000,10,4,'ABB_PVI-4.2-3',12,16,2,20,140,530,200,530,2,4600,20.0,4200,4200,244,304,57,60.5,2,0.8,97.0,- 25,60,21.5,859,325,222,1,1,100,2000,10,4])\n    #      type                      no  Imppt  NMPP   Icc  Vmpptm  VmpptM    mVn   MVn  NoDC    Pdc    Iac    Pac    Sac   mVac  Mvac   mf   Mf   thd   fp      ef  minT  maxT  weig  heig  widt leng   icost Phase   hum    alt   mod  tier",
        "detail": "old.inverter_parameters",
        "documentation": {}
    },
    {
        "label": "inverter_parameters",
        "kind": 2,
        "importPath": "old.inverter_parameters_matheus",
        "description": "old.inverter_parameters_matheus",
        "peekOfCode": "def inverter_parameters(pro = None): \n    # Prepared by: Gustavo Dill - 12/03/2020\n    # Function show the datasheet of Fronius Inverter\n    # LEGEND:[Ninv_tilt,Ninv_glo,Ninv_dir,Ninv_dif,Cinv_tilt,Cinv_glo,Cinv_dir,\n# Cinv_dif,pos_atem]=inverter1(v_out,v_sis,P_tilt,P_glo,P_dir,P_dif,a_temp,nf);\n#Imppt1 = Max. Idc for Mppt1 (A)\n#NPPT = Number of MPP trackers\n#Icc1 = Max. short-circuit for Imppt (A)\n#Vmpptm = Min. Usage Mppt Voltage (V)\n#VmpptM = Max. Usage Mppt Voltage (V)",
        "detail": "old.inverter_parameters_matheus",
        "documentation": {}
    },
    {
        "label": "#Imppt1",
        "kind": 5,
        "importPath": "old.inverter_parameters_matheus",
        "description": "old.inverter_parameters_matheus",
        "peekOfCode": "#Imppt1 = Max. Idc for Mppt1 (A)\n#NPPT = Number of MPP trackers\n#Icc1 = Max. short-circuit for Imppt (A)\n#Vmpptm = Min. Usage Mppt Voltage (V)\n#VmpptM = Max. Usage Mppt Voltage (V)\n#mVn = Min. voltage for nominal power (V)\n#MVn = Max. voltage for nominal power (V)\n#NoDC = Number of DC connections\n#Pdc = DC power (W)\n#Iac = AC output current (A)",
        "detail": "old.inverter_parameters_matheus",
        "documentation": {}
    },
    {
        "label": "#NPPT",
        "kind": 5,
        "importPath": "old.inverter_parameters_matheus",
        "description": "old.inverter_parameters_matheus",
        "peekOfCode": "#NPPT = Number of MPP trackers\n#Icc1 = Max. short-circuit for Imppt (A)\n#Vmpptm = Min. Usage Mppt Voltage (V)\n#VmpptM = Max. Usage Mppt Voltage (V)\n#mVn = Min. voltage for nominal power (V)\n#MVn = Max. voltage for nominal power (V)\n#NoDC = Number of DC connections\n#Pdc = DC power (W)\n#Iac = AC output current (A)\n#Pac = AC nominal power (W)",
        "detail": "old.inverter_parameters_matheus",
        "documentation": {}
    },
    {
        "label": "#Icc1",
        "kind": 5,
        "importPath": "old.inverter_parameters_matheus",
        "description": "old.inverter_parameters_matheus",
        "peekOfCode": "#Icc1 = Max. short-circuit for Imppt (A)\n#Vmpptm = Min. Usage Mppt Voltage (V)\n#VmpptM = Max. Usage Mppt Voltage (V)\n#mVn = Min. voltage for nominal power (V)\n#MVn = Max. voltage for nominal power (V)\n#NoDC = Number of DC connections\n#Pdc = DC power (W)\n#Iac = AC output current (A)\n#Pac = AC nominal power (W)\n#Sac = AC Max. Output power (VA)",
        "detail": "old.inverter_parameters_matheus",
        "documentation": {}
    },
    {
        "label": "#Vmpptm",
        "kind": 5,
        "importPath": "old.inverter_parameters_matheus",
        "description": "old.inverter_parameters_matheus",
        "peekOfCode": "#Vmpptm = Min. Usage Mppt Voltage (V)\n#VmpptM = Max. Usage Mppt Voltage (V)\n#mVn = Min. voltage for nominal power (V)\n#MVn = Max. voltage for nominal power (V)\n#NoDC = Number of DC connections\n#Pdc = DC power (W)\n#Iac = AC output current (A)\n#Pac = AC nominal power (W)\n#Sac = AC Max. Output power (VA)\n#mVac = AC Min. voltage range (V)",
        "detail": "old.inverter_parameters_matheus",
        "documentation": {}
    },
    {
        "label": "#VmpptM",
        "kind": 5,
        "importPath": "old.inverter_parameters_matheus",
        "description": "old.inverter_parameters_matheus",
        "peekOfCode": "#VmpptM = Max. Usage Mppt Voltage (V)\n#mVn = Min. voltage for nominal power (V)\n#MVn = Max. voltage for nominal power (V)\n#NoDC = Number of DC connections\n#Pdc = DC power (W)\n#Iac = AC output current (A)\n#Pac = AC nominal power (W)\n#Sac = AC Max. Output power (VA)\n#mVac = AC Min. voltage range (V)\n#Mvac = AC Min. voltage range (V)",
        "detail": "old.inverter_parameters_matheus",
        "documentation": {}
    },
    {
        "label": "#mVn",
        "kind": 5,
        "importPath": "old.inverter_parameters_matheus",
        "description": "old.inverter_parameters_matheus",
        "peekOfCode": "#mVn = Min. voltage for nominal power (V)\n#MVn = Max. voltage for nominal power (V)\n#NoDC = Number of DC connections\n#Pdc = DC power (W)\n#Iac = AC output current (A)\n#Pac = AC nominal power (W)\n#Sac = AC Max. Output power (VA)\n#mVac = AC Min. voltage range (V)\n#Mvac = AC Min. voltage range (V)\n#mfac = AC Min. frequency range (V)",
        "detail": "old.inverter_parameters_matheus",
        "documentation": {}
    },
    {
        "label": "#MVn",
        "kind": 5,
        "importPath": "old.inverter_parameters_matheus",
        "description": "old.inverter_parameters_matheus",
        "peekOfCode": "#MVn = Max. voltage for nominal power (V)\n#NoDC = Number of DC connections\n#Pdc = DC power (W)\n#Iac = AC output current (A)\n#Pac = AC nominal power (W)\n#Sac = AC Max. Output power (VA)\n#mVac = AC Min. voltage range (V)\n#Mvac = AC Min. voltage range (V)\n#mfac = AC Min. frequency range (V)\n#Mf  = AC Max. frequency range (V)",
        "detail": "old.inverter_parameters_matheus",
        "documentation": {}
    },
    {
        "label": "#NoDC",
        "kind": 5,
        "importPath": "old.inverter_parameters_matheus",
        "description": "old.inverter_parameters_matheus",
        "peekOfCode": "#NoDC = Number of DC connections\n#Pdc = DC power (W)\n#Iac = AC output current (A)\n#Pac = AC nominal power (W)\n#Sac = AC Max. Output power (VA)\n#mVac = AC Min. voltage range (V)\n#Mvac = AC Min. voltage range (V)\n#mfac = AC Min. frequency range (V)\n#Mf  = AC Max. frequency range (V)\n#thd = total harmonic distorcion (#)",
        "detail": "old.inverter_parameters_matheus",
        "documentation": {}
    },
    {
        "label": "#Pdc",
        "kind": 5,
        "importPath": "old.inverter_parameters_matheus",
        "description": "old.inverter_parameters_matheus",
        "peekOfCode": "#Pdc = DC power (W)\n#Iac = AC output current (A)\n#Pac = AC nominal power (W)\n#Sac = AC Max. Output power (VA)\n#mVac = AC Min. voltage range (V)\n#Mvac = AC Min. voltage range (V)\n#mfac = AC Min. frequency range (V)\n#Mf  = AC Max. frequency range (V)\n#thd = total harmonic distorcion (#)\n#fpm = Min. power factor",
        "detail": "old.inverter_parameters_matheus",
        "documentation": {}
    },
    {
        "label": "#Iac",
        "kind": 5,
        "importPath": "old.inverter_parameters_matheus",
        "description": "old.inverter_parameters_matheus",
        "peekOfCode": "#Iac = AC output current (A)\n#Pac = AC nominal power (W)\n#Sac = AC Max. Output power (VA)\n#mVac = AC Min. voltage range (V)\n#Mvac = AC Min. voltage range (V)\n#mfac = AC Min. frequency range (V)\n#Mf  = AC Max. frequency range (V)\n#thd = total harmonic distorcion (#)\n#fpm = Min. power factor\n#fpM = Max. power factor",
        "detail": "old.inverter_parameters_matheus",
        "documentation": {}
    },
    {
        "label": "#Pac",
        "kind": 5,
        "importPath": "old.inverter_parameters_matheus",
        "description": "old.inverter_parameters_matheus",
        "peekOfCode": "#Pac = AC nominal power (W)\n#Sac = AC Max. Output power (VA)\n#mVac = AC Min. voltage range (V)\n#Mvac = AC Min. voltage range (V)\n#mfac = AC Min. frequency range (V)\n#Mf  = AC Max. frequency range (V)\n#thd = total harmonic distorcion (#)\n#fpm = Min. power factor\n#fpM = Max. power factor\n#ef =  Max. efficiency",
        "detail": "old.inverter_parameters_matheus",
        "documentation": {}
    },
    {
        "label": "#Sac",
        "kind": 5,
        "importPath": "old.inverter_parameters_matheus",
        "description": "old.inverter_parameters_matheus",
        "peekOfCode": "#Sac = AC Max. Output power (VA)\n#mVac = AC Min. voltage range (V)\n#Mvac = AC Min. voltage range (V)\n#mfac = AC Min. frequency range (V)\n#Mf  = AC Max. frequency range (V)\n#thd = total harmonic distorcion (#)\n#fpm = Min. power factor\n#fpM = Max. power factor\n#ef =  Max. efficiency\n#minT  = Min. temperature range",
        "detail": "old.inverter_parameters_matheus",
        "documentation": {}
    },
    {
        "label": "#mVac",
        "kind": 5,
        "importPath": "old.inverter_parameters_matheus",
        "description": "old.inverter_parameters_matheus",
        "peekOfCode": "#mVac = AC Min. voltage range (V)\n#Mvac = AC Min. voltage range (V)\n#mfac = AC Min. frequency range (V)\n#Mf  = AC Max. frequency range (V)\n#thd = total harmonic distorcion (#)\n#fpm = Min. power factor\n#fpM = Max. power factor\n#ef =  Max. efficiency\n#minT  = Min. temperature range\n#maxT = Max. temperature range",
        "detail": "old.inverter_parameters_matheus",
        "documentation": {}
    },
    {
        "label": "#Mvac",
        "kind": 5,
        "importPath": "old.inverter_parameters_matheus",
        "description": "old.inverter_parameters_matheus",
        "peekOfCode": "#Mvac = AC Min. voltage range (V)\n#mfac = AC Min. frequency range (V)\n#Mf  = AC Max. frequency range (V)\n#thd = total harmonic distorcion (#)\n#fpm = Min. power factor\n#fpM = Max. power factor\n#ef =  Max. efficiency\n#minT  = Min. temperature range\n#maxT = Max. temperature range\n#weig = Weight (kg)",
        "detail": "old.inverter_parameters_matheus",
        "documentation": {}
    },
    {
        "label": "#mfac",
        "kind": 5,
        "importPath": "old.inverter_parameters_matheus",
        "description": "old.inverter_parameters_matheus",
        "peekOfCode": "#mfac = AC Min. frequency range (V)\n#Mf  = AC Max. frequency range (V)\n#thd = total harmonic distorcion (#)\n#fpm = Min. power factor\n#fpM = Max. power factor\n#ef =  Max. efficiency\n#minT  = Min. temperature range\n#maxT = Max. temperature range\n#weig = Weight (kg)\n#heig = height (mm)",
        "detail": "old.inverter_parameters_matheus",
        "documentation": {}
    },
    {
        "label": "#thd",
        "kind": 5,
        "importPath": "old.inverter_parameters_matheus",
        "description": "old.inverter_parameters_matheus",
        "peekOfCode": "#thd = total harmonic distorcion (#)\n#fpm = Min. power factor\n#fpM = Max. power factor\n#ef =  Max. efficiency\n#minT  = Min. temperature range\n#maxT = Max. temperature range\n#weig = Weight (kg)\n#heig = height (mm)\n#widt = width (mm)\n#leng = length (mm)",
        "detail": "old.inverter_parameters_matheus",
        "documentation": {}
    },
    {
        "label": "#fpm",
        "kind": 5,
        "importPath": "old.inverter_parameters_matheus",
        "description": "old.inverter_parameters_matheus",
        "peekOfCode": "#fpm = Min. power factor\n#fpM = Max. power factor\n#ef =  Max. efficiency\n#minT  = Min. temperature range\n#maxT = Max. temperature range\n#weig = Weight (kg)\n#heig = height (mm)\n#widt = width (mm)\n#leng = length (mm)\n#icost = index",
        "detail": "old.inverter_parameters_matheus",
        "documentation": {}
    },
    {
        "label": "#fpM",
        "kind": 5,
        "importPath": "old.inverter_parameters_matheus",
        "description": "old.inverter_parameters_matheus",
        "peekOfCode": "#fpM = Max. power factor\n#ef =  Max. efficiency\n#minT  = Min. temperature range\n#maxT = Max. temperature range\n#weig = Weight (kg)\n#heig = height (mm)\n#widt = width (mm)\n#leng = length (mm)\n#icost = index\n#Phase = number of phases",
        "detail": "old.inverter_parameters_matheus",
        "documentation": {}
    },
    {
        "label": "#ef",
        "kind": 5,
        "importPath": "old.inverter_parameters_matheus",
        "description": "old.inverter_parameters_matheus",
        "peekOfCode": "#ef =  Max. efficiency\n#minT  = Min. temperature range\n#maxT = Max. temperature range\n#weig = Weight (kg)\n#heig = height (mm)\n#widt = width (mm)\n#leng = length (mm)\n#icost = index\n#Phase = number of phases\n#hum = Max. humidity",
        "detail": "old.inverter_parameters_matheus",
        "documentation": {}
    },
    {
        "label": "#maxT",
        "kind": 5,
        "importPath": "old.inverter_parameters_matheus",
        "description": "old.inverter_parameters_matheus",
        "peekOfCode": "#maxT = Max. temperature range\n#weig = Weight (kg)\n#heig = height (mm)\n#widt = width (mm)\n#leng = length (mm)\n#icost = index\n#Phase = number of phases\n#hum = Max. humidity\n#alt = Max. Altitud\n# mod = [10] to on-grid /  [20] to hybrid / [30] to off-grid pure senoid  / [31] to off-grid modified senoid",
        "detail": "old.inverter_parameters_matheus",
        "documentation": {}
    },
    {
        "label": "#weig",
        "kind": 5,
        "importPath": "old.inverter_parameters_matheus",
        "description": "old.inverter_parameters_matheus",
        "peekOfCode": "#weig = Weight (kg)\n#heig = height (mm)\n#widt = width (mm)\n#leng = length (mm)\n#icost = index\n#Phase = number of phases\n#hum = Max. humidity\n#alt = Max. Altitud\n# mod = [10] to on-grid /  [20] to hybrid / [30] to off-grid pure senoid  / [31] to off-grid modified senoid\n#tier = IEC -60529; IEC-60000-3-2; IEC-61727; IEC-62109; IEEE-929;UL-1741;DIN-VDE-0126-1; EN-61000;",
        "detail": "old.inverter_parameters_matheus",
        "documentation": {}
    },
    {
        "label": "#heig",
        "kind": 5,
        "importPath": "old.inverter_parameters_matheus",
        "description": "old.inverter_parameters_matheus",
        "peekOfCode": "#heig = height (mm)\n#widt = width (mm)\n#leng = length (mm)\n#icost = index\n#Phase = number of phases\n#hum = Max. humidity\n#alt = Max. Altitud\n# mod = [10] to on-grid /  [20] to hybrid / [30] to off-grid pure senoid  / [31] to off-grid modified senoid\n#tier = IEC -60529; IEC-60000-3-2; IEC-61727; IEC-62109; IEEE-929;UL-1741;DIN-VDE-0126-1; EN-61000;\n    ####OS VALORES DOS EQUIPAMENTOS PODEM SER CONSULTADOS NO SITE DA NEOSOLAR,",
        "detail": "old.inverter_parameters_matheus",
        "documentation": {}
    },
    {
        "label": "#widt",
        "kind": 5,
        "importPath": "old.inverter_parameters_matheus",
        "description": "old.inverter_parameters_matheus",
        "peekOfCode": "#widt = width (mm)\n#leng = length (mm)\n#icost = index\n#Phase = number of phases\n#hum = Max. humidity\n#alt = Max. Altitud\n# mod = [10] to on-grid /  [20] to hybrid / [30] to off-grid pure senoid  / [31] to off-grid modified senoid\n#tier = IEC -60529; IEC-60000-3-2; IEC-61727; IEC-62109; IEEE-929;UL-1741;DIN-VDE-0126-1; EN-61000;\n    ####OS VALORES DOS EQUIPAMENTOS PODEM SER CONSULTADOS NO SITE DA NEOSOLAR,\n####ASSIM COMO O CAT�LOGO",
        "detail": "old.inverter_parameters_matheus",
        "documentation": {}
    },
    {
        "label": "#leng",
        "kind": 5,
        "importPath": "old.inverter_parameters_matheus",
        "description": "old.inverter_parameters_matheus",
        "peekOfCode": "#leng = length (mm)\n#icost = index\n#Phase = number of phases\n#hum = Max. humidity\n#alt = Max. Altitud\n# mod = [10] to on-grid /  [20] to hybrid / [30] to off-grid pure senoid  / [31] to off-grid modified senoid\n#tier = IEC -60529; IEC-60000-3-2; IEC-61727; IEC-62109; IEEE-929;UL-1741;DIN-VDE-0126-1; EN-61000;\n    ####OS VALORES DOS EQUIPAMENTOS PODEM SER CONSULTADOS NO SITE DA NEOSOLAR,\n####ASSIM COMO O CAT�LOGO\n    #      type                      no  Imppt  NMPP   Icc  Vmpptm  VmpptM    mVn   MVn  NoDC    Pdc    Iac    Pac    Sac   mVac  Mvac   mf   Mf   thd   fpm  fpM      ef  minT  maxT  weig  heig  widt leng  icost  Phase   hum    alt   mod  tier",
        "detail": "old.inverter_parameters_matheus",
        "documentation": {}
    },
    {
        "label": "#icost",
        "kind": 5,
        "importPath": "old.inverter_parameters_matheus",
        "description": "old.inverter_parameters_matheus",
        "peekOfCode": "#icost = index\n#Phase = number of phases\n#hum = Max. humidity\n#alt = Max. Altitud\n# mod = [10] to on-grid /  [20] to hybrid / [30] to off-grid pure senoid  / [31] to off-grid modified senoid\n#tier = IEC -60529; IEC-60000-3-2; IEC-61727; IEC-62109; IEEE-929;UL-1741;DIN-VDE-0126-1; EN-61000;\n    ####OS VALORES DOS EQUIPAMENTOS PODEM SER CONSULTADOS NO SITE DA NEOSOLAR,\n####ASSIM COMO O CAT�LOGO\n    #      type                      no  Imppt  NMPP   Icc  Vmpptm  VmpptM    mVn   MVn  NoDC    Pdc    Iac    Pac    Sac   mVac  Mvac   mf   Mf   thd   fpm  fpM      ef  minT  maxT  weig  heig  widt leng  icost  Phase   hum    alt   mod  tier\n    fronius = np.array(['Fronius_PRIMO_3.0.1',1,12,2,18,80,800,200,800,2,4500,13,3000,3000,180,270,45,65,5,0.85,1,97.6,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_PRIMO_3.5.1',2,12,2,18,80,800,200,800,2,5300,15.2,3500,3500,180,270,45,65,5,0.85,1,97.7,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_PRIMO_3.6.1',3,12,2,18,80,800,200,800,2,5500,16,3680,3680,180,270,45,65,5,0.85,1,97.7,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_PRIMO_4.0.1',4,12,2,18,80,800,200,800,2,6000,17.4,4000,4000,180,270,45,65,5,0.85,1,97.7,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_PRIMO_4.6.1',5,12,2,18,80,800,200,800,2,6900,20,4600,4600,180,270,45,65,5,0.85,1,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_PRIMO_5.0.1',6,12,2,18,80,800,240,800,2,7500,21.7,5000,5000,180,270,45,65,5,0.85,1,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_PRIMO_5.0.1AUS',7,18,2,27,80,800,240,800,2,7500,21.7,4600,5000,180,270,45,65,5,0.85,1,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_PRIMO_6.0.1',8,18,2,27,80,800,240,800,2,9000,26.1,6000,6000,180,270,45,65,5,0.85,1,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_PRIMO_8.2.1',9,18,2,27,80,800,270,800,2,12300,35.7,8200,8200,180,270,45,65,5,0.85,1,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_SYMO_3.0-3-M',10,16,2,24,150,800,150,800,2,6000,4.3,3000,3000,150,280,45,65,3,0.85,1,96.5,- 25,60,19.9,645,431,204,3.17,3,100,3400,10,4,'Fronius_SYMO_12.5-3-M',11,27,2,40.5,200,800,320,800,3,18800,18,12500,12500,150,280,45,65,2,0,1,97.6,- 40,60,34.8,725,510,225,3.17,3,100,3400,10,4,'Fronius_SYMO_15.0-3-M',12,33,2,49.5,200,800,320,800,3,22500,21.7,15000,15000,150,280,45,65,1.5,0,1,97.8,- 40,60,43.4,725,510,225,3.17,3,100,3400,10,4,'Fronius_SYMO_17.5-3-M',13,33,2,49.5,200,800,370,800,3,26300,25.3,17500,17500,150,280,45,65,1.5,0,1,97.8,- 40,60,43.4,725,510,225,3.17,3,100,3400,10,4,'Fronius_SYMO_20.0-3-M',14,33,2,49.5,200,800,420,800,3,30000,28.9,20000,20000,150,280,45,65,1.3,0,1,97.9,- 40,60,43.4,725,510,225,3.17,3,100,3400,10,4,'Fronius_ECO_25.0-3-S',15,44.2,1,71.6,580,850,300,500,6,37800,37.9,25000,25000,150,275,45,65,2,0,1,98.0,- 25,60,35.7,725,510,225,3.17,3,100,2000,10,4,'Fronius_ECO_27.0-3-S',16,47.7,1,71.6,580,850,580,580,6,37800,40.9,27000,27000,150,275,45,65,2,0,1,98.0,- 25,60,35.7,725,510,225,3.17,3,100,2000,10,4,'Fronius_SYMO_ADVANCED_10.0-3-M',17,20.7,2,41.5,300,500,200,600,6,13000,27.7,9995,9995,208,240,45,66,1.5,0,1,96.5,- 25,60,41.7,724,511,226,3.17,3,100,3400,10,1])",
        "detail": "old.inverter_parameters_matheus",
        "documentation": {}
    },
    {
        "label": "#Phase",
        "kind": 5,
        "importPath": "old.inverter_parameters_matheus",
        "description": "old.inverter_parameters_matheus",
        "peekOfCode": "#Phase = number of phases\n#hum = Max. humidity\n#alt = Max. Altitud\n# mod = [10] to on-grid /  [20] to hybrid / [30] to off-grid pure senoid  / [31] to off-grid modified senoid\n#tier = IEC -60529; IEC-60000-3-2; IEC-61727; IEC-62109; IEEE-929;UL-1741;DIN-VDE-0126-1; EN-61000;\n    ####OS VALORES DOS EQUIPAMENTOS PODEM SER CONSULTADOS NO SITE DA NEOSOLAR,\n####ASSIM COMO O CAT�LOGO\n    #      type                      no  Imppt  NMPP   Icc  Vmpptm  VmpptM    mVn   MVn  NoDC    Pdc    Iac    Pac    Sac   mVac  Mvac   mf   Mf   thd   fpm  fpM      ef  minT  maxT  weig  heig  widt leng  icost  Phase   hum    alt   mod  tier\n    fronius = np.array(['Fronius_PRIMO_3.0.1',1,12,2,18,80,800,200,800,2,4500,13,3000,3000,180,270,45,65,5,0.85,1,97.6,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_PRIMO_3.5.1',2,12,2,18,80,800,200,800,2,5300,15.2,3500,3500,180,270,45,65,5,0.85,1,97.7,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_PRIMO_3.6.1',3,12,2,18,80,800,200,800,2,5500,16,3680,3680,180,270,45,65,5,0.85,1,97.7,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_PRIMO_4.0.1',4,12,2,18,80,800,200,800,2,6000,17.4,4000,4000,180,270,45,65,5,0.85,1,97.7,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_PRIMO_4.6.1',5,12,2,18,80,800,200,800,2,6900,20,4600,4600,180,270,45,65,5,0.85,1,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_PRIMO_5.0.1',6,12,2,18,80,800,240,800,2,7500,21.7,5000,5000,180,270,45,65,5,0.85,1,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_PRIMO_5.0.1AUS',7,18,2,27,80,800,240,800,2,7500,21.7,4600,5000,180,270,45,65,5,0.85,1,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_PRIMO_6.0.1',8,18,2,27,80,800,240,800,2,9000,26.1,6000,6000,180,270,45,65,5,0.85,1,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_PRIMO_8.2.1',9,18,2,27,80,800,270,800,2,12300,35.7,8200,8200,180,270,45,65,5,0.85,1,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_SYMO_3.0-3-M',10,16,2,24,150,800,150,800,2,6000,4.3,3000,3000,150,280,45,65,3,0.85,1,96.5,- 25,60,19.9,645,431,204,3.17,3,100,3400,10,4,'Fronius_SYMO_12.5-3-M',11,27,2,40.5,200,800,320,800,3,18800,18,12500,12500,150,280,45,65,2,0,1,97.6,- 40,60,34.8,725,510,225,3.17,3,100,3400,10,4,'Fronius_SYMO_15.0-3-M',12,33,2,49.5,200,800,320,800,3,22500,21.7,15000,15000,150,280,45,65,1.5,0,1,97.8,- 40,60,43.4,725,510,225,3.17,3,100,3400,10,4,'Fronius_SYMO_17.5-3-M',13,33,2,49.5,200,800,370,800,3,26300,25.3,17500,17500,150,280,45,65,1.5,0,1,97.8,- 40,60,43.4,725,510,225,3.17,3,100,3400,10,4,'Fronius_SYMO_20.0-3-M',14,33,2,49.5,200,800,420,800,3,30000,28.9,20000,20000,150,280,45,65,1.3,0,1,97.9,- 40,60,43.4,725,510,225,3.17,3,100,3400,10,4,'Fronius_ECO_25.0-3-S',15,44.2,1,71.6,580,850,300,500,6,37800,37.9,25000,25000,150,275,45,65,2,0,1,98.0,- 25,60,35.7,725,510,225,3.17,3,100,2000,10,4,'Fronius_ECO_27.0-3-S',16,47.7,1,71.6,580,850,580,580,6,37800,40.9,27000,27000,150,275,45,65,2,0,1,98.0,- 25,60,35.7,725,510,225,3.17,3,100,2000,10,4,'Fronius_SYMO_ADVANCED_10.0-3-M',17,20.7,2,41.5,300,500,200,600,6,13000,27.7,9995,9995,208,240,45,66,1.5,0,1,96.5,- 25,60,41.7,724,511,226,3.17,3,100,3400,10,1])\n    #      type                      no  Imppt  NMPP   Icc  Vmpptm    Vmpp    mVn   MVn  NoDC    Pdc    Iac    Pac    Sac   mVac  Mvac   mf   Mf   thd  fpm  fpM    ef  minT  maxT  weig  heig  widt leng   icost Phase   hum    alt   mod  tier",
        "detail": "old.inverter_parameters_matheus",
        "documentation": {}
    },
    {
        "label": "#hum",
        "kind": 5,
        "importPath": "old.inverter_parameters_matheus",
        "description": "old.inverter_parameters_matheus",
        "peekOfCode": "#hum = Max. humidity\n#alt = Max. Altitud\n# mod = [10] to on-grid /  [20] to hybrid / [30] to off-grid pure senoid  / [31] to off-grid modified senoid\n#tier = IEC -60529; IEC-60000-3-2; IEC-61727; IEC-62109; IEEE-929;UL-1741;DIN-VDE-0126-1; EN-61000;\n    ####OS VALORES DOS EQUIPAMENTOS PODEM SER CONSULTADOS NO SITE DA NEOSOLAR,\n####ASSIM COMO O CAT�LOGO\n    #      type                      no  Imppt  NMPP   Icc  Vmpptm  VmpptM    mVn   MVn  NoDC    Pdc    Iac    Pac    Sac   mVac  Mvac   mf   Mf   thd   fpm  fpM      ef  minT  maxT  weig  heig  widt leng  icost  Phase   hum    alt   mod  tier\n    fronius = np.array(['Fronius_PRIMO_3.0.1',1,12,2,18,80,800,200,800,2,4500,13,3000,3000,180,270,45,65,5,0.85,1,97.6,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_PRIMO_3.5.1',2,12,2,18,80,800,200,800,2,5300,15.2,3500,3500,180,270,45,65,5,0.85,1,97.7,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_PRIMO_3.6.1',3,12,2,18,80,800,200,800,2,5500,16,3680,3680,180,270,45,65,5,0.85,1,97.7,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_PRIMO_4.0.1',4,12,2,18,80,800,200,800,2,6000,17.4,4000,4000,180,270,45,65,5,0.85,1,97.7,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_PRIMO_4.6.1',5,12,2,18,80,800,200,800,2,6900,20,4600,4600,180,270,45,65,5,0.85,1,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_PRIMO_5.0.1',6,12,2,18,80,800,240,800,2,7500,21.7,5000,5000,180,270,45,65,5,0.85,1,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_PRIMO_5.0.1AUS',7,18,2,27,80,800,240,800,2,7500,21.7,4600,5000,180,270,45,65,5,0.85,1,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_PRIMO_6.0.1',8,18,2,27,80,800,240,800,2,9000,26.1,6000,6000,180,270,45,65,5,0.85,1,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_PRIMO_8.2.1',9,18,2,27,80,800,270,800,2,12300,35.7,8200,8200,180,270,45,65,5,0.85,1,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_SYMO_3.0-3-M',10,16,2,24,150,800,150,800,2,6000,4.3,3000,3000,150,280,45,65,3,0.85,1,96.5,- 25,60,19.9,645,431,204,3.17,3,100,3400,10,4,'Fronius_SYMO_12.5-3-M',11,27,2,40.5,200,800,320,800,3,18800,18,12500,12500,150,280,45,65,2,0,1,97.6,- 40,60,34.8,725,510,225,3.17,3,100,3400,10,4,'Fronius_SYMO_15.0-3-M',12,33,2,49.5,200,800,320,800,3,22500,21.7,15000,15000,150,280,45,65,1.5,0,1,97.8,- 40,60,43.4,725,510,225,3.17,3,100,3400,10,4,'Fronius_SYMO_17.5-3-M',13,33,2,49.5,200,800,370,800,3,26300,25.3,17500,17500,150,280,45,65,1.5,0,1,97.8,- 40,60,43.4,725,510,225,3.17,3,100,3400,10,4,'Fronius_SYMO_20.0-3-M',14,33,2,49.5,200,800,420,800,3,30000,28.9,20000,20000,150,280,45,65,1.3,0,1,97.9,- 40,60,43.4,725,510,225,3.17,3,100,3400,10,4,'Fronius_ECO_25.0-3-S',15,44.2,1,71.6,580,850,300,500,6,37800,37.9,25000,25000,150,275,45,65,2,0,1,98.0,- 25,60,35.7,725,510,225,3.17,3,100,2000,10,4,'Fronius_ECO_27.0-3-S',16,47.7,1,71.6,580,850,580,580,6,37800,40.9,27000,27000,150,275,45,65,2,0,1,98.0,- 25,60,35.7,725,510,225,3.17,3,100,2000,10,4,'Fronius_SYMO_ADVANCED_10.0-3-M',17,20.7,2,41.5,300,500,200,600,6,13000,27.7,9995,9995,208,240,45,66,1.5,0,1,96.5,- 25,60,41.7,724,511,226,3.17,3,100,3400,10,1])\n    #      type                      no  Imppt  NMPP   Icc  Vmpptm    Vmpp    mVn   MVn  NoDC    Pdc    Iac    Pac    Sac   mVac  Mvac   mf   Mf   thd  fpm  fpM    ef  minT  maxT  weig  heig  widt leng   icost Phase   hum    alt   mod  tier\n    canadian = np.array(['Canadian_CSI-3.0KTL1P-GI-FL',1,11,1,17.2,80,500,90,600,1,4000,13.6,3000,3300,160,285,47,62,1.5,0.8,1,96.8,- 25,60,8.8,373,310,160,1,1,100,4000,10,3,'Canadian_CSI-4KTL1P-GI-FL',2,11,2,17.2,90,520,120,600,1,5500,18.2,4000,4400,160,285,47,62,1.5,0.8,1,97.3,- 25,60,11.5,543,310,160,1,1,100,4000,10,3,'Canadian_CSI-5KTL1P-GI-FL',3,11,2,17.2,90,520,120,600,1,6800,22.7,5000,5000,160,285,47,62,1.5,0.8,1,97.3,- 25,60,11.5,543,310,160,1,1,100,4000,10,3,'Canadian_CSI-7KTL1P-GI-FL',4,10,3,15.6,100,500,120,500,3,8000,30.4,7000,7700,160,285,47,62,1.5,0.8,1,98.1,- 25,60,18.0,573,333,249,1,1,100,4000,10,3,'Canadian_CSI-8KTL1P-GI-FL',5,10,3,15.6,100,500,120,500,3,9200,34.8,8000,8800,160,285,47,62,1.5,0.8,1,98.1,- 25,60,18.0,573,333,249,1,1,100,4000,10,3,'Canadian_CSI-9KTL1P-GI-FL',6,10,3,15.6,100,500,120,500,3,10800,39.1,9000,9900,160,285,47,62,1.5,0.8,1,98.1,- 25,60,18.0,573,333,249,1,1,100,4000,10,3,'Canadian_CSI-15KTL-GI-LFL',7,20,2,28.1,200,800,350,1000,4,22500,39.4,15000,16500,180,270,47,62,3.0,0.8,1,96.5,- 25,60,58.2,700,530,356,1,3,100,4000,10,4,'Canadian_CSI-20KTL-GI-LFL',8,20,2,28.1,200,800,350,1000,4,30000,52.5,20000,20000,180,270,47,62,3.0,0.8,1,96.5,- 25,60,58.2,700,530,356,1,3,100,4000,10,4,'Canadian_CSI-25KTL-GI-L',9,28.5,2,44.5,200,850,200,1100,6,37500,65.6,25000,27500,180,270,47,62,3.0,0.8,1,96.5,- 25,60,63.0,700,630,357,1,3,100,4000,10,4,'Canadian_CSI-30KTL-GI-L',10,28.5,2,44.5,200,850,200,1100,6,45000,78.8,30000,30000,180,270,47,62,3.0,0.8,1,96.5,- 25,60,63.0,700,630,357,1,3,100,4000,10,4,'Canadian_CSI-20KTL-GI-FL',11,18,4,28.1,278,800,200,800,8,30000,30.3,20000,22000,304,460,47,62,3.0,0.8,1,98.3,- 25,60,58.2,700,530,356,1,3,100,4000,10,4,'Canadian_CSI-25KTL-GI-FL',12,18,4,28.1,347,800,200,800,8,37500,37.9,25000,27500,304,460,47,62,3.0,0.8,1,98.3,- 25,60,58.2,700,530,356,1,3,100,4000,10,4,'Canadian_CSI-30KTL-GI-FL',13,18,4,28.1,417,800,200,800,8,45000,45.5,30000,33000,304,460,47,62,3.0,0.8,1,98.3,- 25,60,58.2,700,530,356,1,3,100,4000,10,4,'Canadian_CSI-40KTL-GI-FL',14,22,4,34.3,454,850,200,800,8,60000,60.8,40000,44000,304,460,47,62,3.0,0.8,1,98.4,- 25,60,61.0,700,530,356,1,3,100,4000,10,4,'Canadian_CSI-50KTL-GI',15,28.5,4,44.5,439,850,200,800,12,75000,76.0,50000,55000,304,460,47,62,3.0,0.8,1,98.4,- 25,60,63.0,700,530,356,1,3,100,4000,10,4,'Canadian_CSI-60KTL-GI-H',16,28.5,4,44.5,526,850,200,1000,12,90000,72.2,60000,66000,384,576,47,62,3.0,0.8,1,98.5,- 25,60,63.0,700,630,357,1,3,100,4000,10,4,'Canadian_CSI-125KLT-GI-E',17,150,1,300,860,1450,860,1450,20,187500,120,125000,125000,528,660,47,62,3.0,0.8,1,98.6,- 25,60,70.0,1176,713,315,1,3,100,4000,10,2])",
        "detail": "old.inverter_parameters_matheus",
        "documentation": {}
    },
    {
        "label": "#alt",
        "kind": 5,
        "importPath": "old.inverter_parameters_matheus",
        "description": "old.inverter_parameters_matheus",
        "peekOfCode": "#alt = Max. Altitud\n# mod = [10] to on-grid /  [20] to hybrid / [30] to off-grid pure senoid  / [31] to off-grid modified senoid\n#tier = IEC -60529; IEC-60000-3-2; IEC-61727; IEC-62109; IEEE-929;UL-1741;DIN-VDE-0126-1; EN-61000;\n    ####OS VALORES DOS EQUIPAMENTOS PODEM SER CONSULTADOS NO SITE DA NEOSOLAR,\n####ASSIM COMO O CAT�LOGO\n    #      type                      no  Imppt  NMPP   Icc  Vmpptm  VmpptM    mVn   MVn  NoDC    Pdc    Iac    Pac    Sac   mVac  Mvac   mf   Mf   thd   fpm  fpM      ef  minT  maxT  weig  heig  widt leng  icost  Phase   hum    alt   mod  tier\n    fronius = np.array(['Fronius_PRIMO_3.0.1',1,12,2,18,80,800,200,800,2,4500,13,3000,3000,180,270,45,65,5,0.85,1,97.6,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_PRIMO_3.5.1',2,12,2,18,80,800,200,800,2,5300,15.2,3500,3500,180,270,45,65,5,0.85,1,97.7,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_PRIMO_3.6.1',3,12,2,18,80,800,200,800,2,5500,16,3680,3680,180,270,45,65,5,0.85,1,97.7,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_PRIMO_4.0.1',4,12,2,18,80,800,200,800,2,6000,17.4,4000,4000,180,270,45,65,5,0.85,1,97.7,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_PRIMO_4.6.1',5,12,2,18,80,800,200,800,2,6900,20,4600,4600,180,270,45,65,5,0.85,1,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_PRIMO_5.0.1',6,12,2,18,80,800,240,800,2,7500,21.7,5000,5000,180,270,45,65,5,0.85,1,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_PRIMO_5.0.1AUS',7,18,2,27,80,800,240,800,2,7500,21.7,4600,5000,180,270,45,65,5,0.85,1,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_PRIMO_6.0.1',8,18,2,27,80,800,240,800,2,9000,26.1,6000,6000,180,270,45,65,5,0.85,1,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_PRIMO_8.2.1',9,18,2,27,80,800,270,800,2,12300,35.7,8200,8200,180,270,45,65,5,0.85,1,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_SYMO_3.0-3-M',10,16,2,24,150,800,150,800,2,6000,4.3,3000,3000,150,280,45,65,3,0.85,1,96.5,- 25,60,19.9,645,431,204,3.17,3,100,3400,10,4,'Fronius_SYMO_12.5-3-M',11,27,2,40.5,200,800,320,800,3,18800,18,12500,12500,150,280,45,65,2,0,1,97.6,- 40,60,34.8,725,510,225,3.17,3,100,3400,10,4,'Fronius_SYMO_15.0-3-M',12,33,2,49.5,200,800,320,800,3,22500,21.7,15000,15000,150,280,45,65,1.5,0,1,97.8,- 40,60,43.4,725,510,225,3.17,3,100,3400,10,4,'Fronius_SYMO_17.5-3-M',13,33,2,49.5,200,800,370,800,3,26300,25.3,17500,17500,150,280,45,65,1.5,0,1,97.8,- 40,60,43.4,725,510,225,3.17,3,100,3400,10,4,'Fronius_SYMO_20.0-3-M',14,33,2,49.5,200,800,420,800,3,30000,28.9,20000,20000,150,280,45,65,1.3,0,1,97.9,- 40,60,43.4,725,510,225,3.17,3,100,3400,10,4,'Fronius_ECO_25.0-3-S',15,44.2,1,71.6,580,850,300,500,6,37800,37.9,25000,25000,150,275,45,65,2,0,1,98.0,- 25,60,35.7,725,510,225,3.17,3,100,2000,10,4,'Fronius_ECO_27.0-3-S',16,47.7,1,71.6,580,850,580,580,6,37800,40.9,27000,27000,150,275,45,65,2,0,1,98.0,- 25,60,35.7,725,510,225,3.17,3,100,2000,10,4,'Fronius_SYMO_ADVANCED_10.0-3-M',17,20.7,2,41.5,300,500,200,600,6,13000,27.7,9995,9995,208,240,45,66,1.5,0,1,96.5,- 25,60,41.7,724,511,226,3.17,3,100,3400,10,1])\n    #      type                      no  Imppt  NMPP   Icc  Vmpptm    Vmpp    mVn   MVn  NoDC    Pdc    Iac    Pac    Sac   mVac  Mvac   mf   Mf   thd  fpm  fpM    ef  minT  maxT  weig  heig  widt leng   icost Phase   hum    alt   mod  tier\n    canadian = np.array(['Canadian_CSI-3.0KTL1P-GI-FL',1,11,1,17.2,80,500,90,600,1,4000,13.6,3000,3300,160,285,47,62,1.5,0.8,1,96.8,- 25,60,8.8,373,310,160,1,1,100,4000,10,3,'Canadian_CSI-4KTL1P-GI-FL',2,11,2,17.2,90,520,120,600,1,5500,18.2,4000,4400,160,285,47,62,1.5,0.8,1,97.3,- 25,60,11.5,543,310,160,1,1,100,4000,10,3,'Canadian_CSI-5KTL1P-GI-FL',3,11,2,17.2,90,520,120,600,1,6800,22.7,5000,5000,160,285,47,62,1.5,0.8,1,97.3,- 25,60,11.5,543,310,160,1,1,100,4000,10,3,'Canadian_CSI-7KTL1P-GI-FL',4,10,3,15.6,100,500,120,500,3,8000,30.4,7000,7700,160,285,47,62,1.5,0.8,1,98.1,- 25,60,18.0,573,333,249,1,1,100,4000,10,3,'Canadian_CSI-8KTL1P-GI-FL',5,10,3,15.6,100,500,120,500,3,9200,34.8,8000,8800,160,285,47,62,1.5,0.8,1,98.1,- 25,60,18.0,573,333,249,1,1,100,4000,10,3,'Canadian_CSI-9KTL1P-GI-FL',6,10,3,15.6,100,500,120,500,3,10800,39.1,9000,9900,160,285,47,62,1.5,0.8,1,98.1,- 25,60,18.0,573,333,249,1,1,100,4000,10,3,'Canadian_CSI-15KTL-GI-LFL',7,20,2,28.1,200,800,350,1000,4,22500,39.4,15000,16500,180,270,47,62,3.0,0.8,1,96.5,- 25,60,58.2,700,530,356,1,3,100,4000,10,4,'Canadian_CSI-20KTL-GI-LFL',8,20,2,28.1,200,800,350,1000,4,30000,52.5,20000,20000,180,270,47,62,3.0,0.8,1,96.5,- 25,60,58.2,700,530,356,1,3,100,4000,10,4,'Canadian_CSI-25KTL-GI-L',9,28.5,2,44.5,200,850,200,1100,6,37500,65.6,25000,27500,180,270,47,62,3.0,0.8,1,96.5,- 25,60,63.0,700,630,357,1,3,100,4000,10,4,'Canadian_CSI-30KTL-GI-L',10,28.5,2,44.5,200,850,200,1100,6,45000,78.8,30000,30000,180,270,47,62,3.0,0.8,1,96.5,- 25,60,63.0,700,630,357,1,3,100,4000,10,4,'Canadian_CSI-20KTL-GI-FL',11,18,4,28.1,278,800,200,800,8,30000,30.3,20000,22000,304,460,47,62,3.0,0.8,1,98.3,- 25,60,58.2,700,530,356,1,3,100,4000,10,4,'Canadian_CSI-25KTL-GI-FL',12,18,4,28.1,347,800,200,800,8,37500,37.9,25000,27500,304,460,47,62,3.0,0.8,1,98.3,- 25,60,58.2,700,530,356,1,3,100,4000,10,4,'Canadian_CSI-30KTL-GI-FL',13,18,4,28.1,417,800,200,800,8,45000,45.5,30000,33000,304,460,47,62,3.0,0.8,1,98.3,- 25,60,58.2,700,530,356,1,3,100,4000,10,4,'Canadian_CSI-40KTL-GI-FL',14,22,4,34.3,454,850,200,800,8,60000,60.8,40000,44000,304,460,47,62,3.0,0.8,1,98.4,- 25,60,61.0,700,530,356,1,3,100,4000,10,4,'Canadian_CSI-50KTL-GI',15,28.5,4,44.5,439,850,200,800,12,75000,76.0,50000,55000,304,460,47,62,3.0,0.8,1,98.4,- 25,60,63.0,700,530,356,1,3,100,4000,10,4,'Canadian_CSI-60KTL-GI-H',16,28.5,4,44.5,526,850,200,1000,12,90000,72.2,60000,66000,384,576,47,62,3.0,0.8,1,98.5,- 25,60,63.0,700,630,357,1,3,100,4000,10,4,'Canadian_CSI-125KLT-GI-E',17,150,1,300,860,1450,860,1450,20,187500,120,125000,125000,528,660,47,62,3.0,0.8,1,98.6,- 25,60,70.0,1176,713,315,1,3,100,4000,10,2])\n    #      type                      no  Imppt  NMPP   Icc  Vmpptm  VmpptM    mVn   MVn  NoDC    Pdc    Iac    Pac    Sac   mVac  Mvac   mf   Mf   thd   fpm  fpM    ef  minT  maxT  weig  heig  widt leng   icost Phase   hum    alt   mod  tier",
        "detail": "old.inverter_parameters_matheus",
        "documentation": {}
    },
    {
        "label": "#tier",
        "kind": 5,
        "importPath": "old.inverter_parameters_matheus",
        "description": "old.inverter_parameters_matheus",
        "peekOfCode": "#tier = IEC -60529; IEC-60000-3-2; IEC-61727; IEC-62109; IEEE-929;UL-1741;DIN-VDE-0126-1; EN-61000;\n    ####OS VALORES DOS EQUIPAMENTOS PODEM SER CONSULTADOS NO SITE DA NEOSOLAR,\n####ASSIM COMO O CAT�LOGO\n    #      type                      no  Imppt  NMPP   Icc  Vmpptm  VmpptM    mVn   MVn  NoDC    Pdc    Iac    Pac    Sac   mVac  Mvac   mf   Mf   thd   fpm  fpM      ef  minT  maxT  weig  heig  widt leng  icost  Phase   hum    alt   mod  tier\n    fronius = np.array(['Fronius_PRIMO_3.0.1',1,12,2,18,80,800,200,800,2,4500,13,3000,3000,180,270,45,65,5,0.85,1,97.6,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_PRIMO_3.5.1',2,12,2,18,80,800,200,800,2,5300,15.2,3500,3500,180,270,45,65,5,0.85,1,97.7,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_PRIMO_3.6.1',3,12,2,18,80,800,200,800,2,5500,16,3680,3680,180,270,45,65,5,0.85,1,97.7,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_PRIMO_4.0.1',4,12,2,18,80,800,200,800,2,6000,17.4,4000,4000,180,270,45,65,5,0.85,1,97.7,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_PRIMO_4.6.1',5,12,2,18,80,800,200,800,2,6900,20,4600,4600,180,270,45,65,5,0.85,1,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_PRIMO_5.0.1',6,12,2,18,80,800,240,800,2,7500,21.7,5000,5000,180,270,45,65,5,0.85,1,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_PRIMO_5.0.1AUS',7,18,2,27,80,800,240,800,2,7500,21.7,4600,5000,180,270,45,65,5,0.85,1,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_PRIMO_6.0.1',8,18,2,27,80,800,240,800,2,9000,26.1,6000,6000,180,270,45,65,5,0.85,1,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_PRIMO_8.2.1',9,18,2,27,80,800,270,800,2,12300,35.7,8200,8200,180,270,45,65,5,0.85,1,97.8,- 40,55,21.5,645,431,204,3.17,1,100,4000,10,4,'Fronius_SYMO_3.0-3-M',10,16,2,24,150,800,150,800,2,6000,4.3,3000,3000,150,280,45,65,3,0.85,1,96.5,- 25,60,19.9,645,431,204,3.17,3,100,3400,10,4,'Fronius_SYMO_12.5-3-M',11,27,2,40.5,200,800,320,800,3,18800,18,12500,12500,150,280,45,65,2,0,1,97.6,- 40,60,34.8,725,510,225,3.17,3,100,3400,10,4,'Fronius_SYMO_15.0-3-M',12,33,2,49.5,200,800,320,800,3,22500,21.7,15000,15000,150,280,45,65,1.5,0,1,97.8,- 40,60,43.4,725,510,225,3.17,3,100,3400,10,4,'Fronius_SYMO_17.5-3-M',13,33,2,49.5,200,800,370,800,3,26300,25.3,17500,17500,150,280,45,65,1.5,0,1,97.8,- 40,60,43.4,725,510,225,3.17,3,100,3400,10,4,'Fronius_SYMO_20.0-3-M',14,33,2,49.5,200,800,420,800,3,30000,28.9,20000,20000,150,280,45,65,1.3,0,1,97.9,- 40,60,43.4,725,510,225,3.17,3,100,3400,10,4,'Fronius_ECO_25.0-3-S',15,44.2,1,71.6,580,850,300,500,6,37800,37.9,25000,25000,150,275,45,65,2,0,1,98.0,- 25,60,35.7,725,510,225,3.17,3,100,2000,10,4,'Fronius_ECO_27.0-3-S',16,47.7,1,71.6,580,850,580,580,6,37800,40.9,27000,27000,150,275,45,65,2,0,1,98.0,- 25,60,35.7,725,510,225,3.17,3,100,2000,10,4,'Fronius_SYMO_ADVANCED_10.0-3-M',17,20.7,2,41.5,300,500,200,600,6,13000,27.7,9995,9995,208,240,45,66,1.5,0,1,96.5,- 25,60,41.7,724,511,226,3.17,3,100,3400,10,1])\n    #      type                      no  Imppt  NMPP   Icc  Vmpptm    Vmpp    mVn   MVn  NoDC    Pdc    Iac    Pac    Sac   mVac  Mvac   mf   Mf   thd  fpm  fpM    ef  minT  maxT  weig  heig  widt leng   icost Phase   hum    alt   mod  tier\n    canadian = np.array(['Canadian_CSI-3.0KTL1P-GI-FL',1,11,1,17.2,80,500,90,600,1,4000,13.6,3000,3300,160,285,47,62,1.5,0.8,1,96.8,- 25,60,8.8,373,310,160,1,1,100,4000,10,3,'Canadian_CSI-4KTL1P-GI-FL',2,11,2,17.2,90,520,120,600,1,5500,18.2,4000,4400,160,285,47,62,1.5,0.8,1,97.3,- 25,60,11.5,543,310,160,1,1,100,4000,10,3,'Canadian_CSI-5KTL1P-GI-FL',3,11,2,17.2,90,520,120,600,1,6800,22.7,5000,5000,160,285,47,62,1.5,0.8,1,97.3,- 25,60,11.5,543,310,160,1,1,100,4000,10,3,'Canadian_CSI-7KTL1P-GI-FL',4,10,3,15.6,100,500,120,500,3,8000,30.4,7000,7700,160,285,47,62,1.5,0.8,1,98.1,- 25,60,18.0,573,333,249,1,1,100,4000,10,3,'Canadian_CSI-8KTL1P-GI-FL',5,10,3,15.6,100,500,120,500,3,9200,34.8,8000,8800,160,285,47,62,1.5,0.8,1,98.1,- 25,60,18.0,573,333,249,1,1,100,4000,10,3,'Canadian_CSI-9KTL1P-GI-FL',6,10,3,15.6,100,500,120,500,3,10800,39.1,9000,9900,160,285,47,62,1.5,0.8,1,98.1,- 25,60,18.0,573,333,249,1,1,100,4000,10,3,'Canadian_CSI-15KTL-GI-LFL',7,20,2,28.1,200,800,350,1000,4,22500,39.4,15000,16500,180,270,47,62,3.0,0.8,1,96.5,- 25,60,58.2,700,530,356,1,3,100,4000,10,4,'Canadian_CSI-20KTL-GI-LFL',8,20,2,28.1,200,800,350,1000,4,30000,52.5,20000,20000,180,270,47,62,3.0,0.8,1,96.5,- 25,60,58.2,700,530,356,1,3,100,4000,10,4,'Canadian_CSI-25KTL-GI-L',9,28.5,2,44.5,200,850,200,1100,6,37500,65.6,25000,27500,180,270,47,62,3.0,0.8,1,96.5,- 25,60,63.0,700,630,357,1,3,100,4000,10,4,'Canadian_CSI-30KTL-GI-L',10,28.5,2,44.5,200,850,200,1100,6,45000,78.8,30000,30000,180,270,47,62,3.0,0.8,1,96.5,- 25,60,63.0,700,630,357,1,3,100,4000,10,4,'Canadian_CSI-20KTL-GI-FL',11,18,4,28.1,278,800,200,800,8,30000,30.3,20000,22000,304,460,47,62,3.0,0.8,1,98.3,- 25,60,58.2,700,530,356,1,3,100,4000,10,4,'Canadian_CSI-25KTL-GI-FL',12,18,4,28.1,347,800,200,800,8,37500,37.9,25000,27500,304,460,47,62,3.0,0.8,1,98.3,- 25,60,58.2,700,530,356,1,3,100,4000,10,4,'Canadian_CSI-30KTL-GI-FL',13,18,4,28.1,417,800,200,800,8,45000,45.5,30000,33000,304,460,47,62,3.0,0.8,1,98.3,- 25,60,58.2,700,530,356,1,3,100,4000,10,4,'Canadian_CSI-40KTL-GI-FL',14,22,4,34.3,454,850,200,800,8,60000,60.8,40000,44000,304,460,47,62,3.0,0.8,1,98.4,- 25,60,61.0,700,530,356,1,3,100,4000,10,4,'Canadian_CSI-50KTL-GI',15,28.5,4,44.5,439,850,200,800,12,75000,76.0,50000,55000,304,460,47,62,3.0,0.8,1,98.4,- 25,60,63.0,700,530,356,1,3,100,4000,10,4,'Canadian_CSI-60KTL-GI-H',16,28.5,4,44.5,526,850,200,1000,12,90000,72.2,60000,66000,384,576,47,62,3.0,0.8,1,98.5,- 25,60,63.0,700,630,357,1,3,100,4000,10,4,'Canadian_CSI-125KLT-GI-E',17,150,1,300,860,1450,860,1450,20,187500,120,125000,125000,528,660,47,62,3.0,0.8,1,98.6,- 25,60,70.0,1176,713,315,1,3,100,4000,10,2])\n    #      type                      no  Imppt  NMPP   Icc  Vmpptm  VmpptM    mVn   MVn  NoDC    Pdc    Iac    Pac    Sac   mVac  Mvac   mf   Mf   thd   fpm  fpM    ef  minT  maxT  weig  heig  widt leng   icost Phase   hum    alt   mod  tier\n    fimer_abb = np.array(['Fimer_UNO-DM-1.2-TL-PLUS-Q',1,10,1,12.5,100,530,120,580,1,1500,5.5,1200,1200,180,264,47,63,3.0,0.1,1,92.0,- 25,60,15.0,553,418,175,1,1,100,2000,10,4,'Fimer_UNO-DM-2.0-TL-PLUS-Q',2,10,1,12.5,210,530,150,580,1,2500,10,2000,2000,180,264,47,63,3.0,0.1,1,92.0,- 25,60,15.0,553,418,175,1,1,100,2000,10,4,'Fimer_UNO-DM-3.0-TL-PLUS-Q',3,10,1,12.5,320,530,150,580,1,3300,14.5,3000,3000,180,264,47,63,3.0,0.1,1,92.0,- 25,60,15.0,553,418,175,1,1,100,2000,10,4,'Fimer_UNO-DM-3.3-TL-PLUS-US-Q',4,10,2,25,170,530,120,600,4,4000,14.5,3300,3300,211,264,50,64,2.0,0.8,1,96.5,- 25,60,16.0,863,418,222,1,1,100,2000,10,4,'Fimer_UNO-DM-3.8-TL-PLUS-US-Q',5,16,2,25,140,530,120,600,4,6000,16,4200,4200,211,264,50,64,2.0,0.8,1,96.5,- 25,60,16.0,863,418,222,1,1,100,2000,10,4,'Fimer_UNO-DM-4.6-TL-PLUS-US-Q',6,16,2,25,150,530,120,600,4,6000,20,4600,4600,211,264,50,64,2.0,0.8,1,96.5,- 25,60,16.0,863,418,222,1,1,100,2000,10,4,'Fimer_UNO-DM-5.0-TL-PLUS-US-Q',7,15.2,2,25,170,480,120,600,4,7000,22,5000,5000,211,264,50,64,2.0,0.8,1,97.0,- 25,60,16.0,863,418,222,1,1,100,2000,10,4,'Fimer_UNO-DM-3.3-TL-PLUS-Q',8,10,2,12.5,170,530,120,580,2,3500,14.5,3300,3300,180,264,50,64,3.0,0.8,1,96.5,- 25,60,15.0,553,418,175,1,1,100,2000,10,4,'Fimer_UNO-DM-4.0-TL-PLUS-Q',9,16,2,20,130,530,120,580,2,4250,17.2,4000,4000,180,264,50,64,3.0,0.8,1,96.5,- 25,60,15.0,553,418,175,1,1,100,2000,10,4,'Fimer_UNO-DM-4.6-TL-PLUS-Q',10,16,2,20,150,530,120,580,2,4750,20,4600,4600,180,264,50,64,3.0,0.8,1,96.5,- 25,60,15.0,553,418,175,1,1,100,2000,10,4,'Fimer_UNO-DM-5.0-TL-PLUS-Q',11,15.2,2,22,170,480,120,580,2,5150,22,5000,5000,180,264,50,64,3.0,0.8,1,97.0,- 25,60,15.0,553,418,175,1,1,100,2000,10,4,'Fimer_UNO-DM-6.0-TL-PLUS-Q',12,15.5,2,25,200,480,200,580,2,7500,30,6000,6650,180,264,47,63,3.0,0.8,1,97.0,- 25,60,20.5,418,553,180,1,1,100,2000,10,3,'Fimer_UNO-DM-6.0-TL-PLUS-Q-US',13,15.5,2,24,200,480,200,580,4,8000,30,6000,6650,211,264,50,64,2.0,0.8,1,97.0,- 25,60,21.5,729,553,222,1,1,100,2000,10,2,'Fimer_PVI-10.0-TL-OUTD',14,17.0,2,22,300,750,200,850,4,13000,16.6,10000,11500,320,480,47,63,2.0,0.8,1,97.1,- 25,60,41.0,716,645,224,1,3,100,2000,10,4,'Fimer_PVI-12.5-TL-OUTD',15,18.0,2,22,360,750,200,850,4,16000,20,12500,13800,320,480,47,63,2.0,0.8,1,97.2,- 25,60,41.0,716,645,224,1,3,100,2000,10,4,'Fimer_PVS-100-TL',16,36,6,50,480,850,360,1000,24,105000,145,100000,100000,320,480,45,65,3.0,0,1,98.2,- 25,60,70.0,869,1086,419,1,3,100,2000,10,3,'Fimer_PVS-120-TL',17,36,6,50,570,850,360,1000,24,150000,145,150000,150000,384,576,45,65,3.0,0,1,98.6,- 25,60,70.0,869,1086,419,1,3,100,2000,10,3,'Fimer_PVS-166-TL_US',18,22,12,30,850,1350,600,1500,24,169000,134,166500,166500,680,960,45,65,3.0,0.75,1,98.4,- 25,60,153.0,867,1086,419,1,3,100,2000,10,2,'Fimer_PVS-175-TL_US',19,22,12,30,850,1350,600,1500,24,188000,134,185000,185000,680,960,45,65,3.0,0.8,1,98.4,- 25,60,153.0,867,1086,419,1,3,100,2000,10,2,'Fimer_PVS-175-TL',20,22,12,30,850,1350,600,1500,24,188000,134,185000,185000,552,960,45,65,3.0,0,1,98.4,- 25,60,153.0,867,1086,419,1,3,100,2000,10,2,'Fimer_PVS-50-TL',21,36,1,55,480,800,420,950,1,52000,80,50000,50000,320,480,47,63,3.0,0,1,98.0,- 25,60,68.0,750,1100,261,1,3,100,4000,10,4,'Fimer_PVS-60-TL',22,36,3,55,480,800,420,950,1,61800,80,60000,60000,384,571,47,63,3.0,0,1,98.0,- 25,60,68.0,750,1100,261,1,3,100,4000,10,4,'Fimer_TRIO-20.0-TL-OUTD',23,25,2,30,440,800,430,950,2,24000,33,22000,22000,320,480,47,63,3.0,0.8,1,98.0,- 25,60,70.0,1061,702,292,1,3,100,2000,10,4,'Fimer_TRIO-27.6-TL-OUTD',24,32,2,40,500,800,430,950,2,32000,45,30000,30670,320,480,47,63,3.0,0.8,1,98.0,- 25,60,70.0,1061,702,292,1,3,100,2000,10,4,'Fimer_TRIO-5.8-TL-OUTD',25,18.9,1,24,320,800,350,950,2,6050,10,5800,5800,320,480,47,63,2.0,0.8,1,97.4,- 25,60,25.0,641,429,220,1,3,100,2000,10,4,'Fimer_TRIO-7.5-TL-OUTD',26,15,2,20,320,800,350,950,4,9600,12.5,7500,7500,320,480,47,63,2.0,0.8,1,97.5,- 25,60,25.0,641,429,220,1,3,100,2000,10,4,'Fimer_TRIO-8.5-TL-OUTD',27,15,2,20,320,800,350,950,4,9600,14.5,8500,8500,320,480,47,63,2.0,0.8,1,97.5,- 25,60,25.0,641,429,220,1,3,100,2000,10,4,'Fimer_TRIO-TM-50.0-400',28,36,1,55,480,800,420,950,5,52000,77,50000,50000,320,480,47,63,3.0,0,1,98.0,- 25,60,95.0,725,1491,315,1,3,100,2000,10,4,'Fimer_TRIO-TM-60.0-480',29,36,1,55,570,800,420,950,5,61800,77,60000,60000,384,571,47,63,3.0,0,1,98.0,- 25,60,95.0,725,1491,315,1,3,100,2000,10,4])\n    #      type                      no  Imppt  NMPP   Icc  Vmpptm  VmpptM    mVn   MVn  NoDC    Pdc    Iac    Pac    Sac   mVac  Mvac   mf   Mf   thd   fpm  fpM    ef  minT  maxT  weig  heig  widt leng   icost Phase   hum    alt   mod  tier",
        "detail": "old.inverter_parameters_matheus",
        "documentation": {}
    },
    {
        "label": "irradiation",
        "kind": 2,
        "importPath": "old.irradiation",
        "description": "old.irradiation",
        "peekOfCode": "def irradiation(lat = None,lon = None,alt = None,x_atemp = None,FS = None,proj = None,stil = None,sazi = None): \n    # Data obtained from http://www.cresesb.cepel.br/index.php?section=sundata&#sundata\n#http://labren.ccst.inpe.br/atlas_2017-en.html#mod\n    incl,ori = inclination(lat,lon,alt,x_atemp,stil,sazi)\n    # if proj==1\n# irrad = xlsread('brazil_solar_tilted_10km.xlsx');\n# elseif proj==2\n# irrad = xlsread('brazil_solar_direct_10km.xlsx');\n# elseif proj==3\n# irrad = xlsread('brazil_solar_diffuse_10km.xlsx');",
        "detail": "old.irradiation",
        "documentation": {}
    },
    {
        "label": "light_outlet_demand",
        "kind": 2,
        "importPath": "old.light_outlet_demand",
        "description": "old.light_outlet_demand",
        "peekOfCode": "def light_outlet_demand(mod1 = None,area = None,dd1 = None): \n    # Auditorios e Igrejas\n    if ((mod1 == 1) or (mod1 == 6) or (mod1 == 9)):\n        cm = 0.015\n        fd = 0.8\n        a1 = area * cm\n        if a1 > dd1:\n            d1 = a1\n        else:\n            d1 = fd * dd1",
        "detail": "old.light_outlet_demand",
        "documentation": {}
    },
    {
        "label": "module_temperature",
        "kind": 2,
        "importPath": "old.module_temperature",
        "description": "old.module_temperature",
        "peekOfCode": "def module_temperature(wind_speed = None,x_atemp = None,sunN = None,E = None,max_atemp = None,min_atemp = None): \n    #Calculation of the polycrystalline PV module\n#temperature using a simple method of energy balance\n#M. Mattei, G. Notton*, C. Cristofari, M. Muselli, P. Poggi\n    Tr = 25\n    E1 = 1200\n    nr = sunN(:,16) / 100\n    beta = np.abs(sunN(:,8) / 100)\n    upv = 17.1 + np.multiply(5.7,wind_speed)\n    upv_max = 17.1 + np.multiply(np.multiply(5.7,wind_speed),2)",
        "detail": "old.module_temperature",
        "documentation": {}
    },
    {
        "label": "month_hour",
        "kind": 2,
        "importPath": "old.month_hour",
        "description": "old.month_hour",
        "peekOfCode": "def month_hour(y = None): \n    #    jan fev mar apr mai jun jul ago set out nov dez\n    mon = np.array([31,28,31,30,31,30,31,31,30,31,30,31])\n    ml,mc = mon.shape\n    for i in np.arange(1,mc+1).reshape(-1):\n        h[1,i] = np.multiply(mon(i),y(1,i))\n    return h",
        "detail": "old.month_hour",
        "documentation": {}
    },
    {
        "label": "Nitt",
        "kind": 5,
        "importPath": "old.Nffuy",
        "description": "old.Nffuy",
        "peekOfCode": "Nitt = 1\nNttt = 34\nNoDC = 2\nNmpp = 2\nNS = np.multiply(np.multiply(Nitt,Nmpp),NoDC)\nNpvi = Nttt / Nitt\nNf = Nttt / NS\nND = np.zeros((6,NS))\nk = 1\nNpvi1 = 1",
        "detail": "old.Nffuy",
        "documentation": {}
    },
    {
        "label": "Nttt",
        "kind": 5,
        "importPath": "old.Nffuy",
        "description": "old.Nffuy",
        "peekOfCode": "Nttt = 34\nNoDC = 2\nNmpp = 2\nNS = np.multiply(np.multiply(Nitt,Nmpp),NoDC)\nNpvi = Nttt / Nitt\nNf = Nttt / NS\nND = np.zeros((6,NS))\nk = 1\nNpvi1 = 1\nNfa = 1",
        "detail": "old.Nffuy",
        "documentation": {}
    },
    {
        "label": "NoDC",
        "kind": 5,
        "importPath": "old.Nffuy",
        "description": "old.Nffuy",
        "peekOfCode": "NoDC = 2\nNmpp = 2\nNS = np.multiply(np.multiply(Nitt,Nmpp),NoDC)\nNpvi = Nttt / Nitt\nNf = Nttt / NS\nND = np.zeros((6,NS))\nk = 1\nNpvi1 = 1\nNfa = 1\nNfb = 1",
        "detail": "old.Nffuy",
        "documentation": {}
    },
    {
        "label": "Nmpp",
        "kind": 5,
        "importPath": "old.Nffuy",
        "description": "old.Nffuy",
        "peekOfCode": "Nmpp = 2\nNS = np.multiply(np.multiply(Nitt,Nmpp),NoDC)\nNpvi = Nttt / Nitt\nNf = Nttt / NS\nND = np.zeros((6,NS))\nk = 1\nNpvi1 = 1\nNfa = 1\nNfb = 1\nNfd = 1",
        "detail": "old.Nffuy",
        "documentation": {}
    },
    {
        "label": "NS",
        "kind": 5,
        "importPath": "old.Nffuy",
        "description": "old.Nffuy",
        "peekOfCode": "NS = np.multiply(np.multiply(Nitt,Nmpp),NoDC)\nNpvi = Nttt / Nitt\nNf = Nttt / NS\nND = np.zeros((6,NS))\nk = 1\nNpvi1 = 1\nNfa = 1\nNfb = 1\nNfd = 1\nNfg = 1",
        "detail": "old.Nffuy",
        "documentation": {}
    },
    {
        "label": "Npvi",
        "kind": 5,
        "importPath": "old.Nffuy",
        "description": "old.Nffuy",
        "peekOfCode": "Npvi = Nttt / Nitt\nNf = Nttt / NS\nND = np.zeros((6,NS))\nk = 1\nNpvi1 = 1\nNfa = 1\nNfb = 1\nNfd = 1\nNfg = 1\na = 1",
        "detail": "old.Nffuy",
        "documentation": {}
    },
    {
        "label": "Nf",
        "kind": 5,
        "importPath": "old.Nffuy",
        "description": "old.Nffuy",
        "peekOfCode": "Nf = Nttt / NS\nND = np.zeros((6,NS))\nk = 1\nNpvi1 = 1\nNfa = 1\nNfb = 1\nNfd = 1\nNfg = 1\na = 1\nfor k in np.arange(1,Nitt+1).reshape(-1):",
        "detail": "old.Nffuy",
        "documentation": {}
    },
    {
        "label": "ND",
        "kind": 5,
        "importPath": "old.Nffuy",
        "description": "old.Nffuy",
        "peekOfCode": "ND = np.zeros((6,NS))\nk = 1\nNpvi1 = 1\nNfa = 1\nNfb = 1\nNfd = 1\nNfg = 1\na = 1\nfor k in np.arange(1,Nitt+1).reshape(-1):\n    if int(np.floor(Nf)) == np.ceil(Nf):",
        "detail": "old.Nffuy",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "old.Nffuy",
        "description": "old.Nffuy",
        "peekOfCode": "k = 1\nNpvi1 = 1\nNfa = 1\nNfb = 1\nNfd = 1\nNfg = 1\na = 1\nfor k in np.arange(1,Nitt+1).reshape(-1):\n    if int(np.floor(Nf)) == np.ceil(Nf):\n        ND[1,np.arange[1,[Nitt * [Nmpp * NoDC]]+1]] = Nf",
        "detail": "old.Nffuy",
        "documentation": {}
    },
    {
        "label": "Npvi1",
        "kind": 5,
        "importPath": "old.Nffuy",
        "description": "old.Nffuy",
        "peekOfCode": "Npvi1 = 1\nNfa = 1\nNfb = 1\nNfd = 1\nNfg = 1\na = 1\nfor k in np.arange(1,Nitt+1).reshape(-1):\n    if int(np.floor(Nf)) == np.ceil(Nf):\n        ND[1,np.arange[1,[Nitt * [Nmpp * NoDC]]+1]] = Nf\n    if int(np.floor(Npvi)) == np.ceil(Npvi):",
        "detail": "old.Nffuy",
        "documentation": {}
    },
    {
        "label": "Nfa",
        "kind": 5,
        "importPath": "old.Nffuy",
        "description": "old.Nffuy",
        "peekOfCode": "Nfa = 1\nNfb = 1\nNfd = 1\nNfg = 1\na = 1\nfor k in np.arange(1,Nitt+1).reshape(-1):\n    if int(np.floor(Nf)) == np.ceil(Nf):\n        ND[1,np.arange[1,[Nitt * [Nmpp * NoDC]]+1]] = Nf\n    if int(np.floor(Npvi)) == np.ceil(Npvi):\n        a = (k * Nmpp * NoDC) - ((Nmpp * NoDC) - 1)",
        "detail": "old.Nffuy",
        "documentation": {}
    },
    {
        "label": "Nfb",
        "kind": 5,
        "importPath": "old.Nffuy",
        "description": "old.Nffuy",
        "peekOfCode": "Nfb = 1\nNfd = 1\nNfg = 1\na = 1\nfor k in np.arange(1,Nitt+1).reshape(-1):\n    if int(np.floor(Nf)) == np.ceil(Nf):\n        ND[1,np.arange[1,[Nitt * [Nmpp * NoDC]]+1]] = Nf\n    if int(np.floor(Npvi)) == np.ceil(Npvi):\n        a = (k * Nmpp * NoDC) - ((Nmpp * NoDC) - 1)\n        ND[6,a] = Npvi",
        "detail": "old.Nffuy",
        "documentation": {}
    },
    {
        "label": "Nfd",
        "kind": 5,
        "importPath": "old.Nffuy",
        "description": "old.Nffuy",
        "peekOfCode": "Nfd = 1\nNfg = 1\na = 1\nfor k in np.arange(1,Nitt+1).reshape(-1):\n    if int(np.floor(Nf)) == np.ceil(Nf):\n        ND[1,np.arange[1,[Nitt * [Nmpp * NoDC]]+1]] = Nf\n    if int(np.floor(Npvi)) == np.ceil(Npvi):\n        a = (k * Nmpp * NoDC) - ((Nmpp * NoDC) - 1)\n        ND[6,a] = Npvi\n    Nffy = np.ceil(Nttt / (NS - 1))",
        "detail": "old.Nffuy",
        "documentation": {}
    },
    {
        "label": "Nfg",
        "kind": 5,
        "importPath": "old.Nffuy",
        "description": "old.Nffuy",
        "peekOfCode": "Nfg = 1\na = 1\nfor k in np.arange(1,Nitt+1).reshape(-1):\n    if int(np.floor(Nf)) == np.ceil(Nf):\n        ND[1,np.arange[1,[Nitt * [Nmpp * NoDC]]+1]] = Nf\n    if int(np.floor(Npvi)) == np.ceil(Npvi):\n        a = (k * Nmpp * NoDC) - ((Nmpp * NoDC) - 1)\n        ND[6,a] = Npvi\n    Nffy = np.ceil(Nttt / (NS - 1))\n    if Nffy < (Nttt / (np.multiply(Nitt,Nmpp))):",
        "detail": "old.Nffuy",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "old.Nffuy",
        "description": "old.Nffuy",
        "peekOfCode": "a = 1\nfor k in np.arange(1,Nitt+1).reshape(-1):\n    if int(np.floor(Nf)) == np.ceil(Nf):\n        ND[1,np.arange[1,[Nitt * [Nmpp * NoDC]]+1]] = Nf\n    if int(np.floor(Npvi)) == np.ceil(Npvi):\n        a = (k * Nmpp * NoDC) - ((Nmpp * NoDC) - 1)\n        ND[6,a] = Npvi\n    Nffy = np.ceil(Nttt / (NS - 1))\n    if Nffy < (Nttt / (np.multiply(Nitt,Nmpp))):\n        Nfe = Nffy",
        "detail": "old.Nffuy",
        "documentation": {}
    },
    {
        "label": "Nitt",
        "kind": 5,
        "importPath": "old.NFFY",
        "description": "old.NFFY",
        "peekOfCode": "Nitt = 1\nNttt = 34\nNoDC = 2\nNmpp = 2\nNS = np.multiply(np.multiply(Nitt,Nmpp),NoDC)\nNSS = np.multiply(Nmpp,NoDC)\nNpvi = Nttt / Nitt\nNf = Nttt / NS\nND = np.zeros((6,NS))\n####################### CASO 1, 2 ########################################",
        "detail": "old.NFFY",
        "documentation": {}
    },
    {
        "label": "Nttt",
        "kind": 5,
        "importPath": "old.NFFY",
        "description": "old.NFFY",
        "peekOfCode": "Nttt = 34\nNoDC = 2\nNmpp = 2\nNS = np.multiply(np.multiply(Nitt,Nmpp),NoDC)\nNSS = np.multiply(Nmpp,NoDC)\nNpvi = Nttt / Nitt\nNf = Nttt / NS\nND = np.zeros((6,NS))\n####################### CASO 1, 2 ########################################\na = 1",
        "detail": "old.NFFY",
        "documentation": {}
    },
    {
        "label": "NoDC",
        "kind": 5,
        "importPath": "old.NFFY",
        "description": "old.NFFY",
        "peekOfCode": "NoDC = 2\nNmpp = 2\nNS = np.multiply(np.multiply(Nitt,Nmpp),NoDC)\nNSS = np.multiply(Nmpp,NoDC)\nNpvi = Nttt / Nitt\nNf = Nttt / NS\nND = np.zeros((6,NS))\n####################### CASO 1, 2 ########################################\na = 1\nb = 1",
        "detail": "old.NFFY",
        "documentation": {}
    },
    {
        "label": "Nmpp",
        "kind": 5,
        "importPath": "old.NFFY",
        "description": "old.NFFY",
        "peekOfCode": "Nmpp = 2\nNS = np.multiply(np.multiply(Nitt,Nmpp),NoDC)\nNSS = np.multiply(Nmpp,NoDC)\nNpvi = Nttt / Nitt\nNf = Nttt / NS\nND = np.zeros((6,NS))\n####################### CASO 1, 2 ########################################\na = 1\nb = 1\nc = 1",
        "detail": "old.NFFY",
        "documentation": {}
    },
    {
        "label": "NS",
        "kind": 5,
        "importPath": "old.NFFY",
        "description": "old.NFFY",
        "peekOfCode": "NS = np.multiply(np.multiply(Nitt,Nmpp),NoDC)\nNSS = np.multiply(Nmpp,NoDC)\nNpvi = Nttt / Nitt\nNf = Nttt / NS\nND = np.zeros((6,NS))\n####################### CASO 1, 2 ########################################\na = 1\nb = 1\nc = 1\nd = NoDC + 1",
        "detail": "old.NFFY",
        "documentation": {}
    },
    {
        "label": "NSS",
        "kind": 5,
        "importPath": "old.NFFY",
        "description": "old.NFFY",
        "peekOfCode": "NSS = np.multiply(Nmpp,NoDC)\nNpvi = Nttt / Nitt\nNf = Nttt / NS\nND = np.zeros((6,NS))\n####################### CASO 1, 2 ########################################\na = 1\nb = 1\nc = 1\nd = NoDC + 1\ne = 1",
        "detail": "old.NFFY",
        "documentation": {}
    },
    {
        "label": "Npvi",
        "kind": 5,
        "importPath": "old.NFFY",
        "description": "old.NFFY",
        "peekOfCode": "Npvi = Nttt / Nitt\nNf = Nttt / NS\nND = np.zeros((6,NS))\n####################### CASO 1, 2 ########################################\na = 1\nb = 1\nc = 1\nd = NoDC + 1\ne = 1\nf = NoDC",
        "detail": "old.NFFY",
        "documentation": {}
    },
    {
        "label": "Nf",
        "kind": 5,
        "importPath": "old.NFFY",
        "description": "old.NFFY",
        "peekOfCode": "Nf = Nttt / NS\nND = np.zeros((6,NS))\n####################### CASO 1, 2 ########################################\na = 1\nb = 1\nc = 1\nd = NoDC + 1\ne = 1\nf = NoDC\ng = NoDC + 1",
        "detail": "old.NFFY",
        "documentation": {}
    },
    {
        "label": "ND",
        "kind": 5,
        "importPath": "old.NFFY",
        "description": "old.NFFY",
        "peekOfCode": "ND = np.zeros((6,NS))\n####################### CASO 1, 2 ########################################\na = 1\nb = 1\nc = 1\nd = NoDC + 1\ne = 1\nf = NoDC\ng = NoDC + 1\nh = NoDC + Nmpp",
        "detail": "old.NFFY",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "old.NFFY",
        "description": "old.NFFY",
        "peekOfCode": "a = 1\nb = 1\nc = 1\nd = NoDC + 1\ne = 1\nf = NoDC\ng = NoDC + 1\nh = NoDC + Nmpp\nm = 1\nn = NoDC",
        "detail": "old.NFFY",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "old.NFFY",
        "description": "old.NFFY",
        "peekOfCode": "b = 1\nc = 1\nd = NoDC + 1\ne = 1\nf = NoDC\ng = NoDC + 1\nh = NoDC + Nmpp\nm = 1\nn = NoDC\no = NoDC + 1",
        "detail": "old.NFFY",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "old.NFFY",
        "description": "old.NFFY",
        "peekOfCode": "c = 1\nd = NoDC + 1\ne = 1\nf = NoDC\ng = NoDC + 1\nh = NoDC + Nmpp\nm = 1\nn = NoDC\no = NoDC + 1\nfor k in np.arange(1,Nitt+1).reshape(-1):",
        "detail": "old.NFFY",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "old.NFFY",
        "description": "old.NFFY",
        "peekOfCode": "d = NoDC + 1\ne = 1\nf = NoDC\ng = NoDC + 1\nh = NoDC + Nmpp\nm = 1\nn = NoDC\no = NoDC + 1\nfor k in np.arange(1,Nitt+1).reshape(-1):\n    if int(np.floor(Nf)) == np.ceil(Nf):",
        "detail": "old.NFFY",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "old.NFFY",
        "description": "old.NFFY",
        "peekOfCode": "e = 1\nf = NoDC\ng = NoDC + 1\nh = NoDC + Nmpp\nm = 1\nn = NoDC\no = NoDC + 1\nfor k in np.arange(1,Nitt+1).reshape(-1):\n    if int(np.floor(Nf)) == np.ceil(Nf):\n        ND[1,np.arange[c,[k * Nmpp * NoDC]+1]] = Nf",
        "detail": "old.NFFY",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "old.NFFY",
        "description": "old.NFFY",
        "peekOfCode": "f = NoDC\ng = NoDC + 1\nh = NoDC + Nmpp\nm = 1\nn = NoDC\no = NoDC + 1\nfor k in np.arange(1,Nitt+1).reshape(-1):\n    if int(np.floor(Nf)) == np.ceil(Nf):\n        ND[1,np.arange[c,[k * Nmpp * NoDC]+1]] = Nf\n        c = c + (Nmpp * NoDC)",
        "detail": "old.NFFY",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "old.NFFY",
        "description": "old.NFFY",
        "peekOfCode": "g = NoDC + 1\nh = NoDC + Nmpp\nm = 1\nn = NoDC\no = NoDC + 1\nfor k in np.arange(1,Nitt+1).reshape(-1):\n    if int(np.floor(Nf)) == np.ceil(Nf):\n        ND[1,np.arange[c,[k * Nmpp * NoDC]+1]] = Nf\n        c = c + (Nmpp * NoDC)\n###########################################################################",
        "detail": "old.NFFY",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "old.NFFY",
        "description": "old.NFFY",
        "peekOfCode": "h = NoDC + Nmpp\nm = 1\nn = NoDC\no = NoDC + 1\nfor k in np.arange(1,Nitt+1).reshape(-1):\n    if int(np.floor(Nf)) == np.ceil(Nf):\n        ND[1,np.arange[c,[k * Nmpp * NoDC]+1]] = Nf\n        c = c + (Nmpp * NoDC)\n###########################################################################\n#################### CASO 3 ###############################################",
        "detail": "old.NFFY",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "old.NFFY",
        "description": "old.NFFY",
        "peekOfCode": "m = 1\nn = NoDC\no = NoDC + 1\nfor k in np.arange(1,Nitt+1).reshape(-1):\n    if int(np.floor(Nf)) == np.ceil(Nf):\n        ND[1,np.arange[c,[k * Nmpp * NoDC]+1]] = Nf\n        c = c + (Nmpp * NoDC)\n###########################################################################\n#################### CASO 3 ###############################################\nif (Nitt * Nmpp) < Nttt:",
        "detail": "old.NFFY",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "old.NFFY",
        "description": "old.NFFY",
        "peekOfCode": "n = NoDC\no = NoDC + 1\nfor k in np.arange(1,Nitt+1).reshape(-1):\n    if int(np.floor(Nf)) == np.ceil(Nf):\n        ND[1,np.arange[c,[k * Nmpp * NoDC]+1]] = Nf\n        c = c + (Nmpp * NoDC)\n###########################################################################\n#################### CASO 3 ###############################################\nif (Nitt * Nmpp) < Nttt:\n    if ((Nmpp > 1) and (NoDC == 1)):",
        "detail": "old.NFFY",
        "documentation": {}
    },
    {
        "label": "o",
        "kind": 5,
        "importPath": "old.NFFY",
        "description": "old.NFFY",
        "peekOfCode": "o = NoDC + 1\nfor k in np.arange(1,Nitt+1).reshape(-1):\n    if int(np.floor(Nf)) == np.ceil(Nf):\n        ND[1,np.arange[c,[k * Nmpp * NoDC]+1]] = Nf\n        c = c + (Nmpp * NoDC)\n###########################################################################\n#################### CASO 3 ###############################################\nif (Nitt * Nmpp) < Nttt:\n    if ((Nmpp > 1) and (NoDC == 1)):\n        Nffy = Nttt / (Nitt * Nmpp)",
        "detail": "old.NFFY",
        "documentation": {}
    },
    {
        "label": "ND",
        "kind": 5,
        "importPath": "old.NFFY",
        "description": "old.NFFY",
        "peekOfCode": "ND = ND(not np.all(ND == 0,2) ,:)\nNDA = ND\nNDA[NDA == 0] = nan\nNDmim = np.amin(NDA,[],2)\nNDmax = np.transpose(np.amax(np.transpose(ND)))\nNff = ND(1,:)\nA = np.random.rand(1,4)\nx = cell2mat(Nff)\ny = mat2cell(Nff)\nA[1,3] = 'Nff'",
        "detail": "old.NFFY",
        "documentation": {}
    },
    {
        "label": "NDA",
        "kind": 5,
        "importPath": "old.NFFY",
        "description": "old.NFFY",
        "peekOfCode": "NDA = ND\nNDA[NDA == 0] = nan\nNDmim = np.amin(NDA,[],2)\nNDmax = np.transpose(np.amax(np.transpose(ND)))\nNff = ND(1,:)\nA = np.random.rand(1,4)\nx = cell2mat(Nff)\ny = mat2cell(Nff)\nA[1,3] = 'Nff'",
        "detail": "old.NFFY",
        "documentation": {}
    },
    {
        "label": "NDmim",
        "kind": 5,
        "importPath": "old.NFFY",
        "description": "old.NFFY",
        "peekOfCode": "NDmim = np.amin(NDA,[],2)\nNDmax = np.transpose(np.amax(np.transpose(ND)))\nNff = ND(1,:)\nA = np.random.rand(1,4)\nx = cell2mat(Nff)\ny = mat2cell(Nff)\nA[1,3] = 'Nff'",
        "detail": "old.NFFY",
        "documentation": {}
    },
    {
        "label": "NDmax",
        "kind": 5,
        "importPath": "old.NFFY",
        "description": "old.NFFY",
        "peekOfCode": "NDmax = np.transpose(np.amax(np.transpose(ND)))\nNff = ND(1,:)\nA = np.random.rand(1,4)\nx = cell2mat(Nff)\ny = mat2cell(Nff)\nA[1,3] = 'Nff'",
        "detail": "old.NFFY",
        "documentation": {}
    },
    {
        "label": "Nff",
        "kind": 5,
        "importPath": "old.NFFY",
        "description": "old.NFFY",
        "peekOfCode": "Nff = ND(1,:)\nA = np.random.rand(1,4)\nx = cell2mat(Nff)\ny = mat2cell(Nff)\nA[1,3] = 'Nff'",
        "detail": "old.NFFY",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "old.NFFY",
        "description": "old.NFFY",
        "peekOfCode": "A = np.random.rand(1,4)\nx = cell2mat(Nff)\ny = mat2cell(Nff)\nA[1,3] = 'Nff'",
        "detail": "old.NFFY",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "old.NFFY",
        "description": "old.NFFY",
        "peekOfCode": "x = cell2mat(Nff)\ny = mat2cell(Nff)\nA[1,3] = 'Nff'",
        "detail": "old.NFFY",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "old.NFFY",
        "description": "old.NFFY",
        "peekOfCode": "y = mat2cell(Nff)\nA[1,3] = 'Nff'",
        "detail": "old.NFFY",
        "documentation": {}
    },
    {
        "label": "A[1,3]",
        "kind": 5,
        "importPath": "old.NFFY",
        "description": "old.NFFY",
        "peekOfCode": "A[1,3] = 'Nff'",
        "detail": "old.NFFY",
        "documentation": {}
    },
    {
        "label": "Nstrings",
        "kind": 2,
        "importPath": "old.Nstrings",
        "description": "old.Nstrings",
        "peekOfCode": "def Nstrings(Nitt = None,Nttt = None,NoDC = None,Nmpp = None,VmpptM = None,Vmpptm = None,voc = None,vmp = None): \n    # clc\n# clear all\n# Nitt=3; Nttt=71; NoDC=14; Nmpp=1; vmp=31.79; voc=38.38; VmpptM=850; Vmpptm=570;\n    ###########################################################################\n#                                                                         #\n# CODE USED TO SELECT AND SUPPLY SEVERAL OPTIONS OF STRINGS AVAILABLE FOR #\n#EACH COMBINATION OF SOLAR MODULE AND INVERTERS                           #\n#                                                                         #\n# PREPARED BY: GUSTAVO KAEFER DILL - MARCH 2020                           #",
        "detail": "old.Nstrings",
        "documentation": {}
    },
    {
        "label": "optm2t",
        "kind": 2,
        "importPath": "old.optm2t",
        "description": "old.optm2t",
        "peekOfCode": "def optm2t(ptt = None,Nt = None,Ct = None,pit = None,Nit = None,Cit = None,froN = None,sunN = None,Npit = None,Nft = None,Npt1 = None,tt = None,NS = None): \n    nl,cs = sunN.shape\n    ll,cc = froN.shape\n    if ((len(ptt)==0 == 1) or (len(pit)==0 == 1)):\n        Nt = 0\n        Nit = 0\n        Npit = 0\n        Nft = 0\n        Npt1 = 0\n        tt = 0",
        "detail": "old.optm2t",
        "documentation": {}
    },
    {
        "label": "optm2ta",
        "kind": 2,
        "importPath": "old.optm2ta",
        "description": "old.optm2ta",
        "peekOfCode": "def optm2ta(ptt = None,Nt = None,Ct = None,pit = None,Nit = None,Cit = None,froN = None,sunN = None,Npit = None,Nft = None,Npt1 = None,tt = None,NS = None): \n    nl,cs = sunN.shape\n    ll,cc = froN.shape\n    if ((len(ptt)==0 == 1) or (len(pit)==0 == 1)):\n        Nt = 0\n        Nit = 0\n        Npit = 0\n        Nft = 0\n        Npt1 = 0\n        tt = 0",
        "detail": "old.optm2ta",
        "documentation": {}
    },
    {
        "label": "optm2tc",
        "kind": 2,
        "importPath": "old.optm2tc",
        "description": "old.optm2tc",
        "peekOfCode": "def optm2tc(ptt = None,Nt = None,Ct = None,pit = None,Nit = None,Cit = None,froN = None,sunN = None,Npit = None,Nft = None,Npt1 = None,tt = None,NS = None): \n    nl,cs = sunN.shape\n    ll,cc = froN.shape\n    if ((len(ptt)==0 == 1) or (len(pit)==0 == 1)):\n        Nt = 0\n        Nit = 0\n        Npit = 0\n        Nft = 0\n        Npt1 = 0\n        tt = 0",
        "detail": "old.optm2tc",
        "documentation": {}
    },
    {
        "label": "optm2ttopsis",
        "kind": 2,
        "importPath": "old.optm2ttopsis",
        "description": "old.optm2ttopsis",
        "peekOfCode": "def optm2ttopsis(ptt = None,Nt = None,Ct = None,pit = None,Nit = None,Cit = None,froN = None,sunN = None,Npit = None,Nft = None,Npt1 = None,tt = None,NS = None,pro = None): \n    nl,csun = sunN.shape\n    ll,cfro = froN.shape\n    if ((len(ptt)==0 == 1) or (len(pit)==0 == 1)):\n        Nt = 0\n        Nit = 0\n        Npit = 0\n        Nft = 0\n        Npt1 = 0\n        tt = 0",
        "detail": "old.optm2ttopsis",
        "documentation": {}
    },
    {
        "label": "optm4t",
        "kind": 2,
        "importPath": "old.optm4t",
        "description": "old.optm4t",
        "peekOfCode": "def optm4t(pt = None,Nt = None,Ct = None,pit = None,Nit = None,Cit = None,froN = None,sunN = None,Npit = None,Nft = None,Npt1 = None,tt = None,NS = None): \n    nl,cs = sunN.shape\n    ll,cc = froN.shape\n    if ((len(pt)==0 == 1) or (len(pit)==0 == 1)):\n        Nt = 0\n        Nit = 0\n        Npit = 0\n        Nft = 0\n        Npt1 = 0\n        tt = 0",
        "detail": "old.optm4t",
        "documentation": {}
    },
    {
        "label": "optm4ta",
        "kind": 2,
        "importPath": "old.optm4ta",
        "description": "old.optm4ta",
        "peekOfCode": "def optm4ta(pt = None,Nt = None,Ct = None,pit = None,Nit = None,Cit = None,froN = None,sunN = None,Npit = None,Nft = None,Npt1 = None,tt = None,NS = None): \n    nl,cs = sunN.shape\n    ll,cc = froN.shape\n    if ((len(pt)==0 == 1) or (len(pit)==0 == 1)):\n        Nt = 0\n        Nit = 0\n        Npit = 0\n        Nft = 0\n        Npt1 = 0\n        tt = 0",
        "detail": "old.optm4ta",
        "documentation": {}
    },
    {
        "label": "optm4tc",
        "kind": 2,
        "importPath": "old.optm4tc",
        "description": "old.optm4tc",
        "peekOfCode": "def optm4tc(pt = None,Nt = None,Ct = None,pit = None,Nit = None,Cit = None,froN = None,sunN = None,Npit = None,Nft = None,Npt1 = None,tt = None,NS = None): \n    nl,cs = sunN.shape\n    ll,cc = froN.shape\n    if ((len(pt)==0 == 1) or (len(pit)==0 == 1)):\n        Nt = 0\n        Nit = 0\n        Npit = 0\n        Nft = 0\n        Npt1 = 0\n        tt = 0",
        "detail": "old.optm4tc",
        "documentation": {}
    },
    {
        "label": "optm4ttopsis",
        "kind": 2,
        "importPath": "old.optm4ttopsis",
        "description": "old.optm4ttopsis",
        "peekOfCode": "def optm4ttopsis(pt = None,Nt = None,Ct = None,pit = None,Nit = None,Cit = None,froN = None,sunN = None,Npit = None,Nft = None,Npt1 = None,tt = None,NS = None,pro = None): \n    nl,cs = sunN.shape\n    ll,cc = froN.shape\n    if ((len(pt)==0 == 1) or (len(pit)==0 == 1)):\n        Nt = 0\n        Nit = 0\n        Npit = 0\n        Nft = 0\n        Npt1 = 0\n        tt = 0",
        "detail": "old.optm4ttopsis",
        "documentation": {}
    },
    {
        "label": "power24",
        "kind": 2,
        "importPath": "old.power24",
        "description": "old.power24",
        "peekOfCode": "def power24(demand = None,h = None,froN = None,Fc = None): \n    # Data obtained from http://www.cresesb.cepel.br/index.php?section=sundata&#sundata\n    #FC(:,1)=(froN(:,12)./froN(:,10)).*Fc # Evaluate considering the real efficiency\n    n_inv = froN(:,21)\n    m,n = n_inv.shape\n    for i in np.arange(1,m+1).reshape(-1):\n        D[i,:] = (demand) / (n_inv(i) / 100)\n        P_tilt[i,:] = D(i,:) / (np.multiply(h(1,:),Fc))\n        # if proj==1\n        M_tilt[i,1] = sum(P_tilt(i,:)) / 12",
        "detail": "old.power24",
        "documentation": {}
    },
    {
        "label": "protection_system",
        "kind": 2,
        "importPath": "old.protection_system",
        "description": "old.protection_system",
        "peekOfCode": "def protection_system(pvv = None,inv = None,nft = None,max_atemp = None,Nt = None,Nit = None,wind_speed = None,NSt = None): \n    if np.all(pvv < 0.01):\n        #disp('NO AVALIABLE INVERTERS FOR THE NUMBER OF SOLAR PAINEL NEEDED')\n        voc_string = nan\n        sec_string = nan\n        Is_min = nan\n        Is_max = nan\n        Vdio = nan\n        Idio = nan\n        voc_arranjo = nan",
        "detail": "old.protection_system",
        "documentation": {}
    },
    {
        "label": "pv2",
        "kind": 2,
        "importPath": "old.pv2",
        "description": "old.pv2",
        "peekOfCode": "def pv2(area = None,M_tilt = None,sunN1 = None,froN = None): \n    # Prepared by: Gustavo Dill - 25/07/2017\n    pt = []\n    pd = []\n    pdf = []\n    pg = []\n    p = []\n    p1 = []\n    p2 = []\n    p3 = []",
        "detail": "old.pv2",
        "documentation": {}
    },
    {
        "label": "pv4",
        "kind": 2,
        "importPath": "old.pv4",
        "description": "old.pv4",
        "peekOfCode": "def pv4(area = None,M_tilt = None,sunN = None,froN = None,pv_mo = None): \n    # Prepared by: Gustavo Dill - 25/07/2017\n    pt = []\n    pd = []\n    pdf = []\n    pg = []\n    p = []\n    p1 = []\n    p2 = []\n    p3 = []",
        "detail": "old.pv4",
        "documentation": {}
    },
    {
        "label": "pvl_absoluteairmass",
        "kind": 2,
        "importPath": "old.pvl_absoluteairmass",
        "description": "old.pvl_absoluteairmass",
        "peekOfCode": "def pvl_absoluteairmass(AMrelative = None,pressure = None): \n    # PVL_ABSOLUTEAIRMASS Determine absolute (pressure corrected) airmass from relative airmass and pressure\n    # Syntax\n# AMa = pvl_absoluteairmass(AMrelative, pressure)\n    # Description\n    #   Gives the airmass for locations not at sea-level (i.e. not at standard\n#   pressure). The input argument \"AMrelative\" is the relative airmass. The\n#   input argument \"pressure\" is the pressure (in Pascals) at the location\n#   of interest and must be greater than 0. The calculation for\n#   absolute airmass is:",
        "detail": "old.pvl_absoluteairmass",
        "documentation": {}
    },
    {
        "label": "pvl_alt2pres",
        "kind": 2,
        "importPath": "old.pvl_alt2pres",
        "description": "old.pvl_alt2pres",
        "peekOfCode": "def pvl_alt2pres(altitude = None): \n    # PVL_ALT2PRES Determine site pressure from altitude\n    # Syntax\n#   Press = pvl_alt2pres(altitude)\n    # Description\n#   PVL_ALT2PRES determines the atmospheric pressure (in Pascals) of a\n#   site on Earth's surface given its altitude (in meters above sea level).\n#   Output \"Press\" is given in Pascals. Press is of the same size\n#   as altitude.\n    # Assumptions include:",
        "detail": "old.pvl_alt2pres",
        "documentation": {}
    },
    {
        "label": "pvl_clearsky_ineichen",
        "kind": 2,
        "importPath": "old.pvl_clearsky_ineichen",
        "description": "old.pvl_clearsky_ineichen",
        "peekOfCode": "def pvl_clearsky_ineichen(n = None,hora = None,lat = None,lon = None,alt = None,sunZen = None,AMa = None): \n    # PVL_CLEARSKY_INEICHEN Determine clear sky GHI, DNI, and DHI from Ineichen/Perez model\n    # Syntax\n#   [ClearSkyGHI, ClearSkyDNI, ClearSkyDHI]= pvl_clearsky_ineichen(Time, Location)\n#   [ClearSkyGHI, ClearSkyDNI, ClearSkyDHI]= pvl_clearsky_ineichen(Time, Location, LinkeTurbidityInput)\n    # Description\n#   Implements the Ineichen and Perez clear sky model for global horizontal\n#   irradiance (GHI), direct normal irradiance (DNI), and calculates\n#   the clear-sky diffuse horizontal (DHI) component as the difference\n#   between GHI and DNI*cos(zenith) as presented in [1, 2]. A report on clear",
        "detail": "old.pvl_clearsky_ineichen",
        "documentation": {}
    },
    {
        "label": "LinearlyScale",
        "kind": 2,
        "importPath": "old.pvl_clearsky_ineichen",
        "description": "old.pvl_clearsky_ineichen",
        "peekOfCode": "def LinearlyScale(inputmatrix = None,inputmin = None,inputmax = None,outputmin = None,outputmax = None): \n    # OutputMatrix = LinearlyScale(inputmatrix, inputmin, inputmax, outputmin, outputmax)\n# Linearly scales the inputmatrix. Maps all values from inputmin to\n# outputmin, and from inputmax to outputmax. Linear mapping from one point\n# to the other.\n    inputrange = inputmax - inputmin\n    outputrange = outputmax - outputmin\n    OutputMatrix = (inputmatrix - inputmin) * outputrange / inputrange + outputmin\n    return OutputMatrix\n    return ClearSkyGHI,ClearSkyDNI,ClearSkyDHI",
        "detail": "old.pvl_clearsky_ineichen",
        "documentation": {}
    },
    {
        "label": "#AMabsolute",
        "kind": 5,
        "importPath": "old.pvl_clearsky_ineichen",
        "description": "old.pvl_clearsky_ineichen",
        "peekOfCode": "#AMabsolute = pvl_absoluteairmass(pvl_relativeairmass(ApparentZenith, 'kastenyoung1989'), pvl_alt2pres(Location.altitude));\n            # Dan's note on the TL correction: By my reading of the publication on\n# pages 151-157, Ineichen and Perez introduce (among other things) three\n# things. 1) Beam model in eqn. 8, 2) new turbidity factor in eqn 9 and\n# appendix A, and 3) Global horizontal model in eqn. 11. They do NOT appear\n# to use the new turbidity factor (item 2 above) in either the beam or GHI\n# models. The phrasing of appendix A seems as if there are two separate\n# corrections, the first correction is used to correct the beam/GHI models,\n# and the second correction is used to correct the revised turibidity\n# factor. In my estimation, there is no need to correct the turbidity",
        "detail": "old.pvl_clearsky_ineichen",
        "documentation": {}
    },
    {
        "label": "pvl_clearsky_ineichen1",
        "kind": 2,
        "importPath": "old.pvl_clearsky_ineichen1",
        "description": "old.pvl_clearsky_ineichen1",
        "peekOfCode": "def pvl_clearsky_ineichen1(n = None,hora = None,lat = None,lon = None,alt = None,sunZen = None,AMa = None): \n    # PVL_CLEARSKY_INEICHEN Determine clear sky GHI, DNI, and DHI from Ineichen/Perez model\n    # Syntax\n#   [ClearSkyGHI, ClearSkyDNI, ClearSkyDHI]= pvl_clearsky_ineichen(Time, Location)\n#   [ClearSkyGHI, ClearSkyDNI, ClearSkyDHI]= pvl_clearsky_ineichen(Time, Location, LinkeTurbidityInput)\n    # Description\n#   Implements the Ineichen and Perez clear sky model for global horizontal\n#   irradiance (GHI), direct normal irradiance (DNI), and calculates\n#   the clear-sky diffuse horizontal (DHI) component as the difference\n#   between GHI and DNI*cos(zenith) as presented in [1, 2]. A report on clear",
        "detail": "old.pvl_clearsky_ineichen1",
        "documentation": {}
    },
    {
        "label": "LinearlyScale",
        "kind": 2,
        "importPath": "old.pvl_clearsky_ineichen1",
        "description": "old.pvl_clearsky_ineichen1",
        "peekOfCode": "def LinearlyScale(inputmatrix = None,inputmin = None,inputmax = None,outputmin = None,outputmax = None): \n    # OutputMatrix = LinearlyScale(inputmatrix, inputmin, inputmax, outputmin, outputmax)\n# Linearly scales the inputmatrix. Maps all values from inputmin to\n# outputmin, and from inputmax to outputmax. Linear mapping from one point\n# to the other.\n    inputrange = inputmax - inputmin\n    outputrange = outputmax - outputmin\n    OutputMatrix = (inputmatrix - inputmin) * outputrange / inputrange + outputmin\n    return OutputMatrix\n    return ClearSkyGHI,ClearSkyDNI,ClearSkyDHI",
        "detail": "old.pvl_clearsky_ineichen1",
        "documentation": {}
    },
    {
        "label": "#AMabsolute",
        "kind": 5,
        "importPath": "old.pvl_clearsky_ineichen1",
        "description": "old.pvl_clearsky_ineichen1",
        "peekOfCode": "#AMabsolute = pvl_absoluteairmass(pvl_relativeairmass(ApparentZenith, 'kastenyoung1989'), pvl_alt2pres(Location.altitude));\n    for i in np.arange(1,12+1).reshape(-1):\n        for j in np.arange(np.arange(1,len(hora(,,1))+1)):\n            Time.month = i\n            Time.day = n(i)\n            Time.hour = hora(j)\n            L1[i] = Lookup3D(LinkeTurbidity,LatitudeIndex,LongitudeIndex,Time.month)\n            TL[i] = double(L1(i)) / 20\n            # Determine day of year and extraterrestrial normal radiation for each time\n# instant in Time.",
        "detail": "old.pvl_clearsky_ineichen1",
        "documentation": {}
    },
    {
        "label": "lat",
        "kind": 5,
        "importPath": "old.pvl_ephemeris",
        "description": "old.pvl_ephemeris",
        "peekOfCode": "lat = - 22.9\nlon = - 43.1\n#Latitude = p.Results.Location.latitude(:);\nLatitude = lat\n# the inversion of longitude is due to the fact that this code was\n# originally written for the convention that positive longitude were for\n# locations west of the prime meridian. However, the correct convention (as\n# of 2009) is to use negative longitudes for locations west of the prime\n# meridian. Therefore, the user should input longitude values under the\n# correct convention (e.g. Albuquerque is at -106 longitude), but it needs",
        "detail": "old.pvl_ephemeris",
        "documentation": {}
    },
    {
        "label": "lon",
        "kind": 5,
        "importPath": "old.pvl_ephemeris",
        "description": "old.pvl_ephemeris",
        "peekOfCode": "lon = - 43.1\n#Latitude = p.Results.Location.latitude(:);\nLatitude = lat\n# the inversion of longitude is due to the fact that this code was\n# originally written for the convention that positive longitude were for\n# locations west of the prime meridian. However, the correct convention (as\n# of 2009) is to use negative longitudes for locations west of the prime\n# meridian. Therefore, the user should input longitude values under the\n# correct convention (e.g. Albuquerque is at -106 longitude), but it needs\n# to be inverted for use in the code.",
        "detail": "old.pvl_ephemeris",
        "documentation": {}
    },
    {
        "label": "#Latitude",
        "kind": 5,
        "importPath": "old.pvl_ephemeris",
        "description": "old.pvl_ephemeris",
        "peekOfCode": "#Latitude = p.Results.Location.latitude(:);\nLatitude = lat\n# the inversion of longitude is due to the fact that this code was\n# originally written for the convention that positive longitude were for\n# locations west of the prime meridian. However, the correct convention (as\n# of 2009) is to use negative longitudes for locations west of the prime\n# meridian. Therefore, the user should input longitude values under the\n# correct convention (e.g. Albuquerque is at -106 longitude), but it needs\n# to be inverted for use in the code.\nLongitude = - 1 * lon",
        "detail": "old.pvl_ephemeris",
        "documentation": {}
    },
    {
        "label": "Latitude",
        "kind": 5,
        "importPath": "old.pvl_ephemeris",
        "description": "old.pvl_ephemeris",
        "peekOfCode": "Latitude = lat\n# the inversion of longitude is due to the fact that this code was\n# originally written for the convention that positive longitude were for\n# locations west of the prime meridian. However, the correct convention (as\n# of 2009) is to use negative longitudes for locations west of the prime\n# meridian. Therefore, the user should input longitude values under the\n# correct convention (e.g. Albuquerque is at -106 longitude), but it needs\n# to be inverted for use in the code.\nLongitude = - 1 * lon\n#Solar time per month",
        "detail": "old.pvl_ephemeris",
        "documentation": {}
    },
    {
        "label": "Longitude",
        "kind": 5,
        "importPath": "old.pvl_ephemeris",
        "description": "old.pvl_ephemeris",
        "peekOfCode": "Longitude = - 1 * lon\n#Solar time per month\nTm,Tx,sunrise_min,sunset_min,hora = sol_por_dia(lon,lat)\nYear = 2019\nMonth = 1\nDay = 15\nHour = 0\nMinute = 0\nSecond = 0\n# the inversion of UTC offset is due to the fact that this code was",
        "detail": "old.pvl_ephemeris",
        "documentation": {}
    },
    {
        "label": "Tm,Tx,sunrise_min,sunset_min,hora",
        "kind": 5,
        "importPath": "old.pvl_ephemeris",
        "description": "old.pvl_ephemeris",
        "peekOfCode": "Tm,Tx,sunrise_min,sunset_min,hora = sol_por_dia(lon,lat)\nYear = 2019\nMonth = 1\nDay = 15\nHour = 0\nMinute = 0\nSecond = 0\n# the inversion of UTC offset is due to the fact that this code was\n# originally written for the convention that positive offset values were\n# positive for locations west of the prime merdian. However, the correct",
        "detail": "old.pvl_ephemeris",
        "documentation": {}
    },
    {
        "label": "Year",
        "kind": 5,
        "importPath": "old.pvl_ephemeris",
        "description": "old.pvl_ephemeris",
        "peekOfCode": "Year = 2019\nMonth = 1\nDay = 15\nHour = 0\nMinute = 0\nSecond = 0\n# the inversion of UTC offset is due to the fact that this code was\n# originally written for the convention that positive offset values were\n# positive for locations west of the prime merdian. However, the correct\n# convention (as of 2009) is to use negative offset codes for locaitons",
        "detail": "old.pvl_ephemeris",
        "documentation": {}
    },
    {
        "label": "Month",
        "kind": 5,
        "importPath": "old.pvl_ephemeris",
        "description": "old.pvl_ephemeris",
        "peekOfCode": "Month = 1\nDay = 15\nHour = 0\nMinute = 0\nSecond = 0\n# the inversion of UTC offset is due to the fact that this code was\n# originally written for the convention that positive offset values were\n# positive for locations west of the prime merdian. However, the correct\n# convention (as of 2009) is to use negative offset codes for locaitons\n# west of the prime merdian. Therefore, the user should input offset values",
        "detail": "old.pvl_ephemeris",
        "documentation": {}
    },
    {
        "label": "Day",
        "kind": 5,
        "importPath": "old.pvl_ephemeris",
        "description": "old.pvl_ephemeris",
        "peekOfCode": "Day = 15\nHour = 0\nMinute = 0\nSecond = 0\n# the inversion of UTC offset is due to the fact that this code was\n# originally written for the convention that positive offset values were\n# positive for locations west of the prime merdian. However, the correct\n# convention (as of 2009) is to use negative offset codes for locaitons\n# west of the prime merdian. Therefore, the user should input offset values\n# under the correct convention (e.g. EST = -5), but it needs to be inverted",
        "detail": "old.pvl_ephemeris",
        "documentation": {}
    },
    {
        "label": "Hour",
        "kind": 5,
        "importPath": "old.pvl_ephemeris",
        "description": "old.pvl_ephemeris",
        "peekOfCode": "Hour = 0\nMinute = 0\nSecond = 0\n# the inversion of UTC offset is due to the fact that this code was\n# originally written for the convention that positive offset values were\n# positive for locations west of the prime merdian. However, the correct\n# convention (as of 2009) is to use negative offset codes for locaitons\n# west of the prime merdian. Therefore, the user should input offset values\n# under the correct convention (e.g. EST = -5), but it needs to be inverted\n# for use in the following code.",
        "detail": "old.pvl_ephemeris",
        "documentation": {}
    },
    {
        "label": "Minute",
        "kind": 5,
        "importPath": "old.pvl_ephemeris",
        "description": "old.pvl_ephemeris",
        "peekOfCode": "Minute = 0\nSecond = 0\n# the inversion of UTC offset is due to the fact that this code was\n# originally written for the convention that positive offset values were\n# positive for locations west of the prime merdian. However, the correct\n# convention (as of 2009) is to use negative offset codes for locaitons\n# west of the prime merdian. Therefore, the user should input offset values\n# under the correct convention (e.g. EST = -5), but it needs to be inverted\n# for use in the following code.\nTZone = - 1 * (- 3)",
        "detail": "old.pvl_ephemeris",
        "documentation": {}
    },
    {
        "label": "Second",
        "kind": 5,
        "importPath": "old.pvl_ephemeris",
        "description": "old.pvl_ephemeris",
        "peekOfCode": "Second = 0\n# the inversion of UTC offset is due to the fact that this code was\n# originally written for the convention that positive offset values were\n# positive for locations west of the prime merdian. However, the correct\n# convention (as of 2009) is to use negative offset codes for locaitons\n# west of the prime merdian. Therefore, the user should input offset values\n# under the correct convention (e.g. EST = -5), but it needs to be inverted\n# for use in the following code.\nTZone = - 1 * (- 3)\npressure = 1013",
        "detail": "old.pvl_ephemeris",
        "documentation": {}
    },
    {
        "label": "TZone",
        "kind": 5,
        "importPath": "old.pvl_ephemeris",
        "description": "old.pvl_ephemeris",
        "peekOfCode": "TZone = - 1 * (- 3)\npressure = 1013\ntemperature = 23\ntemperature = temperature + 273.15\nDecHours = hora\nRadtoDeg = 180 / np.pi\nDegtoRad = np.pi / 180\nAbber = 20 / 3600\nLatR = Latitude * DegtoRad\nYr = Year - 1900",
        "detail": "old.pvl_ephemeris",
        "documentation": {}
    },
    {
        "label": "pressure",
        "kind": 5,
        "importPath": "old.pvl_ephemeris",
        "description": "old.pvl_ephemeris",
        "peekOfCode": "pressure = 1013\ntemperature = 23\ntemperature = temperature + 273.15\nDecHours = hora\nRadtoDeg = 180 / np.pi\nDegtoRad = np.pi / 180\nAbber = 20 / 3600\nLatR = Latitude * DegtoRad\nYr = Year - 1900\nYrBegin = 365 * Yr + int(np.floor((Yr - 1) / 4)) - 0.5",
        "detail": "old.pvl_ephemeris",
        "documentation": {}
    },
    {
        "label": "temperature",
        "kind": 5,
        "importPath": "old.pvl_ephemeris",
        "description": "old.pvl_ephemeris",
        "peekOfCode": "temperature = 23\ntemperature = temperature + 273.15\nDecHours = hora\nRadtoDeg = 180 / np.pi\nDegtoRad = np.pi / 180\nAbber = 20 / 3600\nLatR = Latitude * DegtoRad\nYr = Year - 1900\nYrBegin = 365 * Yr + int(np.floor((Yr - 1) / 4)) - 0.5\n# calculating day mean per month",
        "detail": "old.pvl_ephemeris",
        "documentation": {}
    },
    {
        "label": "temperature",
        "kind": 5,
        "importPath": "old.pvl_ephemeris",
        "description": "old.pvl_ephemeris",
        "peekOfCode": "temperature = temperature + 273.15\nDecHours = hora\nRadtoDeg = 180 / np.pi\nDegtoRad = np.pi / 180\nAbber = 20 / 3600\nLatR = Latitude * DegtoRad\nYr = Year - 1900\nYrBegin = 365 * Yr + int(np.floor((Yr - 1) / 4)) - 0.5\n# calculating day mean per month\nmon = np.array([31,28,31,30,31,30,31,31,30,31,30,31])",
        "detail": "old.pvl_ephemeris",
        "documentation": {}
    },
    {
        "label": "DecHours",
        "kind": 5,
        "importPath": "old.pvl_ephemeris",
        "description": "old.pvl_ephemeris",
        "peekOfCode": "DecHours = hora\nRadtoDeg = 180 / np.pi\nDegtoRad = np.pi / 180\nAbber = 20 / 3600\nLatR = Latitude * DegtoRad\nYr = Year - 1900\nYrBegin = 365 * Yr + int(np.floor((Yr - 1) / 4)) - 0.5\n# calculating day mean per month\nmon = np.array([31,28,31,30,31,30,31,31,30,31,30,31])\nsumM = 0",
        "detail": "old.pvl_ephemeris",
        "documentation": {}
    },
    {
        "label": "RadtoDeg",
        "kind": 5,
        "importPath": "old.pvl_ephemeris",
        "description": "old.pvl_ephemeris",
        "peekOfCode": "RadtoDeg = 180 / np.pi\nDegtoRad = np.pi / 180\nAbber = 20 / 3600\nLatR = Latitude * DegtoRad\nYr = Year - 1900\nYrBegin = 365 * Yr + int(np.floor((Yr - 1) / 4)) - 0.5\n# calculating day mean per month\nmon = np.array([31,28,31,30,31,30,31,31,30,31,30,31])\nsumM = 0\nfor i in np.arange(1,12+1).reshape(-1):",
        "detail": "old.pvl_ephemeris",
        "documentation": {}
    },
    {
        "label": "DegtoRad",
        "kind": 5,
        "importPath": "old.pvl_ephemeris",
        "description": "old.pvl_ephemeris",
        "peekOfCode": "DegtoRad = np.pi / 180\nAbber = 20 / 3600\nLatR = Latitude * DegtoRad\nYr = Year - 1900\nYrBegin = 365 * Yr + int(np.floor((Yr - 1) / 4)) - 0.5\n# calculating day mean per month\nmon = np.array([31,28,31,30,31,30,31,31,30,31,30,31])\nsumM = 0\nfor i in np.arange(1,12+1).reshape(-1):\n    n[i] = int(np.floor(mon(1,i) / 2)) + sumM",
        "detail": "old.pvl_ephemeris",
        "documentation": {}
    },
    {
        "label": "Abber",
        "kind": 5,
        "importPath": "old.pvl_ephemeris",
        "description": "old.pvl_ephemeris",
        "peekOfCode": "Abber = 20 / 3600\nLatR = Latitude * DegtoRad\nYr = Year - 1900\nYrBegin = 365 * Yr + int(np.floor((Yr - 1) / 4)) - 0.5\n# calculating day mean per month\nmon = np.array([31,28,31,30,31,30,31,31,30,31,30,31])\nsumM = 0\nfor i in np.arange(1,12+1).reshape(-1):\n    n[i] = int(np.floor(mon(1,i) / 2)) + sumM\n    sumM = sum(mon(np.arange(1,i+1)))",
        "detail": "old.pvl_ephemeris",
        "documentation": {}
    },
    {
        "label": "LatR",
        "kind": 5,
        "importPath": "old.pvl_ephemeris",
        "description": "old.pvl_ephemeris",
        "peekOfCode": "LatR = Latitude * DegtoRad\nYr = Year - 1900\nYrBegin = 365 * Yr + int(np.floor((Yr - 1) / 4)) - 0.5\n# calculating day mean per month\nmon = np.array([31,28,31,30,31,30,31,31,30,31,30,31])\nsumM = 0\nfor i in np.arange(1,12+1).reshape(-1):\n    n[i] = int(np.floor(mon(1,i) / 2)) + sumM\n    sumM = sum(mon(np.arange(1,i+1)))\n    DayOfYear[i] = n(i)",
        "detail": "old.pvl_ephemeris",
        "documentation": {}
    },
    {
        "label": "Yr",
        "kind": 5,
        "importPath": "old.pvl_ephemeris",
        "description": "old.pvl_ephemeris",
        "peekOfCode": "Yr = Year - 1900\nYrBegin = 365 * Yr + int(np.floor((Yr - 1) / 4)) - 0.5\n# calculating day mean per month\nmon = np.array([31,28,31,30,31,30,31,31,30,31,30,31])\nsumM = 0\nfor i in np.arange(1,12+1).reshape(-1):\n    n[i] = int(np.floor(mon(1,i) / 2)) + sumM\n    sumM = sum(mon(np.arange(1,i+1)))\n    DayOfYear[i] = n(i)\n    for j in np.arange(np.arange(1,len(DecHours(,,1))+1)):",
        "detail": "old.pvl_ephemeris",
        "documentation": {}
    },
    {
        "label": "YrBegin",
        "kind": 5,
        "importPath": "old.pvl_ephemeris",
        "description": "old.pvl_ephemeris",
        "peekOfCode": "YrBegin = 365 * Yr + int(np.floor((Yr - 1) / 4)) - 0.5\n# calculating day mean per month\nmon = np.array([31,28,31,30,31,30,31,31,30,31,30,31])\nsumM = 0\nfor i in np.arange(1,12+1).reshape(-1):\n    n[i] = int(np.floor(mon(1,i) / 2)) + sumM\n    sumM = sum(mon(np.arange(1,i+1)))\n    DayOfYear[i] = n(i)\n    for j in np.arange(np.arange(1,len(DecHours(,,1))+1)):\n        UnivDate[i] = DayOfYear(i) + int(np.floor((DecHours(j,i) + TZone) / 24))",
        "detail": "old.pvl_ephemeris",
        "documentation": {}
    },
    {
        "label": "mon",
        "kind": 5,
        "importPath": "old.pvl_ephemeris",
        "description": "old.pvl_ephemeris",
        "peekOfCode": "mon = np.array([31,28,31,30,31,30,31,31,30,31,30,31])\nsumM = 0\nfor i in np.arange(1,12+1).reshape(-1):\n    n[i] = int(np.floor(mon(1,i) / 2)) + sumM\n    sumM = sum(mon(np.arange(1,i+1)))\n    DayOfYear[i] = n(i)\n    for j in np.arange(np.arange(1,len(DecHours(,,1))+1)):\n        UnivDate[i] = DayOfYear(i) + int(np.floor((DecHours(j,i) + TZone) / 24))\n        UnivHr[j,i] = np.mod((DecHours(j,i) + TZone),24)\n        Ezero[i] = YrBegin + UnivDate(i)",
        "detail": "old.pvl_ephemeris",
        "documentation": {}
    },
    {
        "label": "sumM",
        "kind": 5,
        "importPath": "old.pvl_ephemeris",
        "description": "old.pvl_ephemeris",
        "peekOfCode": "sumM = 0\nfor i in np.arange(1,12+1).reshape(-1):\n    n[i] = int(np.floor(mon(1,i) / 2)) + sumM\n    sumM = sum(mon(np.arange(1,i+1)))\n    DayOfYear[i] = n(i)\n    for j in np.arange(np.arange(1,len(DecHours(,,1))+1)):\n        UnivDate[i] = DayOfYear(i) + int(np.floor((DecHours(j,i) + TZone) / 24))\n        UnivHr[j,i] = np.mod((DecHours(j,i) + TZone),24)\n        Ezero[i] = YrBegin + UnivDate(i)\n        T[i] = Ezero(i) / 36525",
        "detail": "old.pvl_ephemeris",
        "documentation": {}
    },
    {
        "label": "lat",
        "kind": 5,
        "importPath": "old.pvl_ephemeris1",
        "description": "old.pvl_ephemeris1",
        "peekOfCode": "lat = - 22.9\nlon = - 43.1\n#Latitude = p.Results.Location.latitude(:);\nLatitude = lat\n# the inversion of longitude is due to the fact that this code was\n# originally written for the convention that positive longitude were for\n# locations west of the prime meridian. However, the correct convention (as\n# of 2009) is to use negative longitudes for locations west of the prime\n# meridian. Therefore, the user should input longitude values under the\n# correct convention (e.g. Albuquerque is at -106 longitude), but it needs",
        "detail": "old.pvl_ephemeris1",
        "documentation": {}
    },
    {
        "label": "lon",
        "kind": 5,
        "importPath": "old.pvl_ephemeris1",
        "description": "old.pvl_ephemeris1",
        "peekOfCode": "lon = - 43.1\n#Latitude = p.Results.Location.latitude(:);\nLatitude = lat\n# the inversion of longitude is due to the fact that this code was\n# originally written for the convention that positive longitude were for\n# locations west of the prime meridian. However, the correct convention (as\n# of 2009) is to use negative longitudes for locations west of the prime\n# meridian. Therefore, the user should input longitude values under the\n# correct convention (e.g. Albuquerque is at -106 longitude), but it needs\n# to be inverted for use in the code.",
        "detail": "old.pvl_ephemeris1",
        "documentation": {}
    },
    {
        "label": "#Latitude",
        "kind": 5,
        "importPath": "old.pvl_ephemeris1",
        "description": "old.pvl_ephemeris1",
        "peekOfCode": "#Latitude = p.Results.Location.latitude(:);\nLatitude = lat\n# the inversion of longitude is due to the fact that this code was\n# originally written for the convention that positive longitude were for\n# locations west of the prime meridian. However, the correct convention (as\n# of 2009) is to use negative longitudes for locations west of the prime\n# meridian. Therefore, the user should input longitude values under the\n# correct convention (e.g. Albuquerque is at -106 longitude), but it needs\n# to be inverted for use in the code.\nLongitude = - 1 * lon",
        "detail": "old.pvl_ephemeris1",
        "documentation": {}
    },
    {
        "label": "Latitude",
        "kind": 5,
        "importPath": "old.pvl_ephemeris1",
        "description": "old.pvl_ephemeris1",
        "peekOfCode": "Latitude = lat\n# the inversion of longitude is due to the fact that this code was\n# originally written for the convention that positive longitude were for\n# locations west of the prime meridian. However, the correct convention (as\n# of 2009) is to use negative longitudes for locations west of the prime\n# meridian. Therefore, the user should input longitude values under the\n# correct convention (e.g. Albuquerque is at -106 longitude), but it needs\n# to be inverted for use in the code.\nLongitude = - 1 * lon\n#Solar time per month",
        "detail": "old.pvl_ephemeris1",
        "documentation": {}
    },
    {
        "label": "Longitude",
        "kind": 5,
        "importPath": "old.pvl_ephemeris1",
        "description": "old.pvl_ephemeris1",
        "peekOfCode": "Longitude = - 1 * lon\n#Solar time per month\nTm,Tx,sunrise_min,sunset_min,hora = sol_por_dia(lon,lat)\nYear = 2019\nMonth = 1\nDay = 15\nHour = 0\nMinute = 0\nSecond = 0\n# the inversion of UTC offset is due to the fact that this code was",
        "detail": "old.pvl_ephemeris1",
        "documentation": {}
    },
    {
        "label": "Tm,Tx,sunrise_min,sunset_min,hora",
        "kind": 5,
        "importPath": "old.pvl_ephemeris1",
        "description": "old.pvl_ephemeris1",
        "peekOfCode": "Tm,Tx,sunrise_min,sunset_min,hora = sol_por_dia(lon,lat)\nYear = 2019\nMonth = 1\nDay = 15\nHour = 0\nMinute = 0\nSecond = 0\n# the inversion of UTC offset is due to the fact that this code was\n# originally written for the convention that positive offset values were\n# positive for locations west of the prime merdian. However, the correct",
        "detail": "old.pvl_ephemeris1",
        "documentation": {}
    },
    {
        "label": "Year",
        "kind": 5,
        "importPath": "old.pvl_ephemeris1",
        "description": "old.pvl_ephemeris1",
        "peekOfCode": "Year = 2019\nMonth = 1\nDay = 15\nHour = 0\nMinute = 0\nSecond = 0\n# the inversion of UTC offset is due to the fact that this code was\n# originally written for the convention that positive offset values were\n# positive for locations west of the prime merdian. However, the correct\n# convention (as of 2009) is to use negative offset codes for locaitons",
        "detail": "old.pvl_ephemeris1",
        "documentation": {}
    },
    {
        "label": "Month",
        "kind": 5,
        "importPath": "old.pvl_ephemeris1",
        "description": "old.pvl_ephemeris1",
        "peekOfCode": "Month = 1\nDay = 15\nHour = 0\nMinute = 0\nSecond = 0\n# the inversion of UTC offset is due to the fact that this code was\n# originally written for the convention that positive offset values were\n# positive for locations west of the prime merdian. However, the correct\n# convention (as of 2009) is to use negative offset codes for locaitons\n# west of the prime merdian. Therefore, the user should input offset values",
        "detail": "old.pvl_ephemeris1",
        "documentation": {}
    },
    {
        "label": "Day",
        "kind": 5,
        "importPath": "old.pvl_ephemeris1",
        "description": "old.pvl_ephemeris1",
        "peekOfCode": "Day = 15\nHour = 0\nMinute = 0\nSecond = 0\n# the inversion of UTC offset is due to the fact that this code was\n# originally written for the convention that positive offset values were\n# positive for locations west of the prime merdian. However, the correct\n# convention (as of 2009) is to use negative offset codes for locaitons\n# west of the prime merdian. Therefore, the user should input offset values\n# under the correct convention (e.g. EST = -5), but it needs to be inverted",
        "detail": "old.pvl_ephemeris1",
        "documentation": {}
    },
    {
        "label": "Hour",
        "kind": 5,
        "importPath": "old.pvl_ephemeris1",
        "description": "old.pvl_ephemeris1",
        "peekOfCode": "Hour = 0\nMinute = 0\nSecond = 0\n# the inversion of UTC offset is due to the fact that this code was\n# originally written for the convention that positive offset values were\n# positive for locations west of the prime merdian. However, the correct\n# convention (as of 2009) is to use negative offset codes for locaitons\n# west of the prime merdian. Therefore, the user should input offset values\n# under the correct convention (e.g. EST = -5), but it needs to be inverted\n# for use in the following code.",
        "detail": "old.pvl_ephemeris1",
        "documentation": {}
    },
    {
        "label": "Minute",
        "kind": 5,
        "importPath": "old.pvl_ephemeris1",
        "description": "old.pvl_ephemeris1",
        "peekOfCode": "Minute = 0\nSecond = 0\n# the inversion of UTC offset is due to the fact that this code was\n# originally written for the convention that positive offset values were\n# positive for locations west of the prime merdian. However, the correct\n# convention (as of 2009) is to use negative offset codes for locaitons\n# west of the prime merdian. Therefore, the user should input offset values\n# under the correct convention (e.g. EST = -5), but it needs to be inverted\n# for use in the following code.\nTZone = - 1 * (- 3)",
        "detail": "old.pvl_ephemeris1",
        "documentation": {}
    },
    {
        "label": "Second",
        "kind": 5,
        "importPath": "old.pvl_ephemeris1",
        "description": "old.pvl_ephemeris1",
        "peekOfCode": "Second = 0\n# the inversion of UTC offset is due to the fact that this code was\n# originally written for the convention that positive offset values were\n# positive for locations west of the prime merdian. However, the correct\n# convention (as of 2009) is to use negative offset codes for locaitons\n# west of the prime merdian. Therefore, the user should input offset values\n# under the correct convention (e.g. EST = -5), but it needs to be inverted\n# for use in the following code.\nTZone = - 1 * (- 3)\npressure = 1013",
        "detail": "old.pvl_ephemeris1",
        "documentation": {}
    },
    {
        "label": "TZone",
        "kind": 5,
        "importPath": "old.pvl_ephemeris1",
        "description": "old.pvl_ephemeris1",
        "peekOfCode": "TZone = - 1 * (- 3)\npressure = 1013\ntemperature = 23\ntemperature = temperature + 273.15\nDecHours = 12\nRadtoDeg = 180 / np.pi\nDegtoRad = np.pi / 180\nAbber = 20 / 3600\nLatR = Latitude * DegtoRad\nYr = Year - 1900",
        "detail": "old.pvl_ephemeris1",
        "documentation": {}
    },
    {
        "label": "pressure",
        "kind": 5,
        "importPath": "old.pvl_ephemeris1",
        "description": "old.pvl_ephemeris1",
        "peekOfCode": "pressure = 1013\ntemperature = 23\ntemperature = temperature + 273.15\nDecHours = 12\nRadtoDeg = 180 / np.pi\nDegtoRad = np.pi / 180\nAbber = 20 / 3600\nLatR = Latitude * DegtoRad\nYr = Year - 1900\nYrBegin = 365 * Yr + int(np.floor((Yr - 1) / 4)) - 0.5",
        "detail": "old.pvl_ephemeris1",
        "documentation": {}
    },
    {
        "label": "temperature",
        "kind": 5,
        "importPath": "old.pvl_ephemeris1",
        "description": "old.pvl_ephemeris1",
        "peekOfCode": "temperature = 23\ntemperature = temperature + 273.15\nDecHours = 12\nRadtoDeg = 180 / np.pi\nDegtoRad = np.pi / 180\nAbber = 20 / 3600\nLatR = Latitude * DegtoRad\nYr = Year - 1900\nYrBegin = 365 * Yr + int(np.floor((Yr - 1) / 4)) - 0.5\n# calculating day mean per month",
        "detail": "old.pvl_ephemeris1",
        "documentation": {}
    },
    {
        "label": "temperature",
        "kind": 5,
        "importPath": "old.pvl_ephemeris1",
        "description": "old.pvl_ephemeris1",
        "peekOfCode": "temperature = temperature + 273.15\nDecHours = 12\nRadtoDeg = 180 / np.pi\nDegtoRad = np.pi / 180\nAbber = 20 / 3600\nLatR = Latitude * DegtoRad\nYr = Year - 1900\nYrBegin = 365 * Yr + int(np.floor((Yr - 1) / 4)) - 0.5\n# calculating day mean per month\nmon = np.array([31,28,31,30,31,30,31,31,30,31,30,31])",
        "detail": "old.pvl_ephemeris1",
        "documentation": {}
    },
    {
        "label": "DecHours",
        "kind": 5,
        "importPath": "old.pvl_ephemeris1",
        "description": "old.pvl_ephemeris1",
        "peekOfCode": "DecHours = 12\nRadtoDeg = 180 / np.pi\nDegtoRad = np.pi / 180\nAbber = 20 / 3600\nLatR = Latitude * DegtoRad\nYr = Year - 1900\nYrBegin = 365 * Yr + int(np.floor((Yr - 1) / 4)) - 0.5\n# calculating day mean per month\nmon = np.array([31,28,31,30,31,30,31,31,30,31,30,31])\nsumM = 0",
        "detail": "old.pvl_ephemeris1",
        "documentation": {}
    },
    {
        "label": "RadtoDeg",
        "kind": 5,
        "importPath": "old.pvl_ephemeris1",
        "description": "old.pvl_ephemeris1",
        "peekOfCode": "RadtoDeg = 180 / np.pi\nDegtoRad = np.pi / 180\nAbber = 20 / 3600\nLatR = Latitude * DegtoRad\nYr = Year - 1900\nYrBegin = 365 * Yr + int(np.floor((Yr - 1) / 4)) - 0.5\n# calculating day mean per month\nmon = np.array([31,28,31,30,31,30,31,31,30,31,30,31])\nsumM = 0\nfor i in np.arange(1,12+1).reshape(-1):",
        "detail": "old.pvl_ephemeris1",
        "documentation": {}
    },
    {
        "label": "DegtoRad",
        "kind": 5,
        "importPath": "old.pvl_ephemeris1",
        "description": "old.pvl_ephemeris1",
        "peekOfCode": "DegtoRad = np.pi / 180\nAbber = 20 / 3600\nLatR = Latitude * DegtoRad\nYr = Year - 1900\nYrBegin = 365 * Yr + int(np.floor((Yr - 1) / 4)) - 0.5\n# calculating day mean per month\nmon = np.array([31,28,31,30,31,30,31,31,30,31,30,31])\nsumM = 0\nfor i in np.arange(1,12+1).reshape(-1):\n    for j in np.arange(np.arange(1,len(DecHours(,,1))+1)):",
        "detail": "old.pvl_ephemeris1",
        "documentation": {}
    },
    {
        "label": "Abber",
        "kind": 5,
        "importPath": "old.pvl_ephemeris1",
        "description": "old.pvl_ephemeris1",
        "peekOfCode": "Abber = 20 / 3600\nLatR = Latitude * DegtoRad\nYr = Year - 1900\nYrBegin = 365 * Yr + int(np.floor((Yr - 1) / 4)) - 0.5\n# calculating day mean per month\nmon = np.array([31,28,31,30,31,30,31,31,30,31,30,31])\nsumM = 0\nfor i in np.arange(1,12+1).reshape(-1):\n    for j in np.arange(np.arange(1,len(DecHours(,,1))+1)):\n        n[i] = int(np.floor(mon(1,i) / 2)) + sumM",
        "detail": "old.pvl_ephemeris1",
        "documentation": {}
    },
    {
        "label": "LatR",
        "kind": 5,
        "importPath": "old.pvl_ephemeris1",
        "description": "old.pvl_ephemeris1",
        "peekOfCode": "LatR = Latitude * DegtoRad\nYr = Year - 1900\nYrBegin = 365 * Yr + int(np.floor((Yr - 1) / 4)) - 0.5\n# calculating day mean per month\nmon = np.array([31,28,31,30,31,30,31,31,30,31,30,31])\nsumM = 0\nfor i in np.arange(1,12+1).reshape(-1):\n    for j in np.arange(np.arange(1,len(DecHours(,,1))+1)):\n        n[i] = int(np.floor(mon(1,i) / 2)) + sumM\n        sumM = sum(mon(np.arange(1,i+1)))",
        "detail": "old.pvl_ephemeris1",
        "documentation": {}
    },
    {
        "label": "Yr",
        "kind": 5,
        "importPath": "old.pvl_ephemeris1",
        "description": "old.pvl_ephemeris1",
        "peekOfCode": "Yr = Year - 1900\nYrBegin = 365 * Yr + int(np.floor((Yr - 1) / 4)) - 0.5\n# calculating day mean per month\nmon = np.array([31,28,31,30,31,30,31,31,30,31,30,31])\nsumM = 0\nfor i in np.arange(1,12+1).reshape(-1):\n    for j in np.arange(np.arange(1,len(DecHours(,,1))+1)):\n        n[i] = int(np.floor(mon(1,i) / 2)) + sumM\n        sumM = sum(mon(np.arange(1,i+1)))\n        DayOfYear[i] = n(i)",
        "detail": "old.pvl_ephemeris1",
        "documentation": {}
    },
    {
        "label": "YrBegin",
        "kind": 5,
        "importPath": "old.pvl_ephemeris1",
        "description": "old.pvl_ephemeris1",
        "peekOfCode": "YrBegin = 365 * Yr + int(np.floor((Yr - 1) / 4)) - 0.5\n# calculating day mean per month\nmon = np.array([31,28,31,30,31,30,31,31,30,31,30,31])\nsumM = 0\nfor i in np.arange(1,12+1).reshape(-1):\n    for j in np.arange(np.arange(1,len(DecHours(,,1))+1)):\n        n[i] = int(np.floor(mon(1,i) / 2)) + sumM\n        sumM = sum(mon(np.arange(1,i+1)))\n        DayOfYear[i] = n(i)\n        UnivDate[i] = DayOfYear(i) + int(np.floor((DecHours + TZone) / 24))",
        "detail": "old.pvl_ephemeris1",
        "documentation": {}
    },
    {
        "label": "mon",
        "kind": 5,
        "importPath": "old.pvl_ephemeris1",
        "description": "old.pvl_ephemeris1",
        "peekOfCode": "mon = np.array([31,28,31,30,31,30,31,31,30,31,30,31])\nsumM = 0\nfor i in np.arange(1,12+1).reshape(-1):\n    for j in np.arange(np.arange(1,len(DecHours(,,1))+1)):\n        n[i] = int(np.floor(mon(1,i) / 2)) + sumM\n        sumM = sum(mon(np.arange(1,i+1)))\n        DayOfYear[i] = n(i)\n        UnivDate[i] = DayOfYear(i) + int(np.floor((DecHours + TZone) / 24))\n        UnivHr = np.mod((DecHours + TZone),24)\n        Ezero[i] = YrBegin + UnivDate(i)",
        "detail": "old.pvl_ephemeris1",
        "documentation": {}
    },
    {
        "label": "sumM",
        "kind": 5,
        "importPath": "old.pvl_ephemeris1",
        "description": "old.pvl_ephemeris1",
        "peekOfCode": "sumM = 0\nfor i in np.arange(1,12+1).reshape(-1):\n    for j in np.arange(np.arange(1,len(DecHours(,,1))+1)):\n        n[i] = int(np.floor(mon(1,i) / 2)) + sumM\n        sumM = sum(mon(np.arange(1,i+1)))\n        DayOfYear[i] = n(i)\n        UnivDate[i] = DayOfYear(i) + int(np.floor((DecHours + TZone) / 24))\n        UnivHr = np.mod((DecHours + TZone),24)\n        Ezero[i] = YrBegin + UnivDate(i)\n        T[i] = Ezero(i) / 36525",
        "detail": "old.pvl_ephemeris1",
        "documentation": {}
    },
    {
        "label": "pvl_extraradiation",
        "kind": 2,
        "importPath": "old.pvl_extraradiation",
        "description": "old.pvl_extraradiation",
        "peekOfCode": "def pvl_extraradiation(doy = None): \n    # PVL_EXTRARADIATION Determine extraterrestrial radiation from day of year\n    # Syntax\n#   Ea = pvl_extraradiation(doy)\n    # Description\n#   Determine the amount of extraterrestrial solar radiation.\n    #   Output Ea is the extraterrestrial radiation present in watts per square meter\n#   on a surface which is normal to the sun. Ea is of the same size as the\n#   input doy.\n    #   Input doy is an array specifying the day of year. Valid values are >=1 and <367.",
        "detail": "old.pvl_extraradiation",
        "documentation": {}
    },
    {
        "label": "pvl_perez",
        "kind": 2,
        "importPath": "old.pvl_perez",
        "description": "old.pvl_perez",
        "peekOfCode": "def pvl_perez(SurfTilt = None,SurfAz = None,DHI = None,DNI = None,HExtra = None,SunZen = None,SunAz = None,AM = None,model = None): \n    # PVL_PEREZ Determine diffuse irradiance from the sky on a tilted surface using the Perez model\n    # Syntax\n#   [SkyDiffuse,SkyDiffuse_Iso,SkyDiffuse_Cir,SkyDiffuse_Hor] = pvl_perez(SurfTilt, SurfAz, DHI, DNI, HExtra, SunZen, SunAz, AM)\n#   [SkyDiffuse,SkyDiffuse_Iso,SkyDiffuse_Cir,SkyDiffuse_Hor] = pvl_perez(SurfTilt, SurfAz, DHI, DNI, HExtra, SunZen, SunAz, AM, model)\n    # Description\n#   The Perez model [3] determines the sky diffuse irradiance on a tilted\n#   surface using the surface tilt angle, surface azimuth angle, diffuse\n#   horizontal irradiance, direct normal irradiance, extraterrestrial\n#   irradiance, sun zenith angle, sun azimuth angle, and relative (not",
        "detail": "old.pvl_perez",
        "documentation": {}
    },
    {
        "label": "GetPerezCoefficients",
        "kind": 2,
        "importPath": "old.pvl_perez",
        "description": "old.pvl_perez",
        "peekOfCode": "def GetPerezCoefficients(perezmodel = None): \n    if np.array(['allsitescomposite1990']) == perezmodel.lower():\n        PerezCoeffs = np.array([- 0.008,0.588,- 0.062,- 0.06,0.072,- 0.022,0.13,0.683,- 0.151,- 0.019,0.066,- 0.029,0.33,0.487,- 0.221,0.055,- 0.064,- 0.026,0.568,0.187,- 0.295,0.109,- 0.152,- 0.014,0.873,- 0.392,- 0.362,0.226,- 0.462,0.001,1.132,- 1.237,- 0.412,0.288,- 0.823,0.056,1.06,- 1.6,- 0.359,0.264,- 1.127,0.131,0.678,- 0.327,- 0.25,0.156,- 1.377,0.251])\n    else:\n        if np.array(['allsitescomposite1988']) == perezmodel.lower():\n            PerezCoeffs = np.array([- 0.018,0.705,- 0.071,- 0.058,0.102,- 0.026,0.191,0.645,- 0.171,0.012,0.009,- 0.027,0.44,0.378,- 0.256,0.087,- 0.104,- 0.025,0.756,- 0.121,- 0.346,0.179,- 0.321,- 0.008,0.996,- 0.645,- 0.405,0.26,- 0.59,0.017,1.098,- 1.29,- 0.393,0.269,- 0.832,0.075,0.973,- 1.135,- 0.378,0.124,- 0.258,0.149,0.689,- 0.412,- 0.273,0.199,- 1.675,0.237])\n        else:\n            if np.array(['sandiacomposite1988']) == perezmodel.lower():\n                PerezCoeffs = np.array([- 0.196,1.084,- 0.006,- 0.114,0.18,- 0.019,0.236,0.519,- 0.18,- 0.011,0.02,- 0.038,0.454,0.321,- 0.255,0.072,- 0.098,- 0.046,0.866,- 0.381,- 0.375,0.203,- 0.403,- 0.049,1.026,- 0.711,- 0.426,0.273,- 0.602,- 0.061,0.978,- 0.986,- 0.35,0.28,- 0.915,- 0.024,0.748,- 0.913,- 0.236,0.173,- 1.045,0.065,0.318,- 0.757,0.103,0.062,- 1.698,0.236])\n            else:",
        "detail": "old.pvl_perez",
        "documentation": {}
    },
    {
        "label": "pvl_relativeairmass",
        "kind": 2,
        "importPath": "old.pvl_relativeairmass",
        "description": "old.pvl_relativeairmass",
        "peekOfCode": "def pvl_relativeairmass(z = None,varargin = None): \n    # PVL_RELATIVEAIRMASS    Gives the relative (not pressure-corrected) airmass\n    # Syntax\n#   AM = RELATIVEAIRMASS(z)\n#   AM = RELATIVEAIRMASS(z, model)\n    # Description\n#   Gives the airmass at sea-level when given a sun zenith angle, z (in\n#   degrees).\n#   The \"model\" variable allows selection of different airmass models\n#   (described below). \"model\" must be a valid string. If \"model\" is not",
        "detail": "old.pvl_relativeairmass",
        "documentation": {}
    },
    {
        "label": "inputs",
        "kind": 5,
        "importPath": "old.PV_Decision_Making",
        "description": "old.PV_Decision_Making",
        "peekOfCode": "inputs = ['Enter the longitude:','Enter the latitude:','Enter the annual average of wind speed for day times in (m/s)','Enter the annual average temperature for day times in (�C)','Enter the annual maximum temperature for day times in (�C)','Enter the annual minimum temperature for day times in (�C)','Enter the altitud in (m)','Enter the annual minimum humidity in (%)','Enter the area without shadding for the PV installation (m�)','Enter the number of phases avaliable in the nearest system. Type [1], [2] or [3]','Enter the distribution/transmission system voltage phase-pneutro.','Enter the frequency of the grid in (Hz)','Enter [2]-ON-grid optimum design or [4]-ON-grid optimum design choosing the PV model','Enter the load demand [1]-per month; [2]-annual average; [3]-Light criteria','Enter the shadding factor [0 to 1]','Enter the PV inclination angle (roof angle) [in graus] or [Nan] for optimal angle design','Enter the PV azimuth angle [in graus], North is 0 graus or [Nan] for optimal angle design']\nlon = int(input(inputs[0]))             # Longitude\nlat = int(input(inputs[1]))             # Latitude\nwind_speed = int(input(inputs[2]))      # Wind Speed\nx_atemp = int(input(inputs[3]))         # Average Temperature\nmax_atemp = int(input(inputs[4]))       # Maximum Temperature\nmin_atemp = int(input(inputs[5]))       # Minimum Temperature\nalt = int(input(inputs[6]))             # Altitude\nhum = int(input(inputs[7]))             # Humidity\narea = int(input(inputs[8]))            # Area",
        "detail": "old.PV_Decision_Making",
        "documentation": {}
    },
    {
        "label": "lon",
        "kind": 5,
        "importPath": "old.PV_Decision_Making",
        "description": "old.PV_Decision_Making",
        "peekOfCode": "lon = int(input(inputs[0]))             # Longitude\nlat = int(input(inputs[1]))             # Latitude\nwind_speed = int(input(inputs[2]))      # Wind Speed\nx_atemp = int(input(inputs[3]))         # Average Temperature\nmax_atemp = int(input(inputs[4]))       # Maximum Temperature\nmin_atemp = int(input(inputs[5]))       # Minimum Temperature\nalt = int(input(inputs[6]))             # Altitude\nhum = int(input(inputs[7]))             # Humidity\narea = int(input(inputs[8]))            # Area\nnf = int(input(inputs[9]))              # Number of Phases",
        "detail": "old.PV_Decision_Making",
        "documentation": {}
    },
    {
        "label": "lat",
        "kind": 5,
        "importPath": "old.PV_Decision_Making",
        "description": "old.PV_Decision_Making",
        "peekOfCode": "lat = int(input(inputs[1]))             # Latitude\nwind_speed = int(input(inputs[2]))      # Wind Speed\nx_atemp = int(input(inputs[3]))         # Average Temperature\nmax_atemp = int(input(inputs[4]))       # Maximum Temperature\nmin_atemp = int(input(inputs[5]))       # Minimum Temperature\nalt = int(input(inputs[6]))             # Altitude\nhum = int(input(inputs[7]))             # Humidity\narea = int(input(inputs[8]))            # Area\nnf = int(input(inputs[9]))              # Number of Phases\nvfn = int(input(inputs[10]))            # Voltage Phase-Neutral",
        "detail": "old.PV_Decision_Making",
        "documentation": {}
    },
    {
        "label": "wind_speed",
        "kind": 5,
        "importPath": "old.PV_Decision_Making",
        "description": "old.PV_Decision_Making",
        "peekOfCode": "wind_speed = int(input(inputs[2]))      # Wind Speed\nx_atemp = int(input(inputs[3]))         # Average Temperature\nmax_atemp = int(input(inputs[4]))       # Maximum Temperature\nmin_atemp = int(input(inputs[5]))       # Minimum Temperature\nalt = int(input(inputs[6]))             # Altitude\nhum = int(input(inputs[7]))             # Humidity\narea = int(input(inputs[8]))            # Area\nnf = int(input(inputs[9]))              # Number of Phases\nvfn = int(input(inputs[10]))            # Voltage Phase-Neutral\nfreq = int(input(inputs[11]))           # Frequency",
        "detail": "old.PV_Decision_Making",
        "documentation": {}
    },
    {
        "label": "x_atemp",
        "kind": 5,
        "importPath": "old.PV_Decision_Making",
        "description": "old.PV_Decision_Making",
        "peekOfCode": "x_atemp = int(input(inputs[3]))         # Average Temperature\nmax_atemp = int(input(inputs[4]))       # Maximum Temperature\nmin_atemp = int(input(inputs[5]))       # Minimum Temperature\nalt = int(input(inputs[6]))             # Altitude\nhum = int(input(inputs[7]))             # Humidity\narea = int(input(inputs[8]))            # Area\nnf = int(input(inputs[9]))              # Number of Phases\nvfn = int(input(inputs[10]))            # Voltage Phase-Neutral\nfreq = int(input(inputs[11]))           # Frequency\npro = int(input(inputs[12]))            # Project Type",
        "detail": "old.PV_Decision_Making",
        "documentation": {}
    },
    {
        "label": "max_atemp",
        "kind": 5,
        "importPath": "old.PV_Decision_Making",
        "description": "old.PV_Decision_Making",
        "peekOfCode": "max_atemp = int(input(inputs[4]))       # Maximum Temperature\nmin_atemp = int(input(inputs[5]))       # Minimum Temperature\nalt = int(input(inputs[6]))             # Altitude\nhum = int(input(inputs[7]))             # Humidity\narea = int(input(inputs[8]))            # Area\nnf = int(input(inputs[9]))              # Number of Phases\nvfn = int(input(inputs[10]))            # Voltage Phase-Neutral\nfreq = int(input(inputs[11]))           # Frequency\npro = int(input(inputs[12]))            # Project Type\nsel = int(input(inputs[13]))            # Selection Criteria",
        "detail": "old.PV_Decision_Making",
        "documentation": {}
    },
    {
        "label": "min_atemp",
        "kind": 5,
        "importPath": "old.PV_Decision_Making",
        "description": "old.PV_Decision_Making",
        "peekOfCode": "min_atemp = int(input(inputs[5]))       # Minimum Temperature\nalt = int(input(inputs[6]))             # Altitude\nhum = int(input(inputs[7]))             # Humidity\narea = int(input(inputs[8]))            # Area\nnf = int(input(inputs[9]))              # Number of Phases\nvfn = int(input(inputs[10]))            # Voltage Phase-Neutral\nfreq = int(input(inputs[11]))           # Frequency\npro = int(input(inputs[12]))            # Project Type\nsel = int(input(inputs[13]))            # Selection Criteria\nFS = int(input(inputs[14]))             # Shading Factor",
        "detail": "old.PV_Decision_Making",
        "documentation": {}
    },
    {
        "label": "alt",
        "kind": 5,
        "importPath": "old.PV_Decision_Making",
        "description": "old.PV_Decision_Making",
        "peekOfCode": "alt = int(input(inputs[6]))             # Altitude\nhum = int(input(inputs[7]))             # Humidity\narea = int(input(inputs[8]))            # Area\nnf = int(input(inputs[9]))              # Number of Phases\nvfn = int(input(inputs[10]))            # Voltage Phase-Neutral\nfreq = int(input(inputs[11]))           # Frequency\npro = int(input(inputs[12]))            # Project Type\nsel = int(input(inputs[13]))            # Selection Criteria\nFS = int(input(inputs[14]))             # Shading Factor\nstil = int(input(inputs[15]))           # Tilt Angle",
        "detail": "old.PV_Decision_Making",
        "documentation": {}
    },
    {
        "label": "hum",
        "kind": 5,
        "importPath": "old.PV_Decision_Making",
        "description": "old.PV_Decision_Making",
        "peekOfCode": "hum = int(input(inputs[7]))             # Humidity\narea = int(input(inputs[8]))            # Area\nnf = int(input(inputs[9]))              # Number of Phases\nvfn = int(input(inputs[10]))            # Voltage Phase-Neutral\nfreq = int(input(inputs[11]))           # Frequency\npro = int(input(inputs[12]))            # Project Type\nsel = int(input(inputs[13]))            # Selection Criteria\nFS = int(input(inputs[14]))             # Shading Factor\nstil = int(input(inputs[15]))           # Tilt Angle\nsazi = int(input(inputs[16]))           # Azimuth Angle",
        "detail": "old.PV_Decision_Making",
        "documentation": {}
    },
    {
        "label": "area",
        "kind": 5,
        "importPath": "old.PV_Decision_Making",
        "description": "old.PV_Decision_Making",
        "peekOfCode": "area = int(input(inputs[8]))            # Area\nnf = int(input(inputs[9]))              # Number of Phases\nvfn = int(input(inputs[10]))            # Voltage Phase-Neutral\nfreq = int(input(inputs[11]))           # Frequency\npro = int(input(inputs[12]))            # Project Type\nsel = int(input(inputs[13]))            # Selection Criteria\nFS = int(input(inputs[14]))             # Shading Factor\nstil = int(input(inputs[15]))           # Tilt Angle\nsazi = int(input(inputs[16]))           # Azimuth Angle\nproj = 4",
        "detail": "old.PV_Decision_Making",
        "documentation": {}
    },
    {
        "label": "nf",
        "kind": 5,
        "importPath": "old.PV_Decision_Making",
        "description": "old.PV_Decision_Making",
        "peekOfCode": "nf = int(input(inputs[9]))              # Number of Phases\nvfn = int(input(inputs[10]))            # Voltage Phase-Neutral\nfreq = int(input(inputs[11]))           # Frequency\npro = int(input(inputs[12]))            # Project Type\nsel = int(input(inputs[13]))            # Selection Criteria\nFS = int(input(inputs[14]))             # Shading Factor\nstil = int(input(inputs[15]))           # Tilt Angle\nsazi = int(input(inputs[16]))           # Azimuth Angle\nproj = 4\n# Data sheets",
        "detail": "old.PV_Decision_Making",
        "documentation": {}
    },
    {
        "label": "vfn",
        "kind": 5,
        "importPath": "old.PV_Decision_Making",
        "description": "old.PV_Decision_Making",
        "peekOfCode": "vfn = int(input(inputs[10]))            # Voltage Phase-Neutral\nfreq = int(input(inputs[11]))           # Frequency\npro = int(input(inputs[12]))            # Project Type\nsel = int(input(inputs[13]))            # Selection Criteria\nFS = int(input(inputs[14]))             # Shading Factor\nstil = int(input(inputs[15]))           # Tilt Angle\nsazi = int(input(inputs[16]))           # Azimuth Angle\nproj = 4\n# Data sheets\nfroS,froN = inverter_parameters(pro)",
        "detail": "old.PV_Decision_Making",
        "documentation": {}
    },
    {
        "label": "freq",
        "kind": 5,
        "importPath": "old.PV_Decision_Making",
        "description": "old.PV_Decision_Making",
        "peekOfCode": "freq = int(input(inputs[11]))           # Frequency\npro = int(input(inputs[12]))            # Project Type\nsel = int(input(inputs[13]))            # Selection Criteria\nFS = int(input(inputs[14]))             # Shading Factor\nstil = int(input(inputs[15]))           # Tilt Angle\nsazi = int(input(inputs[16]))           # Azimuth Angle\nproj = 4\n# Data sheets\nfroS,froN = inverter_parameters(pro)\nsunS,sunN,brandpv = pv_parameters(pro)",
        "detail": "old.PV_Decision_Making",
        "documentation": {}
    },
    {
        "label": "pro",
        "kind": 5,
        "importPath": "old.PV_Decision_Making",
        "description": "old.PV_Decision_Making",
        "peekOfCode": "pro = int(input(inputs[12]))            # Project Type\nsel = int(input(inputs[13]))            # Selection Criteria\nFS = int(input(inputs[14]))             # Shading Factor\nstil = int(input(inputs[15]))           # Tilt Angle\nsazi = int(input(inputs[16]))           # Azimuth Angle\nproj = 4\n# Data sheets\nfroS,froN = inverter_parameters(pro)\nsunS,sunN,brandpv = pv_parameters(pro)\nFc = 0.8",
        "detail": "old.PV_Decision_Making",
        "documentation": {}
    },
    {
        "label": "sel",
        "kind": 5,
        "importPath": "old.PV_Decision_Making",
        "description": "old.PV_Decision_Making",
        "peekOfCode": "sel = int(input(inputs[13]))            # Selection Criteria\nFS = int(input(inputs[14]))             # Shading Factor\nstil = int(input(inputs[15]))           # Tilt Angle\nsazi = int(input(inputs[16]))           # Azimuth Angle\nproj = 4\n# Data sheets\nfroS,froN = inverter_parameters(pro)\nsunS,sunN,brandpv = pv_parameters(pro)\nFc = 0.8\n# When especifing the PV model",
        "detail": "old.PV_Decision_Making",
        "documentation": {}
    },
    {
        "label": "FS",
        "kind": 5,
        "importPath": "old.PV_Decision_Making",
        "description": "old.PV_Decision_Making",
        "peekOfCode": "FS = int(input(inputs[14]))             # Shading Factor\nstil = int(input(inputs[15]))           # Tilt Angle\nsazi = int(input(inputs[16]))           # Azimuth Angle\nproj = 4\n# Data sheets\nfroS,froN = inverter_parameters(pro)\nsunS,sunN,brandpv = pv_parameters(pro)\nFc = 0.8\n# When especifing the PV model\nif pro == 4:",
        "detail": "old.PV_Decision_Making",
        "documentation": {}
    },
    {
        "label": "stil",
        "kind": 5,
        "importPath": "old.PV_Decision_Making",
        "description": "old.PV_Decision_Making",
        "peekOfCode": "stil = int(input(inputs[15]))           # Tilt Angle\nsazi = int(input(inputs[16]))           # Azimuth Angle\nproj = 4\n# Data sheets\nfroS,froN = inverter_parameters(pro)\nsunS,sunN,brandpv = pv_parameters(pro)\nFc = 0.8\n# When especifing the PV model\nif pro == 4:\n    pv_mo = brapv(sunS,brandpv)",
        "detail": "old.PV_Decision_Making",
        "documentation": {}
    },
    {
        "label": "sazi",
        "kind": 5,
        "importPath": "old.PV_Decision_Making",
        "description": "old.PV_Decision_Making",
        "peekOfCode": "sazi = int(input(inputs[16]))           # Azimuth Angle\nproj = 4\n# Data sheets\nfroS,froN = inverter_parameters(pro)\nsunS,sunN,brandpv = pv_parameters(pro)\nFc = 0.8\n# When especifing the PV model\nif pro == 4:\n    pv_mo = brapv(sunS,brandpv)\n# Demand and Consumption",
        "detail": "old.PV_Decision_Making",
        "documentation": {}
    },
    {
        "label": "proj",
        "kind": 5,
        "importPath": "old.PV_Decision_Making",
        "description": "old.PV_Decision_Making",
        "peekOfCode": "proj = 4\n# Data sheets\nfroS,froN = inverter_parameters(pro)\nsunS,sunN,brandpv = pv_parameters(pro)\nFc = 0.8\n# When especifing the PV model\nif pro == 4:\n    pv_mo = brapv(sunS,brandpv)\n# Demand and Consumption\ndemand = consumption(sel,area)",
        "detail": "old.PV_Decision_Making",
        "documentation": {}
    },
    {
        "label": "froS,froN",
        "kind": 5,
        "importPath": "old.PV_Decision_Making",
        "description": "old.PV_Decision_Making",
        "peekOfCode": "froS,froN = inverter_parameters(pro)\nsunS,sunN,brandpv = pv_parameters(pro)\nFc = 0.8\n# When especifing the PV model\nif pro == 4:\n    pv_mo = brapv(sunS,brandpv)\n# Demand and Consumption\ndemand = consumption(sel,area)\n# Result from the latitude and longitude\nsol,y,incl,ori = irradiation(lat,lon,alt,x_atemp,FS,proj,stil,sazi)",
        "detail": "old.PV_Decision_Making",
        "documentation": {}
    },
    {
        "label": "sunS,sunN,brandpv",
        "kind": 5,
        "importPath": "old.PV_Decision_Making",
        "description": "old.PV_Decision_Making",
        "peekOfCode": "sunS,sunN,brandpv = pv_parameters(pro)\nFc = 0.8\n# When especifing the PV model\nif pro == 4:\n    pv_mo = brapv(sunS,brandpv)\n# Demand and Consumption\ndemand = consumption(sel,area)\n# Result from the latitude and longitude\nsol,y,incl,ori = irradiation(lat,lon,alt,x_atemp,FS,proj,stil,sazi)\nh = month_hour(y)",
        "detail": "old.PV_Decision_Making",
        "documentation": {}
    },
    {
        "label": "Fc",
        "kind": 5,
        "importPath": "old.PV_Decision_Making",
        "description": "old.PV_Decision_Making",
        "peekOfCode": "Fc = 0.8\n# When especifing the PV model\nif pro == 4:\n    pv_mo = brapv(sunS,brandpv)\n# Demand and Consumption\ndemand = consumption(sel,area)\n# Result from the latitude and longitude\nsol,y,incl,ori = irradiation(lat,lon,alt,x_atemp,FS,proj,stil,sazi)\nh = month_hour(y)\nTm,T,sunrise_min,sunset_min = sol_por_dia(lon,lat)",
        "detail": "old.PV_Decision_Making",
        "documentation": {}
    },
    {
        "label": "demand",
        "kind": 5,
        "importPath": "old.PV_Decision_Making",
        "description": "old.PV_Decision_Making",
        "peekOfCode": "demand = consumption(sel,area)\n# Result from the latitude and longitude\nsol,y,incl,ori = irradiation(lat,lon,alt,x_atemp,FS,proj,stil,sazi)\nh = month_hour(y)\nTm,T,sunrise_min,sunset_min = sol_por_dia(lon,lat)\n#E=mean((y.*1000)./Tm);\nE = 1000\nx_temp,max_temp,min_temp,nef = module_temperature(wind_speed,x_atemp,sunN,E,max_atemp,min_atemp)\ndist,dmax = distancia_de_sombreamento(lat,sunN,sunrise_min)\nextra = np.array([x_temp,max_temp,min_temp,dist,dmax])",
        "detail": "old.PV_Decision_Making",
        "documentation": {}
    },
    {
        "label": "sol,y,incl,ori",
        "kind": 5,
        "importPath": "old.PV_Decision_Making",
        "description": "old.PV_Decision_Making",
        "peekOfCode": "sol,y,incl,ori = irradiation(lat,lon,alt,x_atemp,FS,proj,stil,sazi)\nh = month_hour(y)\nTm,T,sunrise_min,sunset_min = sol_por_dia(lon,lat)\n#E=mean((y.*1000)./Tm);\nE = 1000\nx_temp,max_temp,min_temp,nef = module_temperature(wind_speed,x_atemp,sunN,E,max_atemp,min_atemp)\ndist,dmax = distancia_de_sombreamento(lat,sunN,sunrise_min)\nextra = np.array([x_temp,max_temp,min_temp,dist,dmax])\nsunN1 = np.array([sunN,x_temp,max_temp,min_temp,dist,dmax])\n# Compute the demand of the system",
        "detail": "old.PV_Decision_Making",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "old.PV_Decision_Making",
        "description": "old.PV_Decision_Making",
        "peekOfCode": "h = month_hour(y)\nTm,T,sunrise_min,sunset_min = sol_por_dia(lon,lat)\n#E=mean((y.*1000)./Tm);\nE = 1000\nx_temp,max_temp,min_temp,nef = module_temperature(wind_speed,x_atemp,sunN,E,max_atemp,min_atemp)\ndist,dmax = distancia_de_sombreamento(lat,sunN,sunrise_min)\nextra = np.array([x_temp,max_temp,min_temp,dist,dmax])\nsunN1 = np.array([sunN,x_temp,max_temp,min_temp,dist,dmax])\n# Compute the demand of the system\nP_tilt,M_tilt = power24(demand,h,froN,Fc)",
        "detail": "old.PV_Decision_Making",
        "documentation": {}
    },
    {
        "label": "Tm,T,sunrise_min,sunset_min",
        "kind": 5,
        "importPath": "old.PV_Decision_Making",
        "description": "old.PV_Decision_Making",
        "peekOfCode": "Tm,T,sunrise_min,sunset_min = sol_por_dia(lon,lat)\n#E=mean((y.*1000)./Tm);\nE = 1000\nx_temp,max_temp,min_temp,nef = module_temperature(wind_speed,x_atemp,sunN,E,max_atemp,min_atemp)\ndist,dmax = distancia_de_sombreamento(lat,sunN,sunrise_min)\nextra = np.array([x_temp,max_temp,min_temp,dist,dmax])\nsunN1 = np.array([sunN,x_temp,max_temp,min_temp,dist,dmax])\n# Compute the demand of the system\nP_tilt,M_tilt = power24(demand,h,froN,Fc)\nif pro == 2:",
        "detail": "old.PV_Decision_Making",
        "documentation": {}
    },
    {
        "label": "E",
        "kind": 5,
        "importPath": "old.PV_Decision_Making",
        "description": "old.PV_Decision_Making",
        "peekOfCode": "E = 1000\nx_temp,max_temp,min_temp,nef = module_temperature(wind_speed,x_atemp,sunN,E,max_atemp,min_atemp)\ndist,dmax = distancia_de_sombreamento(lat,sunN,sunrise_min)\nextra = np.array([x_temp,max_temp,min_temp,dist,dmax])\nsunN1 = np.array([sunN,x_temp,max_temp,min_temp,dist,dmax])\n# Compute the demand of the system\nP_tilt,M_tilt = power24(demand,h,froN,Fc)\nif pro == 2:\n    # 4 - PV DESIGN\n    Ntt,pt,p = pv2(area,M_tilt,sunN1,froN)",
        "detail": "old.PV_Decision_Making",
        "documentation": {}
    },
    {
        "label": "x_temp,max_temp,min_temp,nef",
        "kind": 5,
        "importPath": "old.PV_Decision_Making",
        "description": "old.PV_Decision_Making",
        "peekOfCode": "x_temp,max_temp,min_temp,nef = module_temperature(wind_speed,x_atemp,sunN,E,max_atemp,min_atemp)\ndist,dmax = distancia_de_sombreamento(lat,sunN,sunrise_min)\nextra = np.array([x_temp,max_temp,min_temp,dist,dmax])\nsunN1 = np.array([sunN,x_temp,max_temp,min_temp,dist,dmax])\n# Compute the demand of the system\nP_tilt,M_tilt = power24(demand,h,froN,Fc)\nif pro == 2:\n    # 4 - PV DESIGN\n    Ntt,pt,p = pv2(area,M_tilt,sunN1,froN)\n    # # 7 - INVERTER AND MPPT DESIGN",
        "detail": "old.PV_Decision_Making",
        "documentation": {}
    },
    {
        "label": "dist,dmax",
        "kind": 5,
        "importPath": "old.PV_Decision_Making",
        "description": "old.PV_Decision_Making",
        "peekOfCode": "dist,dmax = distancia_de_sombreamento(lat,sunN,sunrise_min)\nextra = np.array([x_temp,max_temp,min_temp,dist,dmax])\nsunN1 = np.array([sunN,x_temp,max_temp,min_temp,dist,dmax])\n# Compute the demand of the system\nP_tilt,M_tilt = power24(demand,h,froN,Fc)\nif pro == 2:\n    # 4 - PV DESIGN\n    Ntt,pt,p = pv2(area,M_tilt,sunN1,froN)\n    # # 7 - INVERTER AND MPPT DESIGN\n    Nit,Cit,pit,Nt,Ct,ptt,Npit,Nft,Npt1,tt,NS = inverter2t(M_tilt,min_atemp,max_atemp,p,pt,Ntt,vfn,nf,alt,hum,freq)",
        "detail": "old.PV_Decision_Making",
        "documentation": {}
    },
    {
        "label": "extra",
        "kind": 5,
        "importPath": "old.PV_Decision_Making",
        "description": "old.PV_Decision_Making",
        "peekOfCode": "extra = np.array([x_temp,max_temp,min_temp,dist,dmax])\nsunN1 = np.array([sunN,x_temp,max_temp,min_temp,dist,dmax])\n# Compute the demand of the system\nP_tilt,M_tilt = power24(demand,h,froN,Fc)\nif pro == 2:\n    # 4 - PV DESIGN\n    Ntt,pt,p = pv2(area,M_tilt,sunN1,froN)\n    # # 7 - INVERTER AND MPPT DESIGN\n    Nit,Cit,pit,Nt,Ct,ptt,Npit,Nft,Npt1,tt,NS = inverter2t(M_tilt,min_atemp,max_atemp,p,pt,Ntt,vfn,nf,alt,hum,freq)\n    # # DECISION MAKING CRITERIA",
        "detail": "old.PV_Decision_Making",
        "documentation": {}
    },
    {
        "label": "sunN1",
        "kind": 5,
        "importPath": "old.PV_Decision_Making",
        "description": "old.PV_Decision_Making",
        "peekOfCode": "sunN1 = np.array([sunN,x_temp,max_temp,min_temp,dist,dmax])\n# Compute the demand of the system\nP_tilt,M_tilt = power24(demand,h,froN,Fc)\nif pro == 2:\n    # 4 - PV DESIGN\n    Ntt,pt,p = pv2(area,M_tilt,sunN1,froN)\n    # # 7 - INVERTER AND MPPT DESIGN\n    Nit,Cit,pit,Nt,Ct,ptt,Npit,Nft,Npt1,tt,NS = inverter2t(M_tilt,min_atemp,max_atemp,p,pt,Ntt,vfn,nf,alt,hum,freq)\n    # # DECISION MAKING CRITERIA\n    Nto,Nito,pto,pito,Npito,Nfto,Npt1o,tto,NFTo,NSto,pato,disto,dmaxo = optm2ttopsis(ptt,Nt,Ct,pit,Nit,Cit,froN,sunN1,Npit,Nft,Npt1,tt,NS,pro)",
        "detail": "old.PV_Decision_Making",
        "documentation": {}
    },
    {
        "label": "P_tilt,M_tilt",
        "kind": 5,
        "importPath": "old.PV_Decision_Making",
        "description": "old.PV_Decision_Making",
        "peekOfCode": "P_tilt,M_tilt = power24(demand,h,froN,Fc)\nif pro == 2:\n    # 4 - PV DESIGN\n    Ntt,pt,p = pv2(area,M_tilt,sunN1,froN)\n    # # 7 - INVERTER AND MPPT DESIGN\n    Nit,Cit,pit,Nt,Ct,ptt,Npit,Nft,Npt1,tt,NS = inverter2t(M_tilt,min_atemp,max_atemp,p,pt,Ntt,vfn,nf,alt,hum,freq)\n    # # DECISION MAKING CRITERIA\n    Nto,Nito,pto,pito,Npito,Nfto,Npt1o,tto,NFTo,NSto,pato,disto,dmaxo = optm2ttopsis(ptt,Nt,Ct,pit,Nit,Cit,froN,sunN1,Npit,Nft,Npt1,tt,NS,pro)\n    Nta,Nita,pta,pita,Npita,Nfta,Npt1a,tta,NFTa,NSta,pata,Mta,lta,xta,dista,dmaxa = optm2ta(ptt,Nt,Ct,pit,Nit,Cit,froN,sunN1,Npit,Nft,Npt1,tt,NS)\n    Ntc,Nitc,ptc,pitc,Npitc,Nftc,Npt1c,ttc,NFTc,NStc,patc,distc,dmaxc = optm2tc(ptt,Nt,Ct,pit,Nit,Cit,froN,sunN1,Npit,Nft,Npt1,tt,NS)",
        "detail": "old.PV_Decision_Making",
        "documentation": {}
    },
    {
        "label": "P_tilt",
        "kind": 5,
        "importPath": "old.PV_Decision_Making",
        "description": "old.PV_Decision_Making",
        "peekOfCode": "P_tilt = cor_P(pit,P_tilt)",
        "detail": "old.PV_Decision_Making",
        "documentation": {}
    },
    {
        "label": "pv_inv_string2",
        "kind": 2,
        "importPath": "old.pv_inv_string2",
        "description": "old.pv_inv_string2",
        "peekOfCode": "def pv_inv_string2(pt = None,pta = None,pto = None,ptc = None,sunS = None,pit = None,pita = None,pito = None,pitc = None,froS = None): \n    if pt == 0:\n        St = np.array(['0'])\n    else:\n        St = sunS(pt(1))\n    if pit == 0:\n        Sit = np.array(['0'])\n    else:\n        Sit = froS(pit(1))\n    if pta == 0:",
        "detail": "old.pv_inv_string2",
        "documentation": {}
    },
    {
        "label": "pv_inv_string4",
        "kind": 2,
        "importPath": "old.pv_inv_string4",
        "description": "old.pv_inv_string4",
        "peekOfCode": "def pv_inv_string4(pt = None,pta = None,pto = None,ptc = None,sunS = None,piit = None,piita = None,piitc = None,piito = None,froS = None): \n    if pt == 0:\n        St = np.array(['0'])\n    else:\n        St = sunS(pt(1))\n    if piit == 0:\n        Sit = np.array(['0'])\n    else:\n        l,c = piit.shape\n        for i in np.arange(1,l+1).reshape(-1):",
        "detail": "old.pv_inv_string4",
        "documentation": {}
    },
    {
        "label": "pv_parameters",
        "kind": 2,
        "importPath": "old.pv_parameters",
        "description": "old.pv_parameters",
        "peekOfCode": "def pv_parameters(pro = None): \n    ###########################################################################\n# Prepared by: Gustavo Dill - 25/07/2017\n    # Function show the datasheet parameters of the PV manufacturers\n    # O silicio amorfo � o que apresenta menor coeficiente de varia��o da\n# temperatura e por isto � o mais indicado para o Brasil\n###########################################################################\n    # ocv =  Open Circuit Voltage\n# scc = Short-Circuit Current\n# vmax = M�ximum Voltage at 25�C",
        "detail": "old.pv_parameters",
        "documentation": {}
    },
    {
        "label": "#ncel",
        "kind": 5,
        "importPath": "old.pv_parameters",
        "description": "old.pv_parameters",
        "peekOfCode": "#ncel = number of cells by pv\n# tol = tolerance of the capacity (#)\n# dur = durability (years)\n# tcell = material of the cell [1]-monocristalino, [2]-policristalino,  [3]-thin-film,  [4]-amorfo\n# temp = minimum operational temperature\n#TEMP = maximum operational temperature\n#tier = IEC-61730; IEC-61215; IEC-62804; IEC-61701; IEC-60068;UL-1703;\n#NOCT = Nominal Operating Cell Temperature\n#Inop = max. series fuse rating\n    #       type       no   ocv   scc   vmp   imp     pmp  Vmax      ocvt   otvmp   tcisc  weig  deph  widt  leng  icost     ef  ncel  tol   dur tcell   tier  temp   TEMP  NOCT   Inop   IEC-61730; IEC-61215; IEC-62804; IEC-61701; IEC-60068;UL-1703;",
        "detail": "old.pv_parameters",
        "documentation": {}
    },
    {
        "label": "#TEMP",
        "kind": 5,
        "importPath": "old.pv_parameters",
        "description": "old.pv_parameters",
        "peekOfCode": "#TEMP = maximum operational temperature\n#tier = IEC-61730; IEC-61215; IEC-62804; IEC-61701; IEC-60068;UL-1703;\n#NOCT = Nominal Operating Cell Temperature\n#Inop = max. series fuse rating\n    #       type       no   ocv   scc   vmp   imp     pmp  Vmax      ocvt   otvmp   tcisc  weig  deph  widt  leng  icost     ef  ncel  tol   dur tcell   tier  temp   TEMP  NOCT   Inop   IEC-61730; IEC-61215; IEC-62804; IEC-61701; IEC-60068;UL-1703;\n    jinko = np.array(['Jinko JKMS235P',1,36.9,8.47,29.8,7.89,235.0,1000,- 0.0027,- 0.0045,0.05,18.0,40,990,1636,2.35,14.51,60,3,25,2,6,- 40,85,45,15,'Jinko JKMS240P',2,37.2,8.56,30.0,8.01,240.0,1000,- 0.0027,- 0.0045,0.05,18.0,40,990,1636,2.4,14.82,60,3,25,2,6,- 40,85,45,15,'Jinko JKMS245P',3,37.4,8.69,30.2,8.12,245.0,1000,- 0.0027,- 0.0045,0.05,18.0,40,990,1636,2.45,15.13,60,3,25,2,6,- 40,85,45,15,'Jinko JKMS250P',4,37.6,8.81,30.4,8.23,250.0,1000,- 0.0027,- 0.0045,0.05,18.0,40,990,1636,2.5,15.44,60,3,25,2,6,- 40,85,45,15,'Jinko JKMS255P',5,37.8,8.96,30.6,8.34,255.0,1000,- 0.0027,- 0.0045,0.05,18.0,40,990,1636,2.55,15.74,60,3,25,2,6,- 40,85,45,15,'Jinko JKM260P',6,38.1,8.98,31.1,8.37,260.0,1000,- 0.0031,- 0.0041,0.06,19.0,40,992,1650,2.6,15.88,60,3,25,2,6,- 40,85,45,15,'Jinko JKM265P',7,38.6,9.03,31.4,8.44,265.0,1000,- 0.0031,- 0.0041,0.06,19.0,40,992,1650,2.65,16.19,60,3,25,2,6,- 40,85,45,15,'Jinko JKM270P',8,38.8,9.09,31.7,8.52,270.0,1000,- 0.0031,- 0.0041,0.06,19.0,40,992,1650,2.65,16.5,60,3,25,2,6,- 40,85,45,15,'Jinko JKM295P',10,45.1,8.76,36.2,8.15,295.0,1000,- 0.0031,- 0.0041,0.06,26.5,40,992,1956,2.95,15.2,72,3,25,2,6,- 40,85,45,15,'Jinko JKM300P',11,45.3,8.84,36.6,8.2,300.0,1000,- 0.0031,- 0.0041,0.06,26.5,40,992,1956,3.0,15.46,72,3,25,2,6,- 40,85,45,15,'Jinko JKM305P',12,45.6,8.91,36.8,8.3,305.0,1000,- 0.0031,- 0.0041,0.06,26.5,40,992,1956,3.05,15.72,72,3,25,2,6,- 40,85,45,15,'Jinko JKM310P',13,45.9,8.96,37.0,8.38,310.0,1000,- 0.0031,- 0.0041,0.06,26.5,40,992,1956,3.1,15.98,72,3,25,2,6,- 40,85,45,15,'Jinko JKM315P',14,46.2,9.01,37.2,8.48,315.0,1000,- 0.0031,- 0.0041,0.06,26.5,40,992,1952,3.15,16.23,72,3,25,2,6,- 40,85,45,15])\n    #type                                no   ocv   scc  vmax  imax    pmax  Vmax      ocvt   otvmp   tcisc  weig  deph  widt  leng  icost     ef  ncel  tol   dur   tcell   tier   temp   TEMP   NOCT    Inop\n    canadian = np.array(['Canadian CS6K260P',1,37.5,9.12,30.4,8.56,260.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.6,15.88,60,5,25,2,6,- 40,85,45,15,'Canadian CS6K265P',2,37.7,9.23,30.6,8.66,265.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.64,16.19,60,5,25,2,6,- 40,85,45,15,'Canadian CS6K270P',3,37.9,9.32,30.8,8.75,270.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.69,16.5,60,5,25,2,6,- 40,85,45,15,'Canadian CS6K275P',4,38.0,9.45,31.0,8.88,275.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.75,16.8,60,5,25,2,6,- 40,85,45,15,'Canadian CS6K275M',5,38.3,9.31,31.3,8.8,275.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.75,16.8,60,5,25,1,6,- 40,85,45,15,'Canadian CS6K280M',6,38.5,9.43,31.5,8.89,280.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.8,17.11,60,5,25,1,6,- 40,85,45,15,'Canadian CS6K285M',7,38.6,9.51,31.7,8.98,285.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.85,17.41,60,5,25,1,6,- 40,85,45,15,'Canadian CS6X310P',8,44.9,9.08,36.4,8.52,310.0,1000,- 0.0031,- 0.0041,0.053,22.0,40,982,1954,3.1,16.16,72,5,25,2,6,- 40,85,43,15,'Canadian CS6X315P',9,45.1,9.18,36.6,8.61,315.0,1000,- 0.0031,- 0.0041,0.053,22.0,40,982,1954,3.15,16.42,72,5,25,2,6,- 40,85,43,15,'Canadian CS6X320P',10,45.3,9.26,36.8,8.69,320.0,1000,- 0.0031,- 0.0041,0.053,22.0,40,982,1954,3.2,16.68,72,5,25,2,6,- 40,85,43,15,'Canadian CS6X325P',11,45.5,9.34,37.0,8.78,325.0,1000,- 0.0031,- 0.0041,0.053,22.0,40,982,1954,3.25,16.94,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U325P',12,45.5,9.34,37.0,8.78,325.0,1000,- 0.0031,- 0.0041,0.05,22.4,40,992,1960,3.25,16.72,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U330P',13,45.6,9.45,37.2,8.88,330.0,1000,- 0.0031,- 0.0041,0.05,22.4,40,992,1960,3.3,16.97,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U335P',14,45.8,9.54,37.4,8.96,335.0,1000,- 0.0031,- 0.0041,0.05,22.4,40,992,1960,3.35,17.23,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U340P',15,45.9,9.62,37.6,9.05,340.0,1000,- 0.0029,- 0.0039,0.05,22.4,40,992,1960,3.4,17.49,72,5,25,2,6,- 40,85,43,15,'Canadian CS6X330P-FG',16,45.6,9.45,37.2,8.88,330.0,1000,- 0.0031,- 0.004,0.05,27.5,8.5,971,1971,3.25,16.9,72,5,30,2,6,- 40,85,43,15,'Canadian CS6X335P-FG',17,45.8,9.54,37.4,8.96,335.0,1000,- 0.0031,- 0.004,0.05,27.5,8.5,971,1971,3.25,17.16,72,5,30,2,6,- 40,85,43,15,'Canadian CS6X340P-FG',18,45.9,9.62,37.6,9.05,340.0,1000,- 0.0029,- 0.0039,0.05,27.5,8.5,971,1971,3.25,17.42,72,5,30,2,6,- 40,85,43,15,'Canadian CS6X345P-FG',19,46.0,9.69,37.8,9.13,345.0,1000,- 0.0029,- 0.0039,0.05,27.5,8.5,971,1971,3.25,17.67,72,5,30,2,6,- 40,85,43,15,'Canadian CS6X350P-FG',20,46.2,9.79,38.1,9.21,350.0,1000,- 0.0029,- 0.0039,0.05,27.5,8.5,971,1971,3.25,17.93,72,5,30,2,6,- 40,85,43,15,'Canadian CS6X355P-FG',21,46.4,9.84,38.2,9.3,355.0,1000,- 0.0029,- 0.0039,0.05,27.5,8.5,971,1971,3.25,18.18,72,5,30,2,6,- 40,85,43,15,'Canadian CS6K285P-FG Dymond',22,38.3,9.64,31.4,9.06,285.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,3.25,17.33,60,5,30,2,6,- 40,85,43,15,'Canadian CS6K290P-FG Dymond',23,38.5,9.72,31.6,9.18,290.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,3.25,17.63,60,5,30,2,6,- 40,85,43,15,'Canadian CS6K295P-FG Dymond',24,38.6,9.81,31.8,9.28,295.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,3.25,17.94,60,5,30,2,6,- 40,85,43,15,'Canadian CS6K290MS-FG Dymond',25,39.3,9.67,32.1,9.05,290.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,2.85,17.72,60,5,30,2,6,- 40,85,42,15,'Canadian CS6K295MS-FG Dymond',26,39.5,9.75,32.3,9.14,295.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,2.85,18.02,60,5,30,2,6,- 40,85,42,15,'Canadian CS6K300MS-FG Dymond',27,39.7,9.83,32.5,9.24,300.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,2.85,18.33,60,5,30,2,6,- 40,85,42,15,'Canadian CS6K305MS-FG Dymond',28,39.9,9.91,32.7,9.33,305.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,2.85,18.54,60,5,30,2,6,- 40,85,42,15,'Canadian CS6K295MS-FG All black',29,39.5,9.75,32.3,9.14,295.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,17.72,60,5,25,1,6,- 40,85,43,15,'Canadian CS6K300MS-FG All black',30,39.7,9.83,32.5,9.24,300.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.33,60,5,25,1,6,- 40,85,43,15,'Canadian CS6K305MS-FG All black',31,39.9,9.91,32.7,9.33,305.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.63,60,5,25,1,6,- 40,85,43,15,'Canadian CS6K310MS-FG All black',32,40.1,9.99,32.9,9.43,310.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.94,60,5,25,1,6,- 40,85,43,15,'Canadian CS6K285P',33,38.3,9.64,31.4,9.06,285.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,17.41,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K290P',34,38.5,9.72,31.6,9.18,290.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,17.72,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K295P',35,38.6,9.81,31.8,9.28,295.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.02,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K300P',36,38.8,9.92,32.0,9.38,300.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.33,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K305P',37,38.9,10.03,32.1,9.5,305.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.63,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K280P',38,38.2,9.52,31.3,8.95,280.0,1000,- 0.0031,- 0.004,0.05,18.2,35,992,1650,2.85,17.11,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K300MS Superpower',39,39.7,9.83,32.5,9.24,300.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.33,60,5,25,2,6,- 40,85,42,15,'Canadian CS6K305MS Superpower',40,39.9,9.91,32.7,9.33,305.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.63,60,5,25,2,6,- 40,85,42,15,'Canadian CS6K310MS Superpower',41,40.1,9.99,32.9,9.43,310.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.94,60,5,25,2,6,- 40,85,42,15,'Canadian CS6K315MS Superpower',42,40.3,10.07,33.1,9.52,315.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,19.24,60,5,25,2,6,- 40,85,42,15,'Canadian CS6U345P',43,46.0,9.69,37.8,9.13,345.0,1000,- 0.0029,- 0.0039,0.05,22.4,35,992,1960,3.4,17.74,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U350P',44,46.2,9.79,38.1,9.21,350.0,1000,- 0.0029,- 0.0039,0.05,22.4,35,992,1960,3.4,18.0,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U355P',45,46.4,9.84,38.2,9.3,355.0,1000,- 0.0029,- 0.0039,0.05,22.4,35,992,1960,3.4,18.26,72,5,25,2,6,- 40,85,43,15,'Canadian CS3U355P',46,46.8,9.59,39.4,9.02,355.0,1000,- 0.0029,- 0.0037,0.05,22.4,35,992,2000,3.4,17.89,144,5,25,2,6,- 40,85,42,15,'Canadian CS3U360P',47,47.0,9.67,39.6,9.1,360.0,1000,- 0.0029,- 0.0037,0.05,22.4,35,992,2000,3.4,18.15,144,5,25,2,6,- 40,85,42,15,'Canadian CS3U365P',48,47.2,9.75,39.8,9.18,365.0,1000,- 0.0029,- 0.0037,0.05,22.4,35,992,2000,3.4,18.4,144,5,25,2,6,- 40,85,42,15,'Canadian CS3U370P',49,47.4,9.83,40.0,9.26,365.0,1000,- 0.0029,- 0.0037,0.05,22.4,35,992,2000,3.4,18.65,144,5,25,2,6,- 40,85,42,15,'Canadian CS3U335P',50,45.7,9.28,38.2,8.77,335.0,1000,- 0.0031,- 0.0038,0.05,22.4,35,992,2000,3.4,16.89,144,5,25,2,6,- 40,85,43,15,'Canadian CS3U340P',51,45.9,9.36,38.4,8.86,340.0,1000,- 0.0031,- 0.0038,0.05,22.4,35,992,2000,3.4,17.14,144,5,25,2,6,- 40,85,43,15,'Canadian CS3U345P',52,46.1,9.44,38.6,8.94,345.0,1000,- 0.0031,- 0.0038,0.05,22.4,35,992,2000,3.4,17.39,144,5,25,2,6,- 40,85,43,15,'Canadian CS3U350P',53,46.6,9.51,39.2,8.94,350.0,1000,- 0.0031,- 0.0038,0.05,22.4,35,992,2000,3.4,17.64,144,5,25,2,6,- 40,85,43,15,'Canadian CS3U375MS',54,47.6,9.93,39.8,9.43,375.0,1000,- 0.0029,- 0.0036,0.05,22.5,35,992,2000,3.4,18.9,144,5,25,1,6,- 40,85,42,15,'Canadian CS3U380MS',55,47.8,10.01,40.0,9.5,380.0,1000,- 0.0029,- 0.0036,0.05,22.5,35,992,2000,3.4,19.15,144,5,25,1,6,- 40,85,42,15,'Canadian CS3U385MS',56,48.0,10.09,40.2,9.58,385.0,1000,- 0.0029,- 0.0036,0.05,22.5,35,992,2000,3.4,19.41,144,5,25,1,6,- 40,85,42,15,'Canadian CS3U390MS',57,48.2,10.17,40.4,9.66,390.0,1000,- 0.0029,- 0.0036,0.05,22.5,35,992,2000,3.4,19.66,144,5,25,1,6,- 40,85,42,15,'Canadian CS3U395MS',58,48.4,10.25,40.6,9.73,395.0,1000,- 0.0029,- 0.0036,0.05,22.5,35,992,2000,3.4,19.91,144,5,25,1,6,- 40,85,42,15,'Canadian CS3K295P',59,39.1,9.57,32.5,9.08,295.0,1000,- 0.0029,- 0.0037,0.05,18.5,35,992,1675,3.4,17.75,120,5,25,2,6,- 40,85,42,30,'Canadian CS3K300P',60,39.3,9.65,32.7,9.18,300.0,1000,- 0.0029,- 0.0037,0.05,18.5,35,992,1675,3.4,18.05,120,5,25,2,6,- 40,85,42,30,'Canadian CS3K305P',61,39.5,9.73,32.9,9.28,305.0,1000,- 0.0029,- 0.0037,0.05,18.5,35,992,1675,3.4,18.36,120,5,25,2,6,- 40,85,42,30,'Canadian CS3K310P',62,39.7,9.81,33.1,9.37,310.0,1000,- 0.0029,- 0.0037,0.05,18.5,35,992,1675,3.4,18.66,120,5,25,2,6,- 40,85,42,30,'Canadian CS3K275P',63,37.7,9.38,31.0,8.88,275.0,1000,- 0.0031,- 0.0038,0.05,18.5,35,992,1675,3.4,16.65,120,5,25,2,6,- 40,85,43,30,'Canadian CS3K280P',64,37.9,9.47,31.2,8.98,280.0,1000,- 0.0031,- 0.0038,0.05,18.5,35,992,1675,3.4,16.85,120,5,25,2,6,- 40,85,43,30,'Canadian CS3K285P',65,38.1,9.56,31.4,9.08,285.0,1000,- 0.0031,- 0.0038,0.05,18.5,35,992,1675,3.4,17.15,120,5,25,2,6,- 40,85,43,30,'Canadian CS3K290P',66,38.9,9.49,32.3,8.98,290.0,1000,- 0.0031,- 0.0038,0.05,18.5,35,992,1675,3.4,17.45,120,5,25,2,6,- 40,85,43,30,'Canadian CS3K295P',67,38.9,9.49,32.3,8.98,290.0,1000,- 0.0031,- 0.0038,0.05,18.5,35,992,1675,3.4,17.45,120,5,25,2,6,- 40,85,43,30,'Canadian CS3K315MS',68,39.9,10.06,31.1,9.52,315.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,18.96,120,5,25,1,6,- 40,85,42,30,'Canadian CS3K320MS',69,40.1,10.14,33.3,9.61,320.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,19.26,120,5,25,1,6,- 40,85,42,30,'Canadian CS3K325MS',70,40.3,10.22,33.5,9.71,325.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,19.56,120,5,25,1,6,- 40,85,42,30,'Canadian CS3K330MS',71,40.5,10.3,33.7,9.8,330.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,19.86,120,5,25,1,6,- 40,85,42,30,'Canadian CS3K295MS',72,39.1,9.73,32.3,9.14,295.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,17.75,120,5,25,1,6,- 40,85,43,30,'Canadian CS3K300MS',73,39.3,9.82,32.5,9.24,300.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,18.05,120,5,25,1,6,- 40,85,43,30,'Canadian CS3K305MS',74,39.5,9.9,32.7,9.33,305.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,18.36,120,5,25,1,6,- 40,85,43,30,'Canadian CS3K310MS',75,39.7,9.98,32.9,9.43,310.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,18.66,120,5,25,1,6,- 40,85,43,30,'Canadian CS3U355P-FG Dymond',76,46.8,9.59,39.4,9.02,355.0,1000,- 0.0029,- 0.0037,0.05,29.0,8.5,995,2003,3.4,17.89,144,5,30,2,6,- 40,85,42,30,'Canadian CS3U360P-FG Dymond',77,47.0,9.67,39.6,9.1,360.0,1000,- 0.0029,- 0.0037,0.05,29.0,8.5,995,2003,3.4,18.15,144,5,30,2,6,- 40,85,42,30,'Canadian CS3U365P-FG Dymond',78,47.2,9.75,39.8,9.18,365.0,1000,- 0.0029,- 0.0037,0.05,29.0,8.5,995,2003,3.4,18.4,144,5,30,2,6,- 40,85,42,30,'Canadian CS3U370P-FG Dymond',79,47.4,9.83,40.0,9.26,370.0,1000,- 0.0029,- 0.0037,0.05,29.0,8.5,995,2003,3.4,18.65,144,5,30,2,6,- 40,85,42,30,'Canadian CS3U335P-FG Dymond',80,45.7,9.28,38.2,8.77,335.0,1000,- 0.0031,- 0.0038,0.05,29.0,8.5,995,2003,3.4,16.89,144,5,30,2,6,- 40,85,43,30,'Canadian CS3U340P-FG Dymond',81,45.9,9.36,38.4,8.86,340.0,1000,- 0.0031,- 0.0038,0.05,29.0,8.5,995,2003,3.4,17.14,144,5,30,2,6,- 40,85,43,30,'Canadian CS3U345P-FG Dymond',82,46.1,9.44,38.6,8.94,345.0,1000,- 0.0031,- 0.0038,0.05,29.0,8.5,995,2003,3.4,17.39,144,5,30,2,6,- 40,85,43,30,'Canadian CS3U350P-FG Dymond',83,46.6,9.51,39.2,8.94,350.0,1000,- 0.0031,- 0.0038,0.05,29.0,8.5,995,2003,3.4,17.64,144,5,30,2,6,- 40,85,43,30,'Canadian CS3U375MS-FG Dymond',84,47.6,9.93,39.8,9.43,375.0,1000,- 0.0029,- 0.0036,0.05,29.0,8.5,995,2003,3.4,18.9,144,5,30,1,6,- 40,85,42,30,'Canadian CS3U380MS-FG Dymond',85,47.8,10.01,40.0,9.5,380.0,1000,- 0.0029,- 0.0036,0.05,29.0,8.5,995,2003,3.4,19.15,144,5,30,1,6,- 40,85,42,30,'Canadian CS3U385MS-FG Dymond',86,48.0,10.09,40.2,9.58,385.0,1000,- 0.0029,- 0.0036,0.05,29.0,8.5,995,2003,3.4,19.41,144,5,30,1,6,- 40,85,42,30,'Canadian CS3U390MS-FG Dymond',87,48.2,10.17,40.4,9.66,390.0,1000,- 0.0029,- 0.0036,0.05,29.0,8.5,995,2003,3.4,19.66,144,5,30,1,6,- 40,85,42,30,'Canadian CS3U395MS-FG Dymond',88,48.4,10.25,40.6,9.73,395.0,1000,- 0.0029,- 0.0036,0.05,29.0,8.5,995,2003,3.4,19.91,144,5,30,1,6,- 40,85,42,30,'Canadian CS3K295MS-FG Dymond',89,39.1,9.57,32.5,9.08,295.0,1000,- 0.0029,- 0.0037,0.05,24.0,8.5,995,1678,3.4,17.75,120,5,30,2,6,- 40,85,43,30,'Canadian CS3K300MS-FG Dymond',90,39.3,9.65,32.7,9.18,300.0,1000,- 0.0029,- 0.0037,0.05,24.0,8.5,995,1678,3.4,18.05,120,5,30,2,6,- 40,85,43,30,'Canadian CS3K305MS-FG Dymond',91,39.5,9.73,32.9,9.28,305.0,1000,- 0.0029,- 0.0037,0.05,24.0,8.5,995,1678,3.4,18.36,120,5,30,2,6,- 40,85,43,30,'Canadian CS3K310MS-FG Dymond',92,39.7,9.81,33.1,9.37,310.0,1000,- 0.0029,- 0.0037,0.05,24.0,8.5,995,1678,3.4,18.66,120,5,30,2,6,- 40,85,43,30,'Canadian CS3K275P-FG Dymond',93,37.7,9.38,31.0,8.88,275.0,1000,- 0.0031,- 0.0038,0.05,24.0,8.5,995,1678,3.4,16.55,120,5,30,2,6,- 40,85,42,30,'Canadian CS3K280P-FG Dymond',94,37.9,9.47,31.2,8.98,280.0,1000,- 0.0031,- 0.0038,0.05,24.0,8.5,995,1678,3.4,16.85,120,5,30,2,6,- 40,85,42,30,'Canadian CS3K285P-FG Dymond',95,38.1,9.56,31.4,9.08,285.0,1000,- 0.0031,- 0.0038,0.05,24.0,8.5,995,1678,3.4,17.15,120,5,30,2,6,- 40,85,42,30,'Canadian CS3K290P-FG Dymond',96,38.9,9.49,32.3,8.98,290.0,1000,- 0.0031,- 0.0038,0.05,24.0,8.5,995,1678,3.4,17.45,120,5,30,2,6,- 40,85,42,30,'Canadian CS3K315MS-FG Dymond',97,39.9,10.06,33.1,9.52,315.0,1000,- 0.0029,- 0.0036,0.05,24.0,8.5,995,1678,3.4,18.96,120,5,30,1,6,- 40,85,42,30,'Canadian CS3K320MS-FG Dymond',98,40.1,10.14,33.3,9.61,320.0,1000,- 0.0029,- 0.0036,0.05,24.0,8.5,995,1678,3.4,19.26,120,5,30,1,6,- 40,85,42,30,'Canadian CS3K325MS-FG Dymond',99,40.3,10.22,33.5,9.71,325.0,1000,- 0.0029,- 0.0036,0.05,24.0,8.5,995,1678,3.4,19.56,120,5,30,1,6,- 40,85,42,30,'Canadian CS3K330MS-FG Dymond',100,40.5,10.3,33.7,9.8,330.0,1000,- 0.0029,- 0.0036,0.05,24.0,8.5,995,1678,3.4,19.86,120,5,30,1,6,- 40,85,42,30])\n    #      type            no   ocv   scc  vmax  imax    pmax  Vmax      ocvt    otvmp tcisc   weig  deph  widt  leng  icost     ef  ncel  tol   dur   tcell   tier   temp   TEMP   NOCT    Inop\n    yingli = np.array(['Yingli YL260C-30b',1,38.1,9.35,29.7,8.74,260.0,1000,- 0.003,- 0.004,0.04,18.5,40,990,1640,2.6,16.0,60,5,25,1,5,- 40,85,46,15,'Yingli YL265C-30b',2,38.3,9.37,30.1,8.79,265.0,1000,- 0.003,- 0.004,0.04,18.5,40,990,1640,2.65,16.13,60,5,25,1,5,- 40,85,46,15,'Yingli YL270C-30b',3,38.6,9.43,30.5,8.85,270.0,1000,- 0.003,- 0.004,0.04,18.5,40,990,1640,2.7,16.6,60,5,25,1,5,- 40,85,46,15,'Yingli YL275C-30b',4,38.8,9.47,30.9,8.91,275.0,1000,- 0.003,- 0.004,0.04,18.5,40,990,1644,2.75,16.9,60,5,25,1,5,- 40,85,46,15,'Yingli YL280C-30b',5,39.1,9.5,31.3,8.96,280.0,1000,- 0.003,- 0.004,0.04,18.5,40,990,1640,2.8,17.2,60,5,25,1,5,- 40,85,46,15,'Yingli YLM275D-30b',6,38.9,9.34,31.2,8.82,275.0,1000,- 0.0032,- 0.0042,0.05,18.5,35,990,1640,2.75,16.9,60,5,25,1,5,- 40,85,46,15,'Yingli YLM280D-30b',7,39.3,9.38,31.4,8.91,280.0,1000,- 0.0032,- 0.0042,0.05,18.5,35,990,1640,2.8,17.2,60,5,25,1,5,- 40,85,46,15,'Yingli YLM285D-30b',8,39.6,9.41,31.7,9.0,285.0,1000,- 0.0032,- 0.0042,0.05,18.5,35,990,1640,2.85,17.6,60,5,25,1,5,- 40,85,46,15,'Yingli YLM290D-30b',9,39.9,9.45,31.9,9.08,290.0,1000,- 0.0032,- 0.0042,0.05,18.5,35,990,1640,2.9,17.9,60,5,25,1,5,- 40,85,46,15,'Yingli YL310P-35b',10,45.6,8.99,36.3,8.53,310.0,1000,- 0.0032,- 0.0042,0.05,25.5,40,990,1960,3.1,16.0,72,5,25,2,5,- 40,85,46,15,'Yingli YL315P-35b',11,45.7,9.12,36.8,8.56,315.0,1000,- 0.0032,- 0.0042,0.05,25.5,40,990,1960,3.1,16.2,72,5,25,2,5,- 40,85,46,15,'Yingli YL320P-35b',12,46.0,9.18,37.0,8.64,320.0,1000,- 0.0032,- 0.0042,0.05,25.5,40,990,1960,3.1,16.5,72,5,25,2,5,- 40,85,46,15,'Yingli YL325P-35b',13,46.3,9.24,37.3,8.72,325.0,1000,- 0.0032,- 0.0042,0.05,25.5,40,990,1960,3.1,16.7,72,5,25,2,5,- 40,85,46,15,'Yingli YL330P-35b',14,46.4,9.29,37.4,8.84,330.0,1000,- 0.0032,- 0.0042,0.05,25.5,40,990,1960,3.1,17.0,72,5,25,2,5,- 40,85,46,15,'Yingli YL335P-35b',15,46.7,9.34,37.6,8.91,335.0,1000,- 0.0032,- 0.0042,0.05,25.5,40,990,1960,3.1,17.3,72,5,25,2,5,- 40,85,46,15])",
        "detail": "old.pv_parameters",
        "documentation": {}
    },
    {
        "label": "#tier",
        "kind": 5,
        "importPath": "old.pv_parameters",
        "description": "old.pv_parameters",
        "peekOfCode": "#tier = IEC-61730; IEC-61215; IEC-62804; IEC-61701; IEC-60068;UL-1703;\n#NOCT = Nominal Operating Cell Temperature\n#Inop = max. series fuse rating\n    #       type       no   ocv   scc   vmp   imp     pmp  Vmax      ocvt   otvmp   tcisc  weig  deph  widt  leng  icost     ef  ncel  tol   dur tcell   tier  temp   TEMP  NOCT   Inop   IEC-61730; IEC-61215; IEC-62804; IEC-61701; IEC-60068;UL-1703;\n    jinko = np.array(['Jinko JKMS235P',1,36.9,8.47,29.8,7.89,235.0,1000,- 0.0027,- 0.0045,0.05,18.0,40,990,1636,2.35,14.51,60,3,25,2,6,- 40,85,45,15,'Jinko JKMS240P',2,37.2,8.56,30.0,8.01,240.0,1000,- 0.0027,- 0.0045,0.05,18.0,40,990,1636,2.4,14.82,60,3,25,2,6,- 40,85,45,15,'Jinko JKMS245P',3,37.4,8.69,30.2,8.12,245.0,1000,- 0.0027,- 0.0045,0.05,18.0,40,990,1636,2.45,15.13,60,3,25,2,6,- 40,85,45,15,'Jinko JKMS250P',4,37.6,8.81,30.4,8.23,250.0,1000,- 0.0027,- 0.0045,0.05,18.0,40,990,1636,2.5,15.44,60,3,25,2,6,- 40,85,45,15,'Jinko JKMS255P',5,37.8,8.96,30.6,8.34,255.0,1000,- 0.0027,- 0.0045,0.05,18.0,40,990,1636,2.55,15.74,60,3,25,2,6,- 40,85,45,15,'Jinko JKM260P',6,38.1,8.98,31.1,8.37,260.0,1000,- 0.0031,- 0.0041,0.06,19.0,40,992,1650,2.6,15.88,60,3,25,2,6,- 40,85,45,15,'Jinko JKM265P',7,38.6,9.03,31.4,8.44,265.0,1000,- 0.0031,- 0.0041,0.06,19.0,40,992,1650,2.65,16.19,60,3,25,2,6,- 40,85,45,15,'Jinko JKM270P',8,38.8,9.09,31.7,8.52,270.0,1000,- 0.0031,- 0.0041,0.06,19.0,40,992,1650,2.65,16.5,60,3,25,2,6,- 40,85,45,15,'Jinko JKM295P',10,45.1,8.76,36.2,8.15,295.0,1000,- 0.0031,- 0.0041,0.06,26.5,40,992,1956,2.95,15.2,72,3,25,2,6,- 40,85,45,15,'Jinko JKM300P',11,45.3,8.84,36.6,8.2,300.0,1000,- 0.0031,- 0.0041,0.06,26.5,40,992,1956,3.0,15.46,72,3,25,2,6,- 40,85,45,15,'Jinko JKM305P',12,45.6,8.91,36.8,8.3,305.0,1000,- 0.0031,- 0.0041,0.06,26.5,40,992,1956,3.05,15.72,72,3,25,2,6,- 40,85,45,15,'Jinko JKM310P',13,45.9,8.96,37.0,8.38,310.0,1000,- 0.0031,- 0.0041,0.06,26.5,40,992,1956,3.1,15.98,72,3,25,2,6,- 40,85,45,15,'Jinko JKM315P',14,46.2,9.01,37.2,8.48,315.0,1000,- 0.0031,- 0.0041,0.06,26.5,40,992,1952,3.15,16.23,72,3,25,2,6,- 40,85,45,15])\n    #type                                no   ocv   scc  vmax  imax    pmax  Vmax      ocvt   otvmp   tcisc  weig  deph  widt  leng  icost     ef  ncel  tol   dur   tcell   tier   temp   TEMP   NOCT    Inop\n    canadian = np.array(['Canadian CS6K260P',1,37.5,9.12,30.4,8.56,260.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.6,15.88,60,5,25,2,6,- 40,85,45,15,'Canadian CS6K265P',2,37.7,9.23,30.6,8.66,265.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.64,16.19,60,5,25,2,6,- 40,85,45,15,'Canadian CS6K270P',3,37.9,9.32,30.8,8.75,270.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.69,16.5,60,5,25,2,6,- 40,85,45,15,'Canadian CS6K275P',4,38.0,9.45,31.0,8.88,275.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.75,16.8,60,5,25,2,6,- 40,85,45,15,'Canadian CS6K275M',5,38.3,9.31,31.3,8.8,275.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.75,16.8,60,5,25,1,6,- 40,85,45,15,'Canadian CS6K280M',6,38.5,9.43,31.5,8.89,280.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.8,17.11,60,5,25,1,6,- 40,85,45,15,'Canadian CS6K285M',7,38.6,9.51,31.7,8.98,285.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.85,17.41,60,5,25,1,6,- 40,85,45,15,'Canadian CS6X310P',8,44.9,9.08,36.4,8.52,310.0,1000,- 0.0031,- 0.0041,0.053,22.0,40,982,1954,3.1,16.16,72,5,25,2,6,- 40,85,43,15,'Canadian CS6X315P',9,45.1,9.18,36.6,8.61,315.0,1000,- 0.0031,- 0.0041,0.053,22.0,40,982,1954,3.15,16.42,72,5,25,2,6,- 40,85,43,15,'Canadian CS6X320P',10,45.3,9.26,36.8,8.69,320.0,1000,- 0.0031,- 0.0041,0.053,22.0,40,982,1954,3.2,16.68,72,5,25,2,6,- 40,85,43,15,'Canadian CS6X325P',11,45.5,9.34,37.0,8.78,325.0,1000,- 0.0031,- 0.0041,0.053,22.0,40,982,1954,3.25,16.94,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U325P',12,45.5,9.34,37.0,8.78,325.0,1000,- 0.0031,- 0.0041,0.05,22.4,40,992,1960,3.25,16.72,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U330P',13,45.6,9.45,37.2,8.88,330.0,1000,- 0.0031,- 0.0041,0.05,22.4,40,992,1960,3.3,16.97,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U335P',14,45.8,9.54,37.4,8.96,335.0,1000,- 0.0031,- 0.0041,0.05,22.4,40,992,1960,3.35,17.23,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U340P',15,45.9,9.62,37.6,9.05,340.0,1000,- 0.0029,- 0.0039,0.05,22.4,40,992,1960,3.4,17.49,72,5,25,2,6,- 40,85,43,15,'Canadian CS6X330P-FG',16,45.6,9.45,37.2,8.88,330.0,1000,- 0.0031,- 0.004,0.05,27.5,8.5,971,1971,3.25,16.9,72,5,30,2,6,- 40,85,43,15,'Canadian CS6X335P-FG',17,45.8,9.54,37.4,8.96,335.0,1000,- 0.0031,- 0.004,0.05,27.5,8.5,971,1971,3.25,17.16,72,5,30,2,6,- 40,85,43,15,'Canadian CS6X340P-FG',18,45.9,9.62,37.6,9.05,340.0,1000,- 0.0029,- 0.0039,0.05,27.5,8.5,971,1971,3.25,17.42,72,5,30,2,6,- 40,85,43,15,'Canadian CS6X345P-FG',19,46.0,9.69,37.8,9.13,345.0,1000,- 0.0029,- 0.0039,0.05,27.5,8.5,971,1971,3.25,17.67,72,5,30,2,6,- 40,85,43,15,'Canadian CS6X350P-FG',20,46.2,9.79,38.1,9.21,350.0,1000,- 0.0029,- 0.0039,0.05,27.5,8.5,971,1971,3.25,17.93,72,5,30,2,6,- 40,85,43,15,'Canadian CS6X355P-FG',21,46.4,9.84,38.2,9.3,355.0,1000,- 0.0029,- 0.0039,0.05,27.5,8.5,971,1971,3.25,18.18,72,5,30,2,6,- 40,85,43,15,'Canadian CS6K285P-FG Dymond',22,38.3,9.64,31.4,9.06,285.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,3.25,17.33,60,5,30,2,6,- 40,85,43,15,'Canadian CS6K290P-FG Dymond',23,38.5,9.72,31.6,9.18,290.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,3.25,17.63,60,5,30,2,6,- 40,85,43,15,'Canadian CS6K295P-FG Dymond',24,38.6,9.81,31.8,9.28,295.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,3.25,17.94,60,5,30,2,6,- 40,85,43,15,'Canadian CS6K290MS-FG Dymond',25,39.3,9.67,32.1,9.05,290.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,2.85,17.72,60,5,30,2,6,- 40,85,42,15,'Canadian CS6K295MS-FG Dymond',26,39.5,9.75,32.3,9.14,295.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,2.85,18.02,60,5,30,2,6,- 40,85,42,15,'Canadian CS6K300MS-FG Dymond',27,39.7,9.83,32.5,9.24,300.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,2.85,18.33,60,5,30,2,6,- 40,85,42,15,'Canadian CS6K305MS-FG Dymond',28,39.9,9.91,32.7,9.33,305.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,2.85,18.54,60,5,30,2,6,- 40,85,42,15,'Canadian CS6K295MS-FG All black',29,39.5,9.75,32.3,9.14,295.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,17.72,60,5,25,1,6,- 40,85,43,15,'Canadian CS6K300MS-FG All black',30,39.7,9.83,32.5,9.24,300.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.33,60,5,25,1,6,- 40,85,43,15,'Canadian CS6K305MS-FG All black',31,39.9,9.91,32.7,9.33,305.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.63,60,5,25,1,6,- 40,85,43,15,'Canadian CS6K310MS-FG All black',32,40.1,9.99,32.9,9.43,310.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.94,60,5,25,1,6,- 40,85,43,15,'Canadian CS6K285P',33,38.3,9.64,31.4,9.06,285.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,17.41,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K290P',34,38.5,9.72,31.6,9.18,290.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,17.72,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K295P',35,38.6,9.81,31.8,9.28,295.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.02,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K300P',36,38.8,9.92,32.0,9.38,300.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.33,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K305P',37,38.9,10.03,32.1,9.5,305.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.63,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K280P',38,38.2,9.52,31.3,8.95,280.0,1000,- 0.0031,- 0.004,0.05,18.2,35,992,1650,2.85,17.11,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K300MS Superpower',39,39.7,9.83,32.5,9.24,300.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.33,60,5,25,2,6,- 40,85,42,15,'Canadian CS6K305MS Superpower',40,39.9,9.91,32.7,9.33,305.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.63,60,5,25,2,6,- 40,85,42,15,'Canadian CS6K310MS Superpower',41,40.1,9.99,32.9,9.43,310.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.94,60,5,25,2,6,- 40,85,42,15,'Canadian CS6K315MS Superpower',42,40.3,10.07,33.1,9.52,315.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,19.24,60,5,25,2,6,- 40,85,42,15,'Canadian CS6U345P',43,46.0,9.69,37.8,9.13,345.0,1000,- 0.0029,- 0.0039,0.05,22.4,35,992,1960,3.4,17.74,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U350P',44,46.2,9.79,38.1,9.21,350.0,1000,- 0.0029,- 0.0039,0.05,22.4,35,992,1960,3.4,18.0,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U355P',45,46.4,9.84,38.2,9.3,355.0,1000,- 0.0029,- 0.0039,0.05,22.4,35,992,1960,3.4,18.26,72,5,25,2,6,- 40,85,43,15,'Canadian CS3U355P',46,46.8,9.59,39.4,9.02,355.0,1000,- 0.0029,- 0.0037,0.05,22.4,35,992,2000,3.4,17.89,144,5,25,2,6,- 40,85,42,15,'Canadian CS3U360P',47,47.0,9.67,39.6,9.1,360.0,1000,- 0.0029,- 0.0037,0.05,22.4,35,992,2000,3.4,18.15,144,5,25,2,6,- 40,85,42,15,'Canadian CS3U365P',48,47.2,9.75,39.8,9.18,365.0,1000,- 0.0029,- 0.0037,0.05,22.4,35,992,2000,3.4,18.4,144,5,25,2,6,- 40,85,42,15,'Canadian CS3U370P',49,47.4,9.83,40.0,9.26,365.0,1000,- 0.0029,- 0.0037,0.05,22.4,35,992,2000,3.4,18.65,144,5,25,2,6,- 40,85,42,15,'Canadian CS3U335P',50,45.7,9.28,38.2,8.77,335.0,1000,- 0.0031,- 0.0038,0.05,22.4,35,992,2000,3.4,16.89,144,5,25,2,6,- 40,85,43,15,'Canadian CS3U340P',51,45.9,9.36,38.4,8.86,340.0,1000,- 0.0031,- 0.0038,0.05,22.4,35,992,2000,3.4,17.14,144,5,25,2,6,- 40,85,43,15,'Canadian CS3U345P',52,46.1,9.44,38.6,8.94,345.0,1000,- 0.0031,- 0.0038,0.05,22.4,35,992,2000,3.4,17.39,144,5,25,2,6,- 40,85,43,15,'Canadian CS3U350P',53,46.6,9.51,39.2,8.94,350.0,1000,- 0.0031,- 0.0038,0.05,22.4,35,992,2000,3.4,17.64,144,5,25,2,6,- 40,85,43,15,'Canadian CS3U375MS',54,47.6,9.93,39.8,9.43,375.0,1000,- 0.0029,- 0.0036,0.05,22.5,35,992,2000,3.4,18.9,144,5,25,1,6,- 40,85,42,15,'Canadian CS3U380MS',55,47.8,10.01,40.0,9.5,380.0,1000,- 0.0029,- 0.0036,0.05,22.5,35,992,2000,3.4,19.15,144,5,25,1,6,- 40,85,42,15,'Canadian CS3U385MS',56,48.0,10.09,40.2,9.58,385.0,1000,- 0.0029,- 0.0036,0.05,22.5,35,992,2000,3.4,19.41,144,5,25,1,6,- 40,85,42,15,'Canadian CS3U390MS',57,48.2,10.17,40.4,9.66,390.0,1000,- 0.0029,- 0.0036,0.05,22.5,35,992,2000,3.4,19.66,144,5,25,1,6,- 40,85,42,15,'Canadian CS3U395MS',58,48.4,10.25,40.6,9.73,395.0,1000,- 0.0029,- 0.0036,0.05,22.5,35,992,2000,3.4,19.91,144,5,25,1,6,- 40,85,42,15,'Canadian CS3K295P',59,39.1,9.57,32.5,9.08,295.0,1000,- 0.0029,- 0.0037,0.05,18.5,35,992,1675,3.4,17.75,120,5,25,2,6,- 40,85,42,30,'Canadian CS3K300P',60,39.3,9.65,32.7,9.18,300.0,1000,- 0.0029,- 0.0037,0.05,18.5,35,992,1675,3.4,18.05,120,5,25,2,6,- 40,85,42,30,'Canadian CS3K305P',61,39.5,9.73,32.9,9.28,305.0,1000,- 0.0029,- 0.0037,0.05,18.5,35,992,1675,3.4,18.36,120,5,25,2,6,- 40,85,42,30,'Canadian CS3K310P',62,39.7,9.81,33.1,9.37,310.0,1000,- 0.0029,- 0.0037,0.05,18.5,35,992,1675,3.4,18.66,120,5,25,2,6,- 40,85,42,30,'Canadian CS3K275P',63,37.7,9.38,31.0,8.88,275.0,1000,- 0.0031,- 0.0038,0.05,18.5,35,992,1675,3.4,16.65,120,5,25,2,6,- 40,85,43,30,'Canadian CS3K280P',64,37.9,9.47,31.2,8.98,280.0,1000,- 0.0031,- 0.0038,0.05,18.5,35,992,1675,3.4,16.85,120,5,25,2,6,- 40,85,43,30,'Canadian CS3K285P',65,38.1,9.56,31.4,9.08,285.0,1000,- 0.0031,- 0.0038,0.05,18.5,35,992,1675,3.4,17.15,120,5,25,2,6,- 40,85,43,30,'Canadian CS3K290P',66,38.9,9.49,32.3,8.98,290.0,1000,- 0.0031,- 0.0038,0.05,18.5,35,992,1675,3.4,17.45,120,5,25,2,6,- 40,85,43,30,'Canadian CS3K295P',67,38.9,9.49,32.3,8.98,290.0,1000,- 0.0031,- 0.0038,0.05,18.5,35,992,1675,3.4,17.45,120,5,25,2,6,- 40,85,43,30,'Canadian CS3K315MS',68,39.9,10.06,31.1,9.52,315.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,18.96,120,5,25,1,6,- 40,85,42,30,'Canadian CS3K320MS',69,40.1,10.14,33.3,9.61,320.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,19.26,120,5,25,1,6,- 40,85,42,30,'Canadian CS3K325MS',70,40.3,10.22,33.5,9.71,325.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,19.56,120,5,25,1,6,- 40,85,42,30,'Canadian CS3K330MS',71,40.5,10.3,33.7,9.8,330.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,19.86,120,5,25,1,6,- 40,85,42,30,'Canadian CS3K295MS',72,39.1,9.73,32.3,9.14,295.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,17.75,120,5,25,1,6,- 40,85,43,30,'Canadian CS3K300MS',73,39.3,9.82,32.5,9.24,300.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,18.05,120,5,25,1,6,- 40,85,43,30,'Canadian CS3K305MS',74,39.5,9.9,32.7,9.33,305.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,18.36,120,5,25,1,6,- 40,85,43,30,'Canadian CS3K310MS',75,39.7,9.98,32.9,9.43,310.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,18.66,120,5,25,1,6,- 40,85,43,30,'Canadian CS3U355P-FG Dymond',76,46.8,9.59,39.4,9.02,355.0,1000,- 0.0029,- 0.0037,0.05,29.0,8.5,995,2003,3.4,17.89,144,5,30,2,6,- 40,85,42,30,'Canadian CS3U360P-FG Dymond',77,47.0,9.67,39.6,9.1,360.0,1000,- 0.0029,- 0.0037,0.05,29.0,8.5,995,2003,3.4,18.15,144,5,30,2,6,- 40,85,42,30,'Canadian CS3U365P-FG Dymond',78,47.2,9.75,39.8,9.18,365.0,1000,- 0.0029,- 0.0037,0.05,29.0,8.5,995,2003,3.4,18.4,144,5,30,2,6,- 40,85,42,30,'Canadian CS3U370P-FG Dymond',79,47.4,9.83,40.0,9.26,370.0,1000,- 0.0029,- 0.0037,0.05,29.0,8.5,995,2003,3.4,18.65,144,5,30,2,6,- 40,85,42,30,'Canadian CS3U335P-FG Dymond',80,45.7,9.28,38.2,8.77,335.0,1000,- 0.0031,- 0.0038,0.05,29.0,8.5,995,2003,3.4,16.89,144,5,30,2,6,- 40,85,43,30,'Canadian CS3U340P-FG Dymond',81,45.9,9.36,38.4,8.86,340.0,1000,- 0.0031,- 0.0038,0.05,29.0,8.5,995,2003,3.4,17.14,144,5,30,2,6,- 40,85,43,30,'Canadian CS3U345P-FG Dymond',82,46.1,9.44,38.6,8.94,345.0,1000,- 0.0031,- 0.0038,0.05,29.0,8.5,995,2003,3.4,17.39,144,5,30,2,6,- 40,85,43,30,'Canadian CS3U350P-FG Dymond',83,46.6,9.51,39.2,8.94,350.0,1000,- 0.0031,- 0.0038,0.05,29.0,8.5,995,2003,3.4,17.64,144,5,30,2,6,- 40,85,43,30,'Canadian CS3U375MS-FG Dymond',84,47.6,9.93,39.8,9.43,375.0,1000,- 0.0029,- 0.0036,0.05,29.0,8.5,995,2003,3.4,18.9,144,5,30,1,6,- 40,85,42,30,'Canadian CS3U380MS-FG Dymond',85,47.8,10.01,40.0,9.5,380.0,1000,- 0.0029,- 0.0036,0.05,29.0,8.5,995,2003,3.4,19.15,144,5,30,1,6,- 40,85,42,30,'Canadian CS3U385MS-FG Dymond',86,48.0,10.09,40.2,9.58,385.0,1000,- 0.0029,- 0.0036,0.05,29.0,8.5,995,2003,3.4,19.41,144,5,30,1,6,- 40,85,42,30,'Canadian CS3U390MS-FG Dymond',87,48.2,10.17,40.4,9.66,390.0,1000,- 0.0029,- 0.0036,0.05,29.0,8.5,995,2003,3.4,19.66,144,5,30,1,6,- 40,85,42,30,'Canadian CS3U395MS-FG Dymond',88,48.4,10.25,40.6,9.73,395.0,1000,- 0.0029,- 0.0036,0.05,29.0,8.5,995,2003,3.4,19.91,144,5,30,1,6,- 40,85,42,30,'Canadian CS3K295MS-FG Dymond',89,39.1,9.57,32.5,9.08,295.0,1000,- 0.0029,- 0.0037,0.05,24.0,8.5,995,1678,3.4,17.75,120,5,30,2,6,- 40,85,43,30,'Canadian CS3K300MS-FG Dymond',90,39.3,9.65,32.7,9.18,300.0,1000,- 0.0029,- 0.0037,0.05,24.0,8.5,995,1678,3.4,18.05,120,5,30,2,6,- 40,85,43,30,'Canadian CS3K305MS-FG Dymond',91,39.5,9.73,32.9,9.28,305.0,1000,- 0.0029,- 0.0037,0.05,24.0,8.5,995,1678,3.4,18.36,120,5,30,2,6,- 40,85,43,30,'Canadian CS3K310MS-FG Dymond',92,39.7,9.81,33.1,9.37,310.0,1000,- 0.0029,- 0.0037,0.05,24.0,8.5,995,1678,3.4,18.66,120,5,30,2,6,- 40,85,43,30,'Canadian CS3K275P-FG Dymond',93,37.7,9.38,31.0,8.88,275.0,1000,- 0.0031,- 0.0038,0.05,24.0,8.5,995,1678,3.4,16.55,120,5,30,2,6,- 40,85,42,30,'Canadian CS3K280P-FG Dymond',94,37.9,9.47,31.2,8.98,280.0,1000,- 0.0031,- 0.0038,0.05,24.0,8.5,995,1678,3.4,16.85,120,5,30,2,6,- 40,85,42,30,'Canadian CS3K285P-FG Dymond',95,38.1,9.56,31.4,9.08,285.0,1000,- 0.0031,- 0.0038,0.05,24.0,8.5,995,1678,3.4,17.15,120,5,30,2,6,- 40,85,42,30,'Canadian CS3K290P-FG Dymond',96,38.9,9.49,32.3,8.98,290.0,1000,- 0.0031,- 0.0038,0.05,24.0,8.5,995,1678,3.4,17.45,120,5,30,2,6,- 40,85,42,30,'Canadian CS3K315MS-FG Dymond',97,39.9,10.06,33.1,9.52,315.0,1000,- 0.0029,- 0.0036,0.05,24.0,8.5,995,1678,3.4,18.96,120,5,30,1,6,- 40,85,42,30,'Canadian CS3K320MS-FG Dymond',98,40.1,10.14,33.3,9.61,320.0,1000,- 0.0029,- 0.0036,0.05,24.0,8.5,995,1678,3.4,19.26,120,5,30,1,6,- 40,85,42,30,'Canadian CS3K325MS-FG Dymond',99,40.3,10.22,33.5,9.71,325.0,1000,- 0.0029,- 0.0036,0.05,24.0,8.5,995,1678,3.4,19.56,120,5,30,1,6,- 40,85,42,30,'Canadian CS3K330MS-FG Dymond',100,40.5,10.3,33.7,9.8,330.0,1000,- 0.0029,- 0.0036,0.05,24.0,8.5,995,1678,3.4,19.86,120,5,30,1,6,- 40,85,42,30])\n    #      type            no   ocv   scc  vmax  imax    pmax  Vmax      ocvt    otvmp tcisc   weig  deph  widt  leng  icost     ef  ncel  tol   dur   tcell   tier   temp   TEMP   NOCT    Inop\n    yingli = np.array(['Yingli YL260C-30b',1,38.1,9.35,29.7,8.74,260.0,1000,- 0.003,- 0.004,0.04,18.5,40,990,1640,2.6,16.0,60,5,25,1,5,- 40,85,46,15,'Yingli YL265C-30b',2,38.3,9.37,30.1,8.79,265.0,1000,- 0.003,- 0.004,0.04,18.5,40,990,1640,2.65,16.13,60,5,25,1,5,- 40,85,46,15,'Yingli YL270C-30b',3,38.6,9.43,30.5,8.85,270.0,1000,- 0.003,- 0.004,0.04,18.5,40,990,1640,2.7,16.6,60,5,25,1,5,- 40,85,46,15,'Yingli YL275C-30b',4,38.8,9.47,30.9,8.91,275.0,1000,- 0.003,- 0.004,0.04,18.5,40,990,1644,2.75,16.9,60,5,25,1,5,- 40,85,46,15,'Yingli YL280C-30b',5,39.1,9.5,31.3,8.96,280.0,1000,- 0.003,- 0.004,0.04,18.5,40,990,1640,2.8,17.2,60,5,25,1,5,- 40,85,46,15,'Yingli YLM275D-30b',6,38.9,9.34,31.2,8.82,275.0,1000,- 0.0032,- 0.0042,0.05,18.5,35,990,1640,2.75,16.9,60,5,25,1,5,- 40,85,46,15,'Yingli YLM280D-30b',7,39.3,9.38,31.4,8.91,280.0,1000,- 0.0032,- 0.0042,0.05,18.5,35,990,1640,2.8,17.2,60,5,25,1,5,- 40,85,46,15,'Yingli YLM285D-30b',8,39.6,9.41,31.7,9.0,285.0,1000,- 0.0032,- 0.0042,0.05,18.5,35,990,1640,2.85,17.6,60,5,25,1,5,- 40,85,46,15,'Yingli YLM290D-30b',9,39.9,9.45,31.9,9.08,290.0,1000,- 0.0032,- 0.0042,0.05,18.5,35,990,1640,2.9,17.9,60,5,25,1,5,- 40,85,46,15,'Yingli YL310P-35b',10,45.6,8.99,36.3,8.53,310.0,1000,- 0.0032,- 0.0042,0.05,25.5,40,990,1960,3.1,16.0,72,5,25,2,5,- 40,85,46,15,'Yingli YL315P-35b',11,45.7,9.12,36.8,8.56,315.0,1000,- 0.0032,- 0.0042,0.05,25.5,40,990,1960,3.1,16.2,72,5,25,2,5,- 40,85,46,15,'Yingli YL320P-35b',12,46.0,9.18,37.0,8.64,320.0,1000,- 0.0032,- 0.0042,0.05,25.5,40,990,1960,3.1,16.5,72,5,25,2,5,- 40,85,46,15,'Yingli YL325P-35b',13,46.3,9.24,37.3,8.72,325.0,1000,- 0.0032,- 0.0042,0.05,25.5,40,990,1960,3.1,16.7,72,5,25,2,5,- 40,85,46,15,'Yingli YL330P-35b',14,46.4,9.29,37.4,8.84,330.0,1000,- 0.0032,- 0.0042,0.05,25.5,40,990,1960,3.1,17.0,72,5,25,2,5,- 40,85,46,15,'Yingli YL335P-35b',15,46.7,9.34,37.6,8.91,335.0,1000,- 0.0032,- 0.0042,0.05,25.5,40,990,1960,3.1,17.3,72,5,25,2,5,- 40,85,46,15])\n    #        type             no   ocv   scc   vmax  imax  pmax    Vmax  ocvt      otvmp    tcisc  weig  deph  widt  leng  icost    ef      ncel  tol   dur   tcell   tier   temp   TEMP   NOCT   Inop",
        "detail": "old.pv_parameters",
        "documentation": {}
    },
    {
        "label": "#NOCT",
        "kind": 5,
        "importPath": "old.pv_parameters",
        "description": "old.pv_parameters",
        "peekOfCode": "#NOCT = Nominal Operating Cell Temperature\n#Inop = max. series fuse rating\n    #       type       no   ocv   scc   vmp   imp     pmp  Vmax      ocvt   otvmp   tcisc  weig  deph  widt  leng  icost     ef  ncel  tol   dur tcell   tier  temp   TEMP  NOCT   Inop   IEC-61730; IEC-61215; IEC-62804; IEC-61701; IEC-60068;UL-1703;\n    jinko = np.array(['Jinko JKMS235P',1,36.9,8.47,29.8,7.89,235.0,1000,- 0.0027,- 0.0045,0.05,18.0,40,990,1636,2.35,14.51,60,3,25,2,6,- 40,85,45,15,'Jinko JKMS240P',2,37.2,8.56,30.0,8.01,240.0,1000,- 0.0027,- 0.0045,0.05,18.0,40,990,1636,2.4,14.82,60,3,25,2,6,- 40,85,45,15,'Jinko JKMS245P',3,37.4,8.69,30.2,8.12,245.0,1000,- 0.0027,- 0.0045,0.05,18.0,40,990,1636,2.45,15.13,60,3,25,2,6,- 40,85,45,15,'Jinko JKMS250P',4,37.6,8.81,30.4,8.23,250.0,1000,- 0.0027,- 0.0045,0.05,18.0,40,990,1636,2.5,15.44,60,3,25,2,6,- 40,85,45,15,'Jinko JKMS255P',5,37.8,8.96,30.6,8.34,255.0,1000,- 0.0027,- 0.0045,0.05,18.0,40,990,1636,2.55,15.74,60,3,25,2,6,- 40,85,45,15,'Jinko JKM260P',6,38.1,8.98,31.1,8.37,260.0,1000,- 0.0031,- 0.0041,0.06,19.0,40,992,1650,2.6,15.88,60,3,25,2,6,- 40,85,45,15,'Jinko JKM265P',7,38.6,9.03,31.4,8.44,265.0,1000,- 0.0031,- 0.0041,0.06,19.0,40,992,1650,2.65,16.19,60,3,25,2,6,- 40,85,45,15,'Jinko JKM270P',8,38.8,9.09,31.7,8.52,270.0,1000,- 0.0031,- 0.0041,0.06,19.0,40,992,1650,2.65,16.5,60,3,25,2,6,- 40,85,45,15,'Jinko JKM295P',10,45.1,8.76,36.2,8.15,295.0,1000,- 0.0031,- 0.0041,0.06,26.5,40,992,1956,2.95,15.2,72,3,25,2,6,- 40,85,45,15,'Jinko JKM300P',11,45.3,8.84,36.6,8.2,300.0,1000,- 0.0031,- 0.0041,0.06,26.5,40,992,1956,3.0,15.46,72,3,25,2,6,- 40,85,45,15,'Jinko JKM305P',12,45.6,8.91,36.8,8.3,305.0,1000,- 0.0031,- 0.0041,0.06,26.5,40,992,1956,3.05,15.72,72,3,25,2,6,- 40,85,45,15,'Jinko JKM310P',13,45.9,8.96,37.0,8.38,310.0,1000,- 0.0031,- 0.0041,0.06,26.5,40,992,1956,3.1,15.98,72,3,25,2,6,- 40,85,45,15,'Jinko JKM315P',14,46.2,9.01,37.2,8.48,315.0,1000,- 0.0031,- 0.0041,0.06,26.5,40,992,1952,3.15,16.23,72,3,25,2,6,- 40,85,45,15])\n    #type                                no   ocv   scc  vmax  imax    pmax  Vmax      ocvt   otvmp   tcisc  weig  deph  widt  leng  icost     ef  ncel  tol   dur   tcell   tier   temp   TEMP   NOCT    Inop\n    canadian = np.array(['Canadian CS6K260P',1,37.5,9.12,30.4,8.56,260.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.6,15.88,60,5,25,2,6,- 40,85,45,15,'Canadian CS6K265P',2,37.7,9.23,30.6,8.66,265.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.64,16.19,60,5,25,2,6,- 40,85,45,15,'Canadian CS6K270P',3,37.9,9.32,30.8,8.75,270.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.69,16.5,60,5,25,2,6,- 40,85,45,15,'Canadian CS6K275P',4,38.0,9.45,31.0,8.88,275.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.75,16.8,60,5,25,2,6,- 40,85,45,15,'Canadian CS6K275M',5,38.3,9.31,31.3,8.8,275.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.75,16.8,60,5,25,1,6,- 40,85,45,15,'Canadian CS6K280M',6,38.5,9.43,31.5,8.89,280.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.8,17.11,60,5,25,1,6,- 40,85,45,15,'Canadian CS6K285M',7,38.6,9.51,31.7,8.98,285.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.85,17.41,60,5,25,1,6,- 40,85,45,15,'Canadian CS6X310P',8,44.9,9.08,36.4,8.52,310.0,1000,- 0.0031,- 0.0041,0.053,22.0,40,982,1954,3.1,16.16,72,5,25,2,6,- 40,85,43,15,'Canadian CS6X315P',9,45.1,9.18,36.6,8.61,315.0,1000,- 0.0031,- 0.0041,0.053,22.0,40,982,1954,3.15,16.42,72,5,25,2,6,- 40,85,43,15,'Canadian CS6X320P',10,45.3,9.26,36.8,8.69,320.0,1000,- 0.0031,- 0.0041,0.053,22.0,40,982,1954,3.2,16.68,72,5,25,2,6,- 40,85,43,15,'Canadian CS6X325P',11,45.5,9.34,37.0,8.78,325.0,1000,- 0.0031,- 0.0041,0.053,22.0,40,982,1954,3.25,16.94,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U325P',12,45.5,9.34,37.0,8.78,325.0,1000,- 0.0031,- 0.0041,0.05,22.4,40,992,1960,3.25,16.72,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U330P',13,45.6,9.45,37.2,8.88,330.0,1000,- 0.0031,- 0.0041,0.05,22.4,40,992,1960,3.3,16.97,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U335P',14,45.8,9.54,37.4,8.96,335.0,1000,- 0.0031,- 0.0041,0.05,22.4,40,992,1960,3.35,17.23,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U340P',15,45.9,9.62,37.6,9.05,340.0,1000,- 0.0029,- 0.0039,0.05,22.4,40,992,1960,3.4,17.49,72,5,25,2,6,- 40,85,43,15,'Canadian CS6X330P-FG',16,45.6,9.45,37.2,8.88,330.0,1000,- 0.0031,- 0.004,0.05,27.5,8.5,971,1971,3.25,16.9,72,5,30,2,6,- 40,85,43,15,'Canadian CS6X335P-FG',17,45.8,9.54,37.4,8.96,335.0,1000,- 0.0031,- 0.004,0.05,27.5,8.5,971,1971,3.25,17.16,72,5,30,2,6,- 40,85,43,15,'Canadian CS6X340P-FG',18,45.9,9.62,37.6,9.05,340.0,1000,- 0.0029,- 0.0039,0.05,27.5,8.5,971,1971,3.25,17.42,72,5,30,2,6,- 40,85,43,15,'Canadian CS6X345P-FG',19,46.0,9.69,37.8,9.13,345.0,1000,- 0.0029,- 0.0039,0.05,27.5,8.5,971,1971,3.25,17.67,72,5,30,2,6,- 40,85,43,15,'Canadian CS6X350P-FG',20,46.2,9.79,38.1,9.21,350.0,1000,- 0.0029,- 0.0039,0.05,27.5,8.5,971,1971,3.25,17.93,72,5,30,2,6,- 40,85,43,15,'Canadian CS6X355P-FG',21,46.4,9.84,38.2,9.3,355.0,1000,- 0.0029,- 0.0039,0.05,27.5,8.5,971,1971,3.25,18.18,72,5,30,2,6,- 40,85,43,15,'Canadian CS6K285P-FG Dymond',22,38.3,9.64,31.4,9.06,285.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,3.25,17.33,60,5,30,2,6,- 40,85,43,15,'Canadian CS6K290P-FG Dymond',23,38.5,9.72,31.6,9.18,290.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,3.25,17.63,60,5,30,2,6,- 40,85,43,15,'Canadian CS6K295P-FG Dymond',24,38.6,9.81,31.8,9.28,295.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,3.25,17.94,60,5,30,2,6,- 40,85,43,15,'Canadian CS6K290MS-FG Dymond',25,39.3,9.67,32.1,9.05,290.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,2.85,17.72,60,5,30,2,6,- 40,85,42,15,'Canadian CS6K295MS-FG Dymond',26,39.5,9.75,32.3,9.14,295.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,2.85,18.02,60,5,30,2,6,- 40,85,42,15,'Canadian CS6K300MS-FG Dymond',27,39.7,9.83,32.5,9.24,300.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,2.85,18.33,60,5,30,2,6,- 40,85,42,15,'Canadian CS6K305MS-FG Dymond',28,39.9,9.91,32.7,9.33,305.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,2.85,18.54,60,5,30,2,6,- 40,85,42,15,'Canadian CS6K295MS-FG All black',29,39.5,9.75,32.3,9.14,295.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,17.72,60,5,25,1,6,- 40,85,43,15,'Canadian CS6K300MS-FG All black',30,39.7,9.83,32.5,9.24,300.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.33,60,5,25,1,6,- 40,85,43,15,'Canadian CS6K305MS-FG All black',31,39.9,9.91,32.7,9.33,305.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.63,60,5,25,1,6,- 40,85,43,15,'Canadian CS6K310MS-FG All black',32,40.1,9.99,32.9,9.43,310.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.94,60,5,25,1,6,- 40,85,43,15,'Canadian CS6K285P',33,38.3,9.64,31.4,9.06,285.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,17.41,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K290P',34,38.5,9.72,31.6,9.18,290.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,17.72,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K295P',35,38.6,9.81,31.8,9.28,295.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.02,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K300P',36,38.8,9.92,32.0,9.38,300.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.33,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K305P',37,38.9,10.03,32.1,9.5,305.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.63,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K280P',38,38.2,9.52,31.3,8.95,280.0,1000,- 0.0031,- 0.004,0.05,18.2,35,992,1650,2.85,17.11,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K300MS Superpower',39,39.7,9.83,32.5,9.24,300.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.33,60,5,25,2,6,- 40,85,42,15,'Canadian CS6K305MS Superpower',40,39.9,9.91,32.7,9.33,305.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.63,60,5,25,2,6,- 40,85,42,15,'Canadian CS6K310MS Superpower',41,40.1,9.99,32.9,9.43,310.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.94,60,5,25,2,6,- 40,85,42,15,'Canadian CS6K315MS Superpower',42,40.3,10.07,33.1,9.52,315.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,19.24,60,5,25,2,6,- 40,85,42,15,'Canadian CS6U345P',43,46.0,9.69,37.8,9.13,345.0,1000,- 0.0029,- 0.0039,0.05,22.4,35,992,1960,3.4,17.74,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U350P',44,46.2,9.79,38.1,9.21,350.0,1000,- 0.0029,- 0.0039,0.05,22.4,35,992,1960,3.4,18.0,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U355P',45,46.4,9.84,38.2,9.3,355.0,1000,- 0.0029,- 0.0039,0.05,22.4,35,992,1960,3.4,18.26,72,5,25,2,6,- 40,85,43,15,'Canadian CS3U355P',46,46.8,9.59,39.4,9.02,355.0,1000,- 0.0029,- 0.0037,0.05,22.4,35,992,2000,3.4,17.89,144,5,25,2,6,- 40,85,42,15,'Canadian CS3U360P',47,47.0,9.67,39.6,9.1,360.0,1000,- 0.0029,- 0.0037,0.05,22.4,35,992,2000,3.4,18.15,144,5,25,2,6,- 40,85,42,15,'Canadian CS3U365P',48,47.2,9.75,39.8,9.18,365.0,1000,- 0.0029,- 0.0037,0.05,22.4,35,992,2000,3.4,18.4,144,5,25,2,6,- 40,85,42,15,'Canadian CS3U370P',49,47.4,9.83,40.0,9.26,365.0,1000,- 0.0029,- 0.0037,0.05,22.4,35,992,2000,3.4,18.65,144,5,25,2,6,- 40,85,42,15,'Canadian CS3U335P',50,45.7,9.28,38.2,8.77,335.0,1000,- 0.0031,- 0.0038,0.05,22.4,35,992,2000,3.4,16.89,144,5,25,2,6,- 40,85,43,15,'Canadian CS3U340P',51,45.9,9.36,38.4,8.86,340.0,1000,- 0.0031,- 0.0038,0.05,22.4,35,992,2000,3.4,17.14,144,5,25,2,6,- 40,85,43,15,'Canadian CS3U345P',52,46.1,9.44,38.6,8.94,345.0,1000,- 0.0031,- 0.0038,0.05,22.4,35,992,2000,3.4,17.39,144,5,25,2,6,- 40,85,43,15,'Canadian CS3U350P',53,46.6,9.51,39.2,8.94,350.0,1000,- 0.0031,- 0.0038,0.05,22.4,35,992,2000,3.4,17.64,144,5,25,2,6,- 40,85,43,15,'Canadian CS3U375MS',54,47.6,9.93,39.8,9.43,375.0,1000,- 0.0029,- 0.0036,0.05,22.5,35,992,2000,3.4,18.9,144,5,25,1,6,- 40,85,42,15,'Canadian CS3U380MS',55,47.8,10.01,40.0,9.5,380.0,1000,- 0.0029,- 0.0036,0.05,22.5,35,992,2000,3.4,19.15,144,5,25,1,6,- 40,85,42,15,'Canadian CS3U385MS',56,48.0,10.09,40.2,9.58,385.0,1000,- 0.0029,- 0.0036,0.05,22.5,35,992,2000,3.4,19.41,144,5,25,1,6,- 40,85,42,15,'Canadian CS3U390MS',57,48.2,10.17,40.4,9.66,390.0,1000,- 0.0029,- 0.0036,0.05,22.5,35,992,2000,3.4,19.66,144,5,25,1,6,- 40,85,42,15,'Canadian CS3U395MS',58,48.4,10.25,40.6,9.73,395.0,1000,- 0.0029,- 0.0036,0.05,22.5,35,992,2000,3.4,19.91,144,5,25,1,6,- 40,85,42,15,'Canadian CS3K295P',59,39.1,9.57,32.5,9.08,295.0,1000,- 0.0029,- 0.0037,0.05,18.5,35,992,1675,3.4,17.75,120,5,25,2,6,- 40,85,42,30,'Canadian CS3K300P',60,39.3,9.65,32.7,9.18,300.0,1000,- 0.0029,- 0.0037,0.05,18.5,35,992,1675,3.4,18.05,120,5,25,2,6,- 40,85,42,30,'Canadian CS3K305P',61,39.5,9.73,32.9,9.28,305.0,1000,- 0.0029,- 0.0037,0.05,18.5,35,992,1675,3.4,18.36,120,5,25,2,6,- 40,85,42,30,'Canadian CS3K310P',62,39.7,9.81,33.1,9.37,310.0,1000,- 0.0029,- 0.0037,0.05,18.5,35,992,1675,3.4,18.66,120,5,25,2,6,- 40,85,42,30,'Canadian CS3K275P',63,37.7,9.38,31.0,8.88,275.0,1000,- 0.0031,- 0.0038,0.05,18.5,35,992,1675,3.4,16.65,120,5,25,2,6,- 40,85,43,30,'Canadian CS3K280P',64,37.9,9.47,31.2,8.98,280.0,1000,- 0.0031,- 0.0038,0.05,18.5,35,992,1675,3.4,16.85,120,5,25,2,6,- 40,85,43,30,'Canadian CS3K285P',65,38.1,9.56,31.4,9.08,285.0,1000,- 0.0031,- 0.0038,0.05,18.5,35,992,1675,3.4,17.15,120,5,25,2,6,- 40,85,43,30,'Canadian CS3K290P',66,38.9,9.49,32.3,8.98,290.0,1000,- 0.0031,- 0.0038,0.05,18.5,35,992,1675,3.4,17.45,120,5,25,2,6,- 40,85,43,30,'Canadian CS3K295P',67,38.9,9.49,32.3,8.98,290.0,1000,- 0.0031,- 0.0038,0.05,18.5,35,992,1675,3.4,17.45,120,5,25,2,6,- 40,85,43,30,'Canadian CS3K315MS',68,39.9,10.06,31.1,9.52,315.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,18.96,120,5,25,1,6,- 40,85,42,30,'Canadian CS3K320MS',69,40.1,10.14,33.3,9.61,320.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,19.26,120,5,25,1,6,- 40,85,42,30,'Canadian CS3K325MS',70,40.3,10.22,33.5,9.71,325.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,19.56,120,5,25,1,6,- 40,85,42,30,'Canadian CS3K330MS',71,40.5,10.3,33.7,9.8,330.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,19.86,120,5,25,1,6,- 40,85,42,30,'Canadian CS3K295MS',72,39.1,9.73,32.3,9.14,295.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,17.75,120,5,25,1,6,- 40,85,43,30,'Canadian CS3K300MS',73,39.3,9.82,32.5,9.24,300.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,18.05,120,5,25,1,6,- 40,85,43,30,'Canadian CS3K305MS',74,39.5,9.9,32.7,9.33,305.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,18.36,120,5,25,1,6,- 40,85,43,30,'Canadian CS3K310MS',75,39.7,9.98,32.9,9.43,310.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,18.66,120,5,25,1,6,- 40,85,43,30,'Canadian CS3U355P-FG Dymond',76,46.8,9.59,39.4,9.02,355.0,1000,- 0.0029,- 0.0037,0.05,29.0,8.5,995,2003,3.4,17.89,144,5,30,2,6,- 40,85,42,30,'Canadian CS3U360P-FG Dymond',77,47.0,9.67,39.6,9.1,360.0,1000,- 0.0029,- 0.0037,0.05,29.0,8.5,995,2003,3.4,18.15,144,5,30,2,6,- 40,85,42,30,'Canadian CS3U365P-FG Dymond',78,47.2,9.75,39.8,9.18,365.0,1000,- 0.0029,- 0.0037,0.05,29.0,8.5,995,2003,3.4,18.4,144,5,30,2,6,- 40,85,42,30,'Canadian CS3U370P-FG Dymond',79,47.4,9.83,40.0,9.26,370.0,1000,- 0.0029,- 0.0037,0.05,29.0,8.5,995,2003,3.4,18.65,144,5,30,2,6,- 40,85,42,30,'Canadian CS3U335P-FG Dymond',80,45.7,9.28,38.2,8.77,335.0,1000,- 0.0031,- 0.0038,0.05,29.0,8.5,995,2003,3.4,16.89,144,5,30,2,6,- 40,85,43,30,'Canadian CS3U340P-FG Dymond',81,45.9,9.36,38.4,8.86,340.0,1000,- 0.0031,- 0.0038,0.05,29.0,8.5,995,2003,3.4,17.14,144,5,30,2,6,- 40,85,43,30,'Canadian CS3U345P-FG Dymond',82,46.1,9.44,38.6,8.94,345.0,1000,- 0.0031,- 0.0038,0.05,29.0,8.5,995,2003,3.4,17.39,144,5,30,2,6,- 40,85,43,30,'Canadian CS3U350P-FG Dymond',83,46.6,9.51,39.2,8.94,350.0,1000,- 0.0031,- 0.0038,0.05,29.0,8.5,995,2003,3.4,17.64,144,5,30,2,6,- 40,85,43,30,'Canadian CS3U375MS-FG Dymond',84,47.6,9.93,39.8,9.43,375.0,1000,- 0.0029,- 0.0036,0.05,29.0,8.5,995,2003,3.4,18.9,144,5,30,1,6,- 40,85,42,30,'Canadian CS3U380MS-FG Dymond',85,47.8,10.01,40.0,9.5,380.0,1000,- 0.0029,- 0.0036,0.05,29.0,8.5,995,2003,3.4,19.15,144,5,30,1,6,- 40,85,42,30,'Canadian CS3U385MS-FG Dymond',86,48.0,10.09,40.2,9.58,385.0,1000,- 0.0029,- 0.0036,0.05,29.0,8.5,995,2003,3.4,19.41,144,5,30,1,6,- 40,85,42,30,'Canadian CS3U390MS-FG Dymond',87,48.2,10.17,40.4,9.66,390.0,1000,- 0.0029,- 0.0036,0.05,29.0,8.5,995,2003,3.4,19.66,144,5,30,1,6,- 40,85,42,30,'Canadian CS3U395MS-FG Dymond',88,48.4,10.25,40.6,9.73,395.0,1000,- 0.0029,- 0.0036,0.05,29.0,8.5,995,2003,3.4,19.91,144,5,30,1,6,- 40,85,42,30,'Canadian CS3K295MS-FG Dymond',89,39.1,9.57,32.5,9.08,295.0,1000,- 0.0029,- 0.0037,0.05,24.0,8.5,995,1678,3.4,17.75,120,5,30,2,6,- 40,85,43,30,'Canadian CS3K300MS-FG Dymond',90,39.3,9.65,32.7,9.18,300.0,1000,- 0.0029,- 0.0037,0.05,24.0,8.5,995,1678,3.4,18.05,120,5,30,2,6,- 40,85,43,30,'Canadian CS3K305MS-FG Dymond',91,39.5,9.73,32.9,9.28,305.0,1000,- 0.0029,- 0.0037,0.05,24.0,8.5,995,1678,3.4,18.36,120,5,30,2,6,- 40,85,43,30,'Canadian CS3K310MS-FG Dymond',92,39.7,9.81,33.1,9.37,310.0,1000,- 0.0029,- 0.0037,0.05,24.0,8.5,995,1678,3.4,18.66,120,5,30,2,6,- 40,85,43,30,'Canadian CS3K275P-FG Dymond',93,37.7,9.38,31.0,8.88,275.0,1000,- 0.0031,- 0.0038,0.05,24.0,8.5,995,1678,3.4,16.55,120,5,30,2,6,- 40,85,42,30,'Canadian CS3K280P-FG Dymond',94,37.9,9.47,31.2,8.98,280.0,1000,- 0.0031,- 0.0038,0.05,24.0,8.5,995,1678,3.4,16.85,120,5,30,2,6,- 40,85,42,30,'Canadian CS3K285P-FG Dymond',95,38.1,9.56,31.4,9.08,285.0,1000,- 0.0031,- 0.0038,0.05,24.0,8.5,995,1678,3.4,17.15,120,5,30,2,6,- 40,85,42,30,'Canadian CS3K290P-FG Dymond',96,38.9,9.49,32.3,8.98,290.0,1000,- 0.0031,- 0.0038,0.05,24.0,8.5,995,1678,3.4,17.45,120,5,30,2,6,- 40,85,42,30,'Canadian CS3K315MS-FG Dymond',97,39.9,10.06,33.1,9.52,315.0,1000,- 0.0029,- 0.0036,0.05,24.0,8.5,995,1678,3.4,18.96,120,5,30,1,6,- 40,85,42,30,'Canadian CS3K320MS-FG Dymond',98,40.1,10.14,33.3,9.61,320.0,1000,- 0.0029,- 0.0036,0.05,24.0,8.5,995,1678,3.4,19.26,120,5,30,1,6,- 40,85,42,30,'Canadian CS3K325MS-FG Dymond',99,40.3,10.22,33.5,9.71,325.0,1000,- 0.0029,- 0.0036,0.05,24.0,8.5,995,1678,3.4,19.56,120,5,30,1,6,- 40,85,42,30,'Canadian CS3K330MS-FG Dymond',100,40.5,10.3,33.7,9.8,330.0,1000,- 0.0029,- 0.0036,0.05,24.0,8.5,995,1678,3.4,19.86,120,5,30,1,6,- 40,85,42,30])\n    #      type            no   ocv   scc  vmax  imax    pmax  Vmax      ocvt    otvmp tcisc   weig  deph  widt  leng  icost     ef  ncel  tol   dur   tcell   tier   temp   TEMP   NOCT    Inop\n    yingli = np.array(['Yingli YL260C-30b',1,38.1,9.35,29.7,8.74,260.0,1000,- 0.003,- 0.004,0.04,18.5,40,990,1640,2.6,16.0,60,5,25,1,5,- 40,85,46,15,'Yingli YL265C-30b',2,38.3,9.37,30.1,8.79,265.0,1000,- 0.003,- 0.004,0.04,18.5,40,990,1640,2.65,16.13,60,5,25,1,5,- 40,85,46,15,'Yingli YL270C-30b',3,38.6,9.43,30.5,8.85,270.0,1000,- 0.003,- 0.004,0.04,18.5,40,990,1640,2.7,16.6,60,5,25,1,5,- 40,85,46,15,'Yingli YL275C-30b',4,38.8,9.47,30.9,8.91,275.0,1000,- 0.003,- 0.004,0.04,18.5,40,990,1644,2.75,16.9,60,5,25,1,5,- 40,85,46,15,'Yingli YL280C-30b',5,39.1,9.5,31.3,8.96,280.0,1000,- 0.003,- 0.004,0.04,18.5,40,990,1640,2.8,17.2,60,5,25,1,5,- 40,85,46,15,'Yingli YLM275D-30b',6,38.9,9.34,31.2,8.82,275.0,1000,- 0.0032,- 0.0042,0.05,18.5,35,990,1640,2.75,16.9,60,5,25,1,5,- 40,85,46,15,'Yingli YLM280D-30b',7,39.3,9.38,31.4,8.91,280.0,1000,- 0.0032,- 0.0042,0.05,18.5,35,990,1640,2.8,17.2,60,5,25,1,5,- 40,85,46,15,'Yingli YLM285D-30b',8,39.6,9.41,31.7,9.0,285.0,1000,- 0.0032,- 0.0042,0.05,18.5,35,990,1640,2.85,17.6,60,5,25,1,5,- 40,85,46,15,'Yingli YLM290D-30b',9,39.9,9.45,31.9,9.08,290.0,1000,- 0.0032,- 0.0042,0.05,18.5,35,990,1640,2.9,17.9,60,5,25,1,5,- 40,85,46,15,'Yingli YL310P-35b',10,45.6,8.99,36.3,8.53,310.0,1000,- 0.0032,- 0.0042,0.05,25.5,40,990,1960,3.1,16.0,72,5,25,2,5,- 40,85,46,15,'Yingli YL315P-35b',11,45.7,9.12,36.8,8.56,315.0,1000,- 0.0032,- 0.0042,0.05,25.5,40,990,1960,3.1,16.2,72,5,25,2,5,- 40,85,46,15,'Yingli YL320P-35b',12,46.0,9.18,37.0,8.64,320.0,1000,- 0.0032,- 0.0042,0.05,25.5,40,990,1960,3.1,16.5,72,5,25,2,5,- 40,85,46,15,'Yingli YL325P-35b',13,46.3,9.24,37.3,8.72,325.0,1000,- 0.0032,- 0.0042,0.05,25.5,40,990,1960,3.1,16.7,72,5,25,2,5,- 40,85,46,15,'Yingli YL330P-35b',14,46.4,9.29,37.4,8.84,330.0,1000,- 0.0032,- 0.0042,0.05,25.5,40,990,1960,3.1,17.0,72,5,25,2,5,- 40,85,46,15,'Yingli YL335P-35b',15,46.7,9.34,37.6,8.91,335.0,1000,- 0.0032,- 0.0042,0.05,25.5,40,990,1960,3.1,17.3,72,5,25,2,5,- 40,85,46,15])\n    #        type             no   ocv   scc   vmax  imax  pmax    Vmax  ocvt      otvmp    tcisc  weig  deph  widt  leng  icost    ef      ncel  tol   dur   tcell   tier   temp   TEMP   NOCT   Inop\n    brasilG = np.array(['Brasil Global GBR250p',1,37.5,8.92,30.0,8.35,250.0,1000,- 0.0034,- 0.0043,0.053,19.0,40,990,1640,2.5,15.39,60,5,25,2,3,- 40,85,50,15,'Brasil Global GBR255p',2,37.56,9.07,30.16,8.46,255.0,1000,- 0.0034,- 0.0043,0.053,19.0,40,990,1640,2.55,15.7,60,5,25,2,3,- 40,85,50,15,'Brasil Global GBR260p',3,37.65,9.11,30.24,8.6,260.0,1000,- 0.0034,- 0.0043,0.053,19.0,40,990,1640,2.6,16.05,60,5,25,2,3,- 40,85,50,15,'Brasil Global GBR265p',4,37.9,9.15,30.65,8.65,265.0,1000,- 0.0034,- 0.0043,0.053,19.0,40,990,1640,2.65,16.4,60,5,25,2,3,- 40,85,50,15,'Brasil Global GBR305p',5,41.2,9.19,35.8,8.53,305.0,1000,- 0.0034,- 0.0043,0.065,27.0,40,992,1956,3.05,15.7,72,5,25,2,3,- 40,85,50,15,'Brasil Global GBR310p',6,45.57,9.32,36.6,8.56,310.0,1000,- 0.0034,- 0.0043,0.065,27.0,40,992,1956,3.13,16.0,72,5,25,2,3,- 40,85,50,15,'Brasil Global GBR315p',7,45.38,9.5,36.6,8.61,315.0,1000,- 0.0034,- 0.0043,0.065,27.0,40,992,1956,3.15,16.5,72,5,25,2,3,- 40,85,50,15,'Brasil Global GBR320p',8,45.44,9.79,37.1,8.63,320.0,1000,- 0.0034,- 0.0043,0.065,27.0,40,992,1956,3.2,16.7,72,5,25,2,3,- 40,85,50,15])",
        "detail": "old.pv_parameters",
        "documentation": {}
    },
    {
        "label": "#Inop",
        "kind": 5,
        "importPath": "old.pv_parameters",
        "description": "old.pv_parameters",
        "peekOfCode": "#Inop = max. series fuse rating\n    #       type       no   ocv   scc   vmp   imp     pmp  Vmax      ocvt   otvmp   tcisc  weig  deph  widt  leng  icost     ef  ncel  tol   dur tcell   tier  temp   TEMP  NOCT   Inop   IEC-61730; IEC-61215; IEC-62804; IEC-61701; IEC-60068;UL-1703;\n    jinko = np.array(['Jinko JKMS235P',1,36.9,8.47,29.8,7.89,235.0,1000,- 0.0027,- 0.0045,0.05,18.0,40,990,1636,2.35,14.51,60,3,25,2,6,- 40,85,45,15,'Jinko JKMS240P',2,37.2,8.56,30.0,8.01,240.0,1000,- 0.0027,- 0.0045,0.05,18.0,40,990,1636,2.4,14.82,60,3,25,2,6,- 40,85,45,15,'Jinko JKMS245P',3,37.4,8.69,30.2,8.12,245.0,1000,- 0.0027,- 0.0045,0.05,18.0,40,990,1636,2.45,15.13,60,3,25,2,6,- 40,85,45,15,'Jinko JKMS250P',4,37.6,8.81,30.4,8.23,250.0,1000,- 0.0027,- 0.0045,0.05,18.0,40,990,1636,2.5,15.44,60,3,25,2,6,- 40,85,45,15,'Jinko JKMS255P',5,37.8,8.96,30.6,8.34,255.0,1000,- 0.0027,- 0.0045,0.05,18.0,40,990,1636,2.55,15.74,60,3,25,2,6,- 40,85,45,15,'Jinko JKM260P',6,38.1,8.98,31.1,8.37,260.0,1000,- 0.0031,- 0.0041,0.06,19.0,40,992,1650,2.6,15.88,60,3,25,2,6,- 40,85,45,15,'Jinko JKM265P',7,38.6,9.03,31.4,8.44,265.0,1000,- 0.0031,- 0.0041,0.06,19.0,40,992,1650,2.65,16.19,60,3,25,2,6,- 40,85,45,15,'Jinko JKM270P',8,38.8,9.09,31.7,8.52,270.0,1000,- 0.0031,- 0.0041,0.06,19.0,40,992,1650,2.65,16.5,60,3,25,2,6,- 40,85,45,15,'Jinko JKM295P',10,45.1,8.76,36.2,8.15,295.0,1000,- 0.0031,- 0.0041,0.06,26.5,40,992,1956,2.95,15.2,72,3,25,2,6,- 40,85,45,15,'Jinko JKM300P',11,45.3,8.84,36.6,8.2,300.0,1000,- 0.0031,- 0.0041,0.06,26.5,40,992,1956,3.0,15.46,72,3,25,2,6,- 40,85,45,15,'Jinko JKM305P',12,45.6,8.91,36.8,8.3,305.0,1000,- 0.0031,- 0.0041,0.06,26.5,40,992,1956,3.05,15.72,72,3,25,2,6,- 40,85,45,15,'Jinko JKM310P',13,45.9,8.96,37.0,8.38,310.0,1000,- 0.0031,- 0.0041,0.06,26.5,40,992,1956,3.1,15.98,72,3,25,2,6,- 40,85,45,15,'Jinko JKM315P',14,46.2,9.01,37.2,8.48,315.0,1000,- 0.0031,- 0.0041,0.06,26.5,40,992,1952,3.15,16.23,72,3,25,2,6,- 40,85,45,15])\n    #type                                no   ocv   scc  vmax  imax    pmax  Vmax      ocvt   otvmp   tcisc  weig  deph  widt  leng  icost     ef  ncel  tol   dur   tcell   tier   temp   TEMP   NOCT    Inop\n    canadian = np.array(['Canadian CS6K260P',1,37.5,9.12,30.4,8.56,260.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.6,15.88,60,5,25,2,6,- 40,85,45,15,'Canadian CS6K265P',2,37.7,9.23,30.6,8.66,265.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.64,16.19,60,5,25,2,6,- 40,85,45,15,'Canadian CS6K270P',3,37.9,9.32,30.8,8.75,270.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.69,16.5,60,5,25,2,6,- 40,85,45,15,'Canadian CS6K275P',4,38.0,9.45,31.0,8.88,275.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.75,16.8,60,5,25,2,6,- 40,85,45,15,'Canadian CS6K275M',5,38.3,9.31,31.3,8.8,275.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.75,16.8,60,5,25,1,6,- 40,85,45,15,'Canadian CS6K280M',6,38.5,9.43,31.5,8.89,280.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.8,17.11,60,5,25,1,6,- 40,85,45,15,'Canadian CS6K285M',7,38.6,9.51,31.7,8.98,285.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.85,17.41,60,5,25,1,6,- 40,85,45,15,'Canadian CS6X310P',8,44.9,9.08,36.4,8.52,310.0,1000,- 0.0031,- 0.0041,0.053,22.0,40,982,1954,3.1,16.16,72,5,25,2,6,- 40,85,43,15,'Canadian CS6X315P',9,45.1,9.18,36.6,8.61,315.0,1000,- 0.0031,- 0.0041,0.053,22.0,40,982,1954,3.15,16.42,72,5,25,2,6,- 40,85,43,15,'Canadian CS6X320P',10,45.3,9.26,36.8,8.69,320.0,1000,- 0.0031,- 0.0041,0.053,22.0,40,982,1954,3.2,16.68,72,5,25,2,6,- 40,85,43,15,'Canadian CS6X325P',11,45.5,9.34,37.0,8.78,325.0,1000,- 0.0031,- 0.0041,0.053,22.0,40,982,1954,3.25,16.94,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U325P',12,45.5,9.34,37.0,8.78,325.0,1000,- 0.0031,- 0.0041,0.05,22.4,40,992,1960,3.25,16.72,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U330P',13,45.6,9.45,37.2,8.88,330.0,1000,- 0.0031,- 0.0041,0.05,22.4,40,992,1960,3.3,16.97,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U335P',14,45.8,9.54,37.4,8.96,335.0,1000,- 0.0031,- 0.0041,0.05,22.4,40,992,1960,3.35,17.23,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U340P',15,45.9,9.62,37.6,9.05,340.0,1000,- 0.0029,- 0.0039,0.05,22.4,40,992,1960,3.4,17.49,72,5,25,2,6,- 40,85,43,15,'Canadian CS6X330P-FG',16,45.6,9.45,37.2,8.88,330.0,1000,- 0.0031,- 0.004,0.05,27.5,8.5,971,1971,3.25,16.9,72,5,30,2,6,- 40,85,43,15,'Canadian CS6X335P-FG',17,45.8,9.54,37.4,8.96,335.0,1000,- 0.0031,- 0.004,0.05,27.5,8.5,971,1971,3.25,17.16,72,5,30,2,6,- 40,85,43,15,'Canadian CS6X340P-FG',18,45.9,9.62,37.6,9.05,340.0,1000,- 0.0029,- 0.0039,0.05,27.5,8.5,971,1971,3.25,17.42,72,5,30,2,6,- 40,85,43,15,'Canadian CS6X345P-FG',19,46.0,9.69,37.8,9.13,345.0,1000,- 0.0029,- 0.0039,0.05,27.5,8.5,971,1971,3.25,17.67,72,5,30,2,6,- 40,85,43,15,'Canadian CS6X350P-FG',20,46.2,9.79,38.1,9.21,350.0,1000,- 0.0029,- 0.0039,0.05,27.5,8.5,971,1971,3.25,17.93,72,5,30,2,6,- 40,85,43,15,'Canadian CS6X355P-FG',21,46.4,9.84,38.2,9.3,355.0,1000,- 0.0029,- 0.0039,0.05,27.5,8.5,971,1971,3.25,18.18,72,5,30,2,6,- 40,85,43,15,'Canadian CS6K285P-FG Dymond',22,38.3,9.64,31.4,9.06,285.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,3.25,17.33,60,5,30,2,6,- 40,85,43,15,'Canadian CS6K290P-FG Dymond',23,38.5,9.72,31.6,9.18,290.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,3.25,17.63,60,5,30,2,6,- 40,85,43,15,'Canadian CS6K295P-FG Dymond',24,38.6,9.81,31.8,9.28,295.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,3.25,17.94,60,5,30,2,6,- 40,85,43,15,'Canadian CS6K290MS-FG Dymond',25,39.3,9.67,32.1,9.05,290.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,2.85,17.72,60,5,30,2,6,- 40,85,42,15,'Canadian CS6K295MS-FG Dymond',26,39.5,9.75,32.3,9.14,295.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,2.85,18.02,60,5,30,2,6,- 40,85,42,15,'Canadian CS6K300MS-FG Dymond',27,39.7,9.83,32.5,9.24,300.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,2.85,18.33,60,5,30,2,6,- 40,85,42,15,'Canadian CS6K305MS-FG Dymond',28,39.9,9.91,32.7,9.33,305.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,2.85,18.54,60,5,30,2,6,- 40,85,42,15,'Canadian CS6K295MS-FG All black',29,39.5,9.75,32.3,9.14,295.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,17.72,60,5,25,1,6,- 40,85,43,15,'Canadian CS6K300MS-FG All black',30,39.7,9.83,32.5,9.24,300.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.33,60,5,25,1,6,- 40,85,43,15,'Canadian CS6K305MS-FG All black',31,39.9,9.91,32.7,9.33,305.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.63,60,5,25,1,6,- 40,85,43,15,'Canadian CS6K310MS-FG All black',32,40.1,9.99,32.9,9.43,310.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.94,60,5,25,1,6,- 40,85,43,15,'Canadian CS6K285P',33,38.3,9.64,31.4,9.06,285.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,17.41,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K290P',34,38.5,9.72,31.6,9.18,290.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,17.72,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K295P',35,38.6,9.81,31.8,9.28,295.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.02,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K300P',36,38.8,9.92,32.0,9.38,300.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.33,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K305P',37,38.9,10.03,32.1,9.5,305.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.63,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K280P',38,38.2,9.52,31.3,8.95,280.0,1000,- 0.0031,- 0.004,0.05,18.2,35,992,1650,2.85,17.11,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K300MS Superpower',39,39.7,9.83,32.5,9.24,300.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.33,60,5,25,2,6,- 40,85,42,15,'Canadian CS6K305MS Superpower',40,39.9,9.91,32.7,9.33,305.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.63,60,5,25,2,6,- 40,85,42,15,'Canadian CS6K310MS Superpower',41,40.1,9.99,32.9,9.43,310.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.94,60,5,25,2,6,- 40,85,42,15,'Canadian CS6K315MS Superpower',42,40.3,10.07,33.1,9.52,315.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,19.24,60,5,25,2,6,- 40,85,42,15,'Canadian CS6U345P',43,46.0,9.69,37.8,9.13,345.0,1000,- 0.0029,- 0.0039,0.05,22.4,35,992,1960,3.4,17.74,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U350P',44,46.2,9.79,38.1,9.21,350.0,1000,- 0.0029,- 0.0039,0.05,22.4,35,992,1960,3.4,18.0,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U355P',45,46.4,9.84,38.2,9.3,355.0,1000,- 0.0029,- 0.0039,0.05,22.4,35,992,1960,3.4,18.26,72,5,25,2,6,- 40,85,43,15,'Canadian CS3U355P',46,46.8,9.59,39.4,9.02,355.0,1000,- 0.0029,- 0.0037,0.05,22.4,35,992,2000,3.4,17.89,144,5,25,2,6,- 40,85,42,15,'Canadian CS3U360P',47,47.0,9.67,39.6,9.1,360.0,1000,- 0.0029,- 0.0037,0.05,22.4,35,992,2000,3.4,18.15,144,5,25,2,6,- 40,85,42,15,'Canadian CS3U365P',48,47.2,9.75,39.8,9.18,365.0,1000,- 0.0029,- 0.0037,0.05,22.4,35,992,2000,3.4,18.4,144,5,25,2,6,- 40,85,42,15,'Canadian CS3U370P',49,47.4,9.83,40.0,9.26,365.0,1000,- 0.0029,- 0.0037,0.05,22.4,35,992,2000,3.4,18.65,144,5,25,2,6,- 40,85,42,15,'Canadian CS3U335P',50,45.7,9.28,38.2,8.77,335.0,1000,- 0.0031,- 0.0038,0.05,22.4,35,992,2000,3.4,16.89,144,5,25,2,6,- 40,85,43,15,'Canadian CS3U340P',51,45.9,9.36,38.4,8.86,340.0,1000,- 0.0031,- 0.0038,0.05,22.4,35,992,2000,3.4,17.14,144,5,25,2,6,- 40,85,43,15,'Canadian CS3U345P',52,46.1,9.44,38.6,8.94,345.0,1000,- 0.0031,- 0.0038,0.05,22.4,35,992,2000,3.4,17.39,144,5,25,2,6,- 40,85,43,15,'Canadian CS3U350P',53,46.6,9.51,39.2,8.94,350.0,1000,- 0.0031,- 0.0038,0.05,22.4,35,992,2000,3.4,17.64,144,5,25,2,6,- 40,85,43,15,'Canadian CS3U375MS',54,47.6,9.93,39.8,9.43,375.0,1000,- 0.0029,- 0.0036,0.05,22.5,35,992,2000,3.4,18.9,144,5,25,1,6,- 40,85,42,15,'Canadian CS3U380MS',55,47.8,10.01,40.0,9.5,380.0,1000,- 0.0029,- 0.0036,0.05,22.5,35,992,2000,3.4,19.15,144,5,25,1,6,- 40,85,42,15,'Canadian CS3U385MS',56,48.0,10.09,40.2,9.58,385.0,1000,- 0.0029,- 0.0036,0.05,22.5,35,992,2000,3.4,19.41,144,5,25,1,6,- 40,85,42,15,'Canadian CS3U390MS',57,48.2,10.17,40.4,9.66,390.0,1000,- 0.0029,- 0.0036,0.05,22.5,35,992,2000,3.4,19.66,144,5,25,1,6,- 40,85,42,15,'Canadian CS3U395MS',58,48.4,10.25,40.6,9.73,395.0,1000,- 0.0029,- 0.0036,0.05,22.5,35,992,2000,3.4,19.91,144,5,25,1,6,- 40,85,42,15,'Canadian CS3K295P',59,39.1,9.57,32.5,9.08,295.0,1000,- 0.0029,- 0.0037,0.05,18.5,35,992,1675,3.4,17.75,120,5,25,2,6,- 40,85,42,30,'Canadian CS3K300P',60,39.3,9.65,32.7,9.18,300.0,1000,- 0.0029,- 0.0037,0.05,18.5,35,992,1675,3.4,18.05,120,5,25,2,6,- 40,85,42,30,'Canadian CS3K305P',61,39.5,9.73,32.9,9.28,305.0,1000,- 0.0029,- 0.0037,0.05,18.5,35,992,1675,3.4,18.36,120,5,25,2,6,- 40,85,42,30,'Canadian CS3K310P',62,39.7,9.81,33.1,9.37,310.0,1000,- 0.0029,- 0.0037,0.05,18.5,35,992,1675,3.4,18.66,120,5,25,2,6,- 40,85,42,30,'Canadian CS3K275P',63,37.7,9.38,31.0,8.88,275.0,1000,- 0.0031,- 0.0038,0.05,18.5,35,992,1675,3.4,16.65,120,5,25,2,6,- 40,85,43,30,'Canadian CS3K280P',64,37.9,9.47,31.2,8.98,280.0,1000,- 0.0031,- 0.0038,0.05,18.5,35,992,1675,3.4,16.85,120,5,25,2,6,- 40,85,43,30,'Canadian CS3K285P',65,38.1,9.56,31.4,9.08,285.0,1000,- 0.0031,- 0.0038,0.05,18.5,35,992,1675,3.4,17.15,120,5,25,2,6,- 40,85,43,30,'Canadian CS3K290P',66,38.9,9.49,32.3,8.98,290.0,1000,- 0.0031,- 0.0038,0.05,18.5,35,992,1675,3.4,17.45,120,5,25,2,6,- 40,85,43,30,'Canadian CS3K295P',67,38.9,9.49,32.3,8.98,290.0,1000,- 0.0031,- 0.0038,0.05,18.5,35,992,1675,3.4,17.45,120,5,25,2,6,- 40,85,43,30,'Canadian CS3K315MS',68,39.9,10.06,31.1,9.52,315.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,18.96,120,5,25,1,6,- 40,85,42,30,'Canadian CS3K320MS',69,40.1,10.14,33.3,9.61,320.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,19.26,120,5,25,1,6,- 40,85,42,30,'Canadian CS3K325MS',70,40.3,10.22,33.5,9.71,325.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,19.56,120,5,25,1,6,- 40,85,42,30,'Canadian CS3K330MS',71,40.5,10.3,33.7,9.8,330.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,19.86,120,5,25,1,6,- 40,85,42,30,'Canadian CS3K295MS',72,39.1,9.73,32.3,9.14,295.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,17.75,120,5,25,1,6,- 40,85,43,30,'Canadian CS3K300MS',73,39.3,9.82,32.5,9.24,300.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,18.05,120,5,25,1,6,- 40,85,43,30,'Canadian CS3K305MS',74,39.5,9.9,32.7,9.33,305.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,18.36,120,5,25,1,6,- 40,85,43,30,'Canadian CS3K310MS',75,39.7,9.98,32.9,9.43,310.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,18.66,120,5,25,1,6,- 40,85,43,30,'Canadian CS3U355P-FG Dymond',76,46.8,9.59,39.4,9.02,355.0,1000,- 0.0029,- 0.0037,0.05,29.0,8.5,995,2003,3.4,17.89,144,5,30,2,6,- 40,85,42,30,'Canadian CS3U360P-FG Dymond',77,47.0,9.67,39.6,9.1,360.0,1000,- 0.0029,- 0.0037,0.05,29.0,8.5,995,2003,3.4,18.15,144,5,30,2,6,- 40,85,42,30,'Canadian CS3U365P-FG Dymond',78,47.2,9.75,39.8,9.18,365.0,1000,- 0.0029,- 0.0037,0.05,29.0,8.5,995,2003,3.4,18.4,144,5,30,2,6,- 40,85,42,30,'Canadian CS3U370P-FG Dymond',79,47.4,9.83,40.0,9.26,370.0,1000,- 0.0029,- 0.0037,0.05,29.0,8.5,995,2003,3.4,18.65,144,5,30,2,6,- 40,85,42,30,'Canadian CS3U335P-FG Dymond',80,45.7,9.28,38.2,8.77,335.0,1000,- 0.0031,- 0.0038,0.05,29.0,8.5,995,2003,3.4,16.89,144,5,30,2,6,- 40,85,43,30,'Canadian CS3U340P-FG Dymond',81,45.9,9.36,38.4,8.86,340.0,1000,- 0.0031,- 0.0038,0.05,29.0,8.5,995,2003,3.4,17.14,144,5,30,2,6,- 40,85,43,30,'Canadian CS3U345P-FG Dymond',82,46.1,9.44,38.6,8.94,345.0,1000,- 0.0031,- 0.0038,0.05,29.0,8.5,995,2003,3.4,17.39,144,5,30,2,6,- 40,85,43,30,'Canadian CS3U350P-FG Dymond',83,46.6,9.51,39.2,8.94,350.0,1000,- 0.0031,- 0.0038,0.05,29.0,8.5,995,2003,3.4,17.64,144,5,30,2,6,- 40,85,43,30,'Canadian CS3U375MS-FG Dymond',84,47.6,9.93,39.8,9.43,375.0,1000,- 0.0029,- 0.0036,0.05,29.0,8.5,995,2003,3.4,18.9,144,5,30,1,6,- 40,85,42,30,'Canadian CS3U380MS-FG Dymond',85,47.8,10.01,40.0,9.5,380.0,1000,- 0.0029,- 0.0036,0.05,29.0,8.5,995,2003,3.4,19.15,144,5,30,1,6,- 40,85,42,30,'Canadian CS3U385MS-FG Dymond',86,48.0,10.09,40.2,9.58,385.0,1000,- 0.0029,- 0.0036,0.05,29.0,8.5,995,2003,3.4,19.41,144,5,30,1,6,- 40,85,42,30,'Canadian CS3U390MS-FG Dymond',87,48.2,10.17,40.4,9.66,390.0,1000,- 0.0029,- 0.0036,0.05,29.0,8.5,995,2003,3.4,19.66,144,5,30,1,6,- 40,85,42,30,'Canadian CS3U395MS-FG Dymond',88,48.4,10.25,40.6,9.73,395.0,1000,- 0.0029,- 0.0036,0.05,29.0,8.5,995,2003,3.4,19.91,144,5,30,1,6,- 40,85,42,30,'Canadian CS3K295MS-FG Dymond',89,39.1,9.57,32.5,9.08,295.0,1000,- 0.0029,- 0.0037,0.05,24.0,8.5,995,1678,3.4,17.75,120,5,30,2,6,- 40,85,43,30,'Canadian CS3K300MS-FG Dymond',90,39.3,9.65,32.7,9.18,300.0,1000,- 0.0029,- 0.0037,0.05,24.0,8.5,995,1678,3.4,18.05,120,5,30,2,6,- 40,85,43,30,'Canadian CS3K305MS-FG Dymond',91,39.5,9.73,32.9,9.28,305.0,1000,- 0.0029,- 0.0037,0.05,24.0,8.5,995,1678,3.4,18.36,120,5,30,2,6,- 40,85,43,30,'Canadian CS3K310MS-FG Dymond',92,39.7,9.81,33.1,9.37,310.0,1000,- 0.0029,- 0.0037,0.05,24.0,8.5,995,1678,3.4,18.66,120,5,30,2,6,- 40,85,43,30,'Canadian CS3K275P-FG Dymond',93,37.7,9.38,31.0,8.88,275.0,1000,- 0.0031,- 0.0038,0.05,24.0,8.5,995,1678,3.4,16.55,120,5,30,2,6,- 40,85,42,30,'Canadian CS3K280P-FG Dymond',94,37.9,9.47,31.2,8.98,280.0,1000,- 0.0031,- 0.0038,0.05,24.0,8.5,995,1678,3.4,16.85,120,5,30,2,6,- 40,85,42,30,'Canadian CS3K285P-FG Dymond',95,38.1,9.56,31.4,9.08,285.0,1000,- 0.0031,- 0.0038,0.05,24.0,8.5,995,1678,3.4,17.15,120,5,30,2,6,- 40,85,42,30,'Canadian CS3K290P-FG Dymond',96,38.9,9.49,32.3,8.98,290.0,1000,- 0.0031,- 0.0038,0.05,24.0,8.5,995,1678,3.4,17.45,120,5,30,2,6,- 40,85,42,30,'Canadian CS3K315MS-FG Dymond',97,39.9,10.06,33.1,9.52,315.0,1000,- 0.0029,- 0.0036,0.05,24.0,8.5,995,1678,3.4,18.96,120,5,30,1,6,- 40,85,42,30,'Canadian CS3K320MS-FG Dymond',98,40.1,10.14,33.3,9.61,320.0,1000,- 0.0029,- 0.0036,0.05,24.0,8.5,995,1678,3.4,19.26,120,5,30,1,6,- 40,85,42,30,'Canadian CS3K325MS-FG Dymond',99,40.3,10.22,33.5,9.71,325.0,1000,- 0.0029,- 0.0036,0.05,24.0,8.5,995,1678,3.4,19.56,120,5,30,1,6,- 40,85,42,30,'Canadian CS3K330MS-FG Dymond',100,40.5,10.3,33.7,9.8,330.0,1000,- 0.0029,- 0.0036,0.05,24.0,8.5,995,1678,3.4,19.86,120,5,30,1,6,- 40,85,42,30])\n    #      type            no   ocv   scc  vmax  imax    pmax  Vmax      ocvt    otvmp tcisc   weig  deph  widt  leng  icost     ef  ncel  tol   dur   tcell   tier   temp   TEMP   NOCT    Inop\n    yingli = np.array(['Yingli YL260C-30b',1,38.1,9.35,29.7,8.74,260.0,1000,- 0.003,- 0.004,0.04,18.5,40,990,1640,2.6,16.0,60,5,25,1,5,- 40,85,46,15,'Yingli YL265C-30b',2,38.3,9.37,30.1,8.79,265.0,1000,- 0.003,- 0.004,0.04,18.5,40,990,1640,2.65,16.13,60,5,25,1,5,- 40,85,46,15,'Yingli YL270C-30b',3,38.6,9.43,30.5,8.85,270.0,1000,- 0.003,- 0.004,0.04,18.5,40,990,1640,2.7,16.6,60,5,25,1,5,- 40,85,46,15,'Yingli YL275C-30b',4,38.8,9.47,30.9,8.91,275.0,1000,- 0.003,- 0.004,0.04,18.5,40,990,1644,2.75,16.9,60,5,25,1,5,- 40,85,46,15,'Yingli YL280C-30b',5,39.1,9.5,31.3,8.96,280.0,1000,- 0.003,- 0.004,0.04,18.5,40,990,1640,2.8,17.2,60,5,25,1,5,- 40,85,46,15,'Yingli YLM275D-30b',6,38.9,9.34,31.2,8.82,275.0,1000,- 0.0032,- 0.0042,0.05,18.5,35,990,1640,2.75,16.9,60,5,25,1,5,- 40,85,46,15,'Yingli YLM280D-30b',7,39.3,9.38,31.4,8.91,280.0,1000,- 0.0032,- 0.0042,0.05,18.5,35,990,1640,2.8,17.2,60,5,25,1,5,- 40,85,46,15,'Yingli YLM285D-30b',8,39.6,9.41,31.7,9.0,285.0,1000,- 0.0032,- 0.0042,0.05,18.5,35,990,1640,2.85,17.6,60,5,25,1,5,- 40,85,46,15,'Yingli YLM290D-30b',9,39.9,9.45,31.9,9.08,290.0,1000,- 0.0032,- 0.0042,0.05,18.5,35,990,1640,2.9,17.9,60,5,25,1,5,- 40,85,46,15,'Yingli YL310P-35b',10,45.6,8.99,36.3,8.53,310.0,1000,- 0.0032,- 0.0042,0.05,25.5,40,990,1960,3.1,16.0,72,5,25,2,5,- 40,85,46,15,'Yingli YL315P-35b',11,45.7,9.12,36.8,8.56,315.0,1000,- 0.0032,- 0.0042,0.05,25.5,40,990,1960,3.1,16.2,72,5,25,2,5,- 40,85,46,15,'Yingli YL320P-35b',12,46.0,9.18,37.0,8.64,320.0,1000,- 0.0032,- 0.0042,0.05,25.5,40,990,1960,3.1,16.5,72,5,25,2,5,- 40,85,46,15,'Yingli YL325P-35b',13,46.3,9.24,37.3,8.72,325.0,1000,- 0.0032,- 0.0042,0.05,25.5,40,990,1960,3.1,16.7,72,5,25,2,5,- 40,85,46,15,'Yingli YL330P-35b',14,46.4,9.29,37.4,8.84,330.0,1000,- 0.0032,- 0.0042,0.05,25.5,40,990,1960,3.1,17.0,72,5,25,2,5,- 40,85,46,15,'Yingli YL335P-35b',15,46.7,9.34,37.6,8.91,335.0,1000,- 0.0032,- 0.0042,0.05,25.5,40,990,1960,3.1,17.3,72,5,25,2,5,- 40,85,46,15])\n    #        type             no   ocv   scc   vmax  imax  pmax    Vmax  ocvt      otvmp    tcisc  weig  deph  widt  leng  icost    ef      ncel  tol   dur   tcell   tier   temp   TEMP   NOCT   Inop\n    brasilG = np.array(['Brasil Global GBR250p',1,37.5,8.92,30.0,8.35,250.0,1000,- 0.0034,- 0.0043,0.053,19.0,40,990,1640,2.5,15.39,60,5,25,2,3,- 40,85,50,15,'Brasil Global GBR255p',2,37.56,9.07,30.16,8.46,255.0,1000,- 0.0034,- 0.0043,0.053,19.0,40,990,1640,2.55,15.7,60,5,25,2,3,- 40,85,50,15,'Brasil Global GBR260p',3,37.65,9.11,30.24,8.6,260.0,1000,- 0.0034,- 0.0043,0.053,19.0,40,990,1640,2.6,16.05,60,5,25,2,3,- 40,85,50,15,'Brasil Global GBR265p',4,37.9,9.15,30.65,8.65,265.0,1000,- 0.0034,- 0.0043,0.053,19.0,40,990,1640,2.65,16.4,60,5,25,2,3,- 40,85,50,15,'Brasil Global GBR305p',5,41.2,9.19,35.8,8.53,305.0,1000,- 0.0034,- 0.0043,0.065,27.0,40,992,1956,3.05,15.7,72,5,25,2,3,- 40,85,50,15,'Brasil Global GBR310p',6,45.57,9.32,36.6,8.56,310.0,1000,- 0.0034,- 0.0043,0.065,27.0,40,992,1956,3.13,16.0,72,5,25,2,3,- 40,85,50,15,'Brasil Global GBR315p',7,45.38,9.5,36.6,8.61,315.0,1000,- 0.0034,- 0.0043,0.065,27.0,40,992,1956,3.15,16.5,72,5,25,2,3,- 40,85,50,15,'Brasil Global GBR320p',8,45.44,9.79,37.1,8.63,320.0,1000,- 0.0034,- 0.0043,0.065,27.0,40,992,1956,3.2,16.7,72,5,25,2,3,- 40,85,50,15])\n    #      type                 no   ocv   scc  vmax  imax  pmax    Vmax      ocvt    otvmp tcisc  weig  deph  widt   leng  icost    ef  ncel  tol   dur   tcell   tier  temp  TEMP   NOCT    Inop",
        "detail": "old.pv_parameters",
        "documentation": {}
    },
    {
        "label": "pv_parameters",
        "kind": 2,
        "importPath": "old.pv_parameters_matheus",
        "description": "old.pv_parameters_matheus",
        "peekOfCode": "def pv_parameters(pro = None): \n    ###########################################################################\n# Prepared by: Gustavo Dill - 25/07/2017\n    # Function show the datasheet parameters of the PV manufacturers\n    # O silicio amorfo � o que apresenta menor coeficiente de varia��o da\n# temperatura e por isto � o mais indicado para o Brasil\n###########################################################################\n    # ocv =  Open Circuit Voltage\n# scc = Short Circuit Current\n# vmax = M�ximum Voltage at 25�C",
        "detail": "old.pv_parameters_matheus",
        "documentation": {}
    },
    {
        "label": "#ncel",
        "kind": 5,
        "importPath": "old.pv_parameters_matheus",
        "description": "old.pv_parameters_matheus",
        "peekOfCode": "#ncel = number of cells by pv\n# tol = tolerance of the capacity (#)\n# dur = durability (years)\n# tcell = material of the cell [1]-monocristalino, [2]-policristalino\n# temp = minimum operational temperature\n#TEMP = maximum operational temperature\n#tier = IEC-61730; IEC-61215; IEC-62804; IEC-61701; IEC-60068;UL-1703;\n#NOCT = Nominal Operating Cell Temperature\n#Inop = max. series fuse rating\n    #       type            no   ocv   scc   vmp   imp     pmp  Vmax      ocvt    otvmp  tcisc  weig  deph  widt  leng  icost     ef  ncel  tol   dur   tcell   tier  temp   TEMP   NOCT   Inop",
        "detail": "old.pv_parameters_matheus",
        "documentation": {}
    },
    {
        "label": "#TEMP",
        "kind": 5,
        "importPath": "old.pv_parameters_matheus",
        "description": "old.pv_parameters_matheus",
        "peekOfCode": "#TEMP = maximum operational temperature\n#tier = IEC-61730; IEC-61215; IEC-62804; IEC-61701; IEC-60068;UL-1703;\n#NOCT = Nominal Operating Cell Temperature\n#Inop = max. series fuse rating\n    #       type            no   ocv   scc   vmp   imp     pmp  Vmax      ocvt    otvmp  tcisc  weig  deph  widt  leng  icost     ef  ncel  tol   dur   tcell   tier  temp   TEMP   NOCT   Inop\n    jinko = np.array(['Jinko_JKM450N-7RL3',1,51.5,11.32,42.9,10.49,450.0,1000,- 0.0028,- 0.0034,0.05,26.1,40,1029,2182,2.0,20.04,156,3,30,1,2,- 40,85,45,20,'Jinko_JKM455N-7RL3',2,51.6,11.41,43.0,10.58,455.0,1000,- 0.0028,- 0.0034,0.05,26.1,40,1029,2182,2.0,20.26,156,3,30,1,2,- 40,85,45,20,'Jinko_JKM460N-7RL3',3,51.7,11.5,43.1,10.67,460.0,1000,- 0.0028,- 0.0034,0.05,26.1,40,1029,2182,2.0,20.49,156,3,30,1,2,- 40,85,45,20,'Jinko_JKM465N-7RL3',4,51.9,11.59,43.2,10.76,465.0,1000,- 0.0028,- 0.0034,0.05,26.1,40,1029,2182,2.0,20.71,156,3,30,1,2,- 40,85,45,20,'Jinko_JKM470N-7RL3',5,52.1,11.68,43.3,10.85,470.0,1000,- 0.0028,- 0.0034,0.05,26.1,40,1029,2182,2.0,20.93,156,3,30,1,2,- 40,85,45,20,'Jinko_JKM375N-6RL3',6,43.5,11.23,35.9,10.44,375.0,1000,- 0.0028,- 0.0034,0.05,20.6,30,1029,1855,2.0,19.65,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM380N-6RL3',7,43.6,11.33,35.9,10.56,380.0,1000,- 0.0028,- 0.0034,0.05,20.6,30,1029,1855,2.0,19.91,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM385N-6RL3',8,43.7,11.43,36.0,10.68,385.0,1000,- 0.0028,- 0.0034,0.05,20.6,30,1029,1855,2.0,20.17,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM390N-6RL3',9,43.8,11.53,36.1,10.8,390.0,1000,- 0.0028,- 0.0034,0.05,20.6,30,1029,1855,2.0,20.43,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM395N-6RL3',10,43.9,11.63,36.2,10.92,395.0,1000,- 0.0028,- 0.0034,0.05,20.6,30,1029,1855,2.0,20.43,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM360N-6RL3-B',11,43.9,10.52,36.7,9.82,360.0,1000,- 0.0028,- 0.0034,0.05,20.8,30,1029,1855,2.0,18.86,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM365N-6RL3-B',12,44.0,10.63,36.8,9.93,365.0,1000,- 0.0028,- 0.0034,0.05,20.8,30,1029,1855,2.0,19.12,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM370N-6RL3-B',13,44.1,10.74,36.9,10.04,370.0,1000,- 0.0028,- 0.0034,0.05,20.8,30,1029,1855,2.0,19.38,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM375N-6RL3-B',14,44.2,10.85,36.9,10.15,375.0,1000,- 0.0028,- 0.0034,0.05,20.8,30,1029,1855,2.0,19.65,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM380N-6RL3-B',15,44.3,10.96,37.0,10.26,380.0,1000,- 0.0028,- 0.0034,0.05,20.8,30,1029,1855,2.0,19.91,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM445M-7RL3-TV',16,51.6,11.08,43.1,10.32,445.0,1500,- 0.0028,- 0.0035,0.05,25.0,35,1032,2205,2.0,19.56,156,3,30,1,2,- 40,85,45,25,'Jinko_JKM450M-7RL3-TV',17,51.7,11.17,43.2,10.42,450.0,1500,- 0.0028,- 0.0035,0.05,25.0,35,1032,2205,2.0,19.78,156,3,30,1,2,- 40,85,45,25,'Jinko_JKM455M-7RL3-TV',18,51.8,11.26,43.2,10.52,455.0,1500,- 0.0028,- 0.0035,0.05,25.0,35,1032,2205,2.0,20.0,156,3,30,1,2,- 40,85,45,25,'Jinko_JKM460M-7RL3-TV',19,51.9,11.35,43.3,10.62,460.0,1500,- 0.0028,- 0.0035,0.05,25.0,35,1032,2205,2.0,20.21,156,3,30,1,2,- 40,85,45,25,'Jinko_JKM465M-7RL3-TV',20,52.0,11.44,43.4,10.72,465.0,1500,- 0.0028,- 0.0035,0.05,25.0,35,1032,2205,2.0,20.43,156,3,30,1,2,- 40,85,45,25,'Jinko_JKM375M-6RL3',21,43.5,11.12,36.2,10.36,375.0,1000,- 0.0028,- 0.0035,0.05,20.8,30,1029,1855,2.0,19.65,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM380M-6RL3',22,43.6,11.21,36.3,10.47,380.0,1000,- 0.0028,- 0.0035,0.05,20.8,30,1029,1855,2.0,19.91,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM385M-6RL3',23,43.7,11.3,36.4,10.58,385.0,1000,- 0.0028,- 0.0035,0.05,20.8,30,1029,1855,2.0,20.17,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM390M-6RL3',24,43.8,11.39,36.5,10.69,390.0,1000,- 0.0028,- 0.0035,0.05,20.8,30,1029,1855,2.0,20.43,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM395M-6RL3',25,43.9,11.48,36.6,10.8,395.0,1000,- 0.0028,- 0.0035,0.05,20.8,30,1029,1855,2.0,20.69,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM360M-6RL3-B',26,43.8,10.68,36.5,9.86,360.0,1000,- 0.0028,- 0.0035,0.05,20.8,30,1029,1855,2.0,18.86,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM365M-6RL3-B',27,43.9,10.79,36.6,9.97,365.0,1000,- 0.0028,- 0.0035,0.05,20.8,30,1029,1855,2.0,19.12,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM370M-6RL3-B',28,44.0,10.9,36.7,10.08,370.0,1000,- 0.0028,- 0.0035,0.05,20.8,30,1029,1855,2.0,19.38,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM375M-6RL3-B',29,44.1,11.01,36.8,10.19,375.0,1000,- 0.0028,- 0.0035,0.05,20.8,30,1029,1855,2.0,19.65,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM380M-6RL3-B',30,44.2,11.12,36.9,10.3,380.0,1000,- 0.0028,- 0.0035,0.05,20.8,30,1029,1855,2.0,19.91,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM325M-60H',31,40.4,10.5,33.4,9.74,325.0,1000,- 0.0029,- 0.0035,0.05,18.5,30,1002,1684,2.0,19.26,120,3,25,1,3,- 40,85,45,20,'Jinko_JKM330M-60H',32,40.6,10.61,33.5,9.84,330.0,1000,- 0.0029,- 0.0035,0.05,18.5,30,1002,1684,2.0,19.56,120,3,25,1,3,- 40,85,45,20,'Jinko_JKM335M-60H',33,40.8,10.73,33.7,9.93,335.0,1000,- 0.0029,- 0.0035,0.05,18.5,30,1002,1684,2.0,19.85,120,3,25,1,3,- 40,85,45,20,'Jinko_JKM340M-60H',34,41.0,10.82,33.9,10.02,340.0,1000,- 0.0029,- 0.0035,0.05,18.5,30,1002,1684,2.0,20.15,120,3,25,1,3,- 40,85,45,20,'Jinko_JKM345M-60H',35,41.2,10.91,34.1,10.11,345.0,1000,- 0.0029,- 0.0035,0.05,18.5,30,1002,1684,2.0,20.45,120,3,25,1,3,- 40,85,45,20,'Jinko_JKM390M-72H',36,48.6,10.46,39.6,9.84,390.0,1000,- 0.0029,- 0.0035,0.05,22.0,30,1002,2008,2.0,19.38,144,3,25,1,2,- 40,85,45,20,'Jinko_JKM395M-72H',37,48.8,10.54,39.9,9.9,395.0,1000,- 0.0029,- 0.0035,0.05,22.0,30,1002,2008,2.0,19.63,144,3,25,1,2,- 40,85,45,20,'Jinko_JKM400M-72H',38,49.1,10.61,40.2,9.96,400.0,1000,- 0.0029,- 0.0035,0.05,22.0,30,1002,2008,2.0,19.88,144,3,25,1,2,- 40,85,45,20,'Jinko_JKM405M-72H',39,49.4,10.69,40.4,10.02,405.0,1000,- 0.0029,- 0.0035,0.05,22.0,30,1002,2008,2.0,20.13,144,3,25,1,2,- 40,85,45,20,'Jinko_JKM410M-72H',40,49.6,10.76,40.7,10.08,410.0,1000,- 0.0029,- 0.0035,0.05,22.0,30,1002,2008,2.0,20.38,144,3,25,1,2,- 40,85,45,20,'Jinko_JKM320M-60H',41,40.2,10.31,33.2,9.65,320.0,1000,- 0.0028,- 0.0035,0.05,18.5,30,1002,1684,2.0,18.96,120,3,25,1,3,- 40,85,45,20,'Jinko_JKM325M-60H',42,40.4,10.5,33.4,9.74,325.0,1000,- 0.0028,- 0.0035,0.05,18.5,30,1002,1684,2.0,19.26,120,3,25,1,3,- 40,85,45,20,'Jinko_JKM330M-60H',43,40.6,10.61,33.5,9.84,330.0,1000,- 0.0028,- 0.0035,0.05,18.5,30,1002,1684,2.0,19.56,120,3,25,1,3,- 40,85,45,20,'Jinko_JKM335M-60H',44,40.8,10.73,33.7,9.93,335.0,1000,- 0.0028,- 0.0035,0.05,18.5,30,1002,1684,2.0,19.86,120,3,25,1,3,- 40,85,45,20,'Jinko_JKM340M-60H',45,41.0,10.82,33.9,10.02,340.0,1000,- 0.0028,- 0.0035,0.05,18.5,30,1002,1684,2.0,20.16,120,3,25,1,3,- 40,85,45,20,'Jinko_JKM345M-66H',46,43.6,10.13,36.6,9.42,345.0,1000,- 0.0029,- 0.0035,0.05,20.0,30,1002,1841,2.0,18.7,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM350M-66H',47,43.6,10.25,36.7,9.54,350.0,1000,- 0.0029,- 0.0035,0.05,20.0,30,1002,1841,2.0,18.97,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM355M-66H',48,43.7,10.37,36.8,9.66,355.0,1000,- 0.0029,- 0.0035,0.05,20.0,30,1002,1841,2.0,19.24,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM360M-66H',49,43.7,10.49,36.8,9.78,360.0,1000,- 0.0029,- 0.0035,0.05,20.0,30,1002,1841,2.0,19.52,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM365M-66H',50,43.7,10.61,36.9,9.9,365.0,1000,- 0.0029,- 0.0035,0.05,20.0,30,1002,1841,2.0,19.79,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM370M-66H',51,43.8,10.62,37.2,9.96,370.0,1000,- 0.0029,- 0.0035,0.05,20.0,30,1002,1841,2.0,20.06,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM375M-66H',52,44.0,10.69,37.2,10.07,375.0,1000,- 0.0029,- 0.0035,0.05,20.0,30,1002,1841,2.0,20.33,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM425M-78H',53,51.4,10.48,43.2,9.83,425.0,1000,- 0.0028,- 0.0035,0.05,24.0,35,1002,2166,2.0,19.58,156,3,25,1,3,- 40,85,45,20,'Jinko_JKM430M-78H',54,51.5,10.57,43.5,9.89,430.0,1000,- 0.0028,- 0.0035,0.05,24.0,35,1002,2166,2.0,19.81,156,3,25,1,3,- 40,85,45,20,'Jinko_JKM435M-78H',55,51.6,10.67,43.6,9.99,435.0,1000,- 0.0028,- 0.0035,0.05,24.0,35,1002,2166,2.0,20.04,156,3,25,1,3,- 40,85,45,20,'Jinko_JKM440M-78H',56,51.7,10.77,43.7,10.08,440.0,1000,- 0.0028,- 0.0035,0.05,24.0,35,1002,2166,2.0,20.27,156,3,25,1,3,- 40,85,45,20,'Jinko_JKM445M-78H',57,52.0,10.84,43.7,10.18,445.0,1000,- 0.0028,- 0.0035,0.05,24.0,35,1002,2166,2.0,20.5,156,3,25,1,3,- 40,85,45,20,'Jinko_JKM385M-72HBDVP',58,48.1,10.32,39.5,9.76,385.0,1500,- 0.0029,- 0.0035,0.05,26.6,30,1008,2031,2.0,18.81,144,3,30,1,2,- 40,85,45,25,'Jinko_JKM390M-72HBDVP',59,48.1,10.41,39.6,9.84,390.0,1500,- 0.0029,- 0.0035,0.05,26.6,30,1008,2031,2.0,19.05,144,3,30,1,2,- 40,85,45,25,'Jinko_JKM395M-72HBDVP',60,48.3,10.5,39.8,9.92,395.0,1500,- 0.0029,- 0.0035,0.05,26.6,30,1008,2031,2.0,19.29,144,3,30,1,2,- 40,85,45,25,'Jinko_JKM400M-72HBDVP',61,48.3,10.59,40.0,10.0,400.0,1500,- 0.0029,- 0.0035,0.05,26.6,30,1008,2031,2.0,19.54,144,3,30,1,2,- 40,85,45,25,'Jinko_JKM405M-72HBDVP',62,48.4,10.68,40.2,10.08,405.0,1500,- 0.0029,- 0.0035,0.05,26.6,30,1008,2031,2.0,19.78,144,3,30,1,2,- 40,85,45,25,'Jinko_JKM385M-72-TV',63,48.1,10.08,39.5,9.76,385.0,1500,- 0.0029,- 0.0035,0.05,22.3,30,1008,2031,2.0,18.81,144,3,30,1,2,- 40,85,45,25,'Jinko_JKM390M-72-TV',64,48.1,10.17,39.6,9.84,390.0,1500,- 0.0029,- 0.0035,0.05,22.3,30,1008,2031,2.0,19.05,144,3,30,1,2,- 40,85,45,25,'Jinko_JKM395M-72-TV',65,48.3,10.23,39.8,9.92,395.0,1500,- 0.0029,- 0.0035,0.05,22.3,30,1008,2031,2.0,19.29,144,3,30,1,2,- 40,85,45,25,'Jinko_JKM400M-72-TV',66,48.3,10.32,40.0,10.0,400.0,1500,- 0.0029,- 0.0035,0.05,22.3,30,1008,2031,2.0,19.54,144,3,30,1,2,- 40,85,45,25,'Jinko_JKM405M-72-TV',67,48.4,10.42,40.2,10.08,405.0,1500,- 0.0029,- 0.0035,0.05,22.3,30,1008,2031,2.0,19.78,144,3,30,1,2,- 40,85,45,25])\n    #type                                no   ocv   scc  vmax  imax    pmax  Vmax      ocvt   otvmp   tcisc  weig  deph  widt  leng  icost     ef  ncel  tol   dur   tcell   tier   temp   TEMP   NOCT    Inop\n    canadian = np.array(['Canadian CS6K260P',1,37.5,9.12,30.4,8.56,260.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.6,15.88,60,5,25,2,6,- 40,85,45,15,'Canadian CS6K265P',2,37.7,9.23,30.6,8.66,265.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.64,16.19,60,5,25,2,6,- 40,85,45,15,'Canadian CS6K270P',3,37.9,9.32,30.8,8.75,270.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.69,16.5,60,5,25,2,6,- 40,85,45,15,'Canadian CS6K275P',4,38.0,9.45,31.0,8.88,275.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.75,16.8,60,5,25,2,6,- 40,85,45,15,'Canadian CS6K275M',5,38.3,9.31,31.3,8.8,275.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.75,16.8,60,5,25,1,6,- 40,85,45,15,'Canadian CS6K280M',6,38.5,9.43,31.5,8.89,280.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.8,17.11,60,5,25,1,6,- 40,85,45,15,'Canadian CS6K285M',7,38.6,9.51,31.7,8.98,285.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.85,17.41,60,5,25,1,6,- 40,85,45,15,'Canadian CS6X310P',8,44.9,9.08,36.4,8.52,310.0,1000,- 0.0031,- 0.0041,0.053,22.0,40,982,1954,3.1,16.16,72,5,25,2,6,- 40,85,43,15,'Canadian CS6X315P',9,45.1,9.18,36.6,8.61,315.0,1000,- 0.0031,- 0.0041,0.053,22.0,40,982,1954,3.15,16.42,72,5,25,2,6,- 40,85,43,15,'Canadian CS6X320P',10,45.3,9.26,36.8,8.69,320.0,1000,- 0.0031,- 0.0041,0.053,22.0,40,982,1954,3.2,16.68,72,5,25,2,6,- 40,85,43,15,'Canadian CS6X325P',11,45.5,9.34,37.0,8.78,325.0,1000,- 0.0031,- 0.0041,0.053,22.0,40,982,1954,3.25,16.94,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U325P',12,45.5,9.34,37.0,8.78,325.0,1000,- 0.0031,- 0.0041,0.05,22.4,40,992,1960,3.25,16.72,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U330P',13,45.6,9.45,37.2,8.88,330.0,1000,- 0.0031,- 0.0041,0.05,22.4,40,992,1960,3.3,16.97,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U335P',14,45.8,9.54,37.4,8.96,335.0,1000,- 0.0031,- 0.0041,0.05,22.4,40,992,1960,3.35,17.23,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U340P',15,45.9,9.62,37.6,9.05,340.0,1000,- 0.0029,- 0.0039,0.05,22.4,40,992,1960,3.4,17.49,72,5,25,2,6,- 40,85,43,15,'Canadian CS6X330P-FG',16,45.6,9.45,37.2,8.88,330.0,1000,- 0.0031,- 0.004,0.05,27.5,8.5,971,1971,3.25,16.9,72,5,30,2,6,- 40,85,43,15,'Canadian CS6X335P-FG',17,45.8,9.54,37.4,8.96,335.0,1000,- 0.0031,- 0.004,0.05,27.5,8.5,971,1971,3.25,17.16,72,5,30,2,6,- 40,85,43,15,'Canadian CS6X340P-FG',18,45.9,9.62,37.6,9.05,340.0,1000,- 0.0029,- 0.0039,0.05,27.5,8.5,971,1971,3.25,17.42,72,5,30,2,6,- 40,85,43,15,'Canadian CS6X345P-FG',19,46.0,9.69,37.8,9.13,345.0,1000,- 0.0029,- 0.0039,0.05,27.5,8.5,971,1971,3.25,17.67,72,5,30,2,6,- 40,85,43,15,'Canadian CS6X350P-FG',20,46.2,9.79,38.1,9.21,350.0,1000,- 0.0029,- 0.0039,0.05,27.5,8.5,971,1971,3.25,17.93,72,5,30,2,6,- 40,85,43,15,'Canadian CS6X355P-FG',21,46.4,9.84,38.2,9.3,355.0,1000,- 0.0029,- 0.0039,0.05,27.5,8.5,971,1971,3.25,18.18,72,5,30,2,6,- 40,85,43,15,'Canadian CS6K285P-FG Dymond',22,38.3,9.64,31.4,9.06,285.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,3.25,17.33,60,5,30,2,6,- 40,85,43,15,'Canadian CS6K290P-FG Dymond',23,38.5,9.72,31.6,9.18,290.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,3.25,17.63,60,5,30,2,6,- 40,85,43,15,'Canadian CS6K295P-FG Dymond',24,38.6,9.81,31.8,9.28,295.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,3.25,17.94,60,5,30,2,6,- 40,85,43,15,'Canadian CS6K290MS-FG Dymond',25,39.3,9.67,32.1,9.05,290.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,2.85,17.72,60,5,30,2,6,- 40,85,42,15,'Canadian CS6K295MS-FG Dymond',26,39.5,9.75,32.3,9.14,295.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,2.85,18.02,60,5,30,2,6,- 40,85,42,15,'Canadian CS6K300MS-FG Dymond',27,39.7,9.83,32.5,9.24,300.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,2.85,18.33,60,5,30,2,6,- 40,85,42,15,'Canadian CS6K305MS-FG Dymond',28,39.9,9.91,32.7,9.33,305.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,2.85,18.54,60,5,30,2,6,- 40,85,42,15,'Canadian CS6K295MS-FG All black',29,39.5,9.75,32.3,9.14,295.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,17.72,60,5,25,1,6,- 40,85,43,15,'Canadian CS6K300MS-FG All black',30,39.7,9.83,32.5,9.24,300.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.33,60,5,25,1,6,- 40,85,43,15,'Canadian CS6K305MS-FG All black',31,39.9,9.91,32.7,9.33,305.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.63,60,5,25,1,6,- 40,85,43,15,'Canadian CS6K310MS-FG All black',32,40.1,9.99,32.9,9.43,310.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.94,60,5,25,1,6,- 40,85,43,15,'Canadian CS6K285P',33,38.3,9.64,31.4,9.06,285.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,17.41,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K290P',34,38.5,9.72,31.6,9.18,290.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,17.72,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K295P',35,38.6,9.81,31.8,9.28,295.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.02,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K300P',36,38.8,9.92,32.0,9.38,300.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.33,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K305P',37,38.9,10.03,32.1,9.5,305.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.63,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K280P',38,38.2,9.52,31.3,8.95,280.0,1000,- 0.0031,- 0.004,0.05,18.2,35,992,1650,2.85,17.11,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K300MS Superpower',39,39.7,9.83,32.5,9.24,300.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.33,60,5,25,2,6,- 40,85,42,15,'Canadian CS6K305MS Superpower',40,39.9,9.91,32.7,9.33,305.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.63,60,5,25,2,6,- 40,85,42,15,'Canadian CS6K310MS Superpower',41,40.1,9.99,32.9,9.43,310.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.94,60,5,25,2,6,- 40,85,42,15,'Canadian CS6K315MS Superpower',42,40.3,10.07,33.1,9.52,315.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,19.24,60,5,25,2,6,- 40,85,42,15,'Canadian CS6U345P',43,46.0,9.69,37.8,9.13,345.0,1000,- 0.0029,- 0.0039,0.05,22.4,35,992,1960,3.4,17.74,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U350P',44,46.2,9.79,38.1,9.21,350.0,1000,- 0.0029,- 0.0039,0.05,22.4,35,992,1960,3.4,18.0,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U355P',45,46.4,9.84,38.2,9.3,355.0,1000,- 0.0029,- 0.0039,0.05,22.4,35,992,1960,3.4,18.26,72,5,25,2,6,- 40,85,43,15,'Canadian CS3U355P',46,46.8,9.59,39.4,9.02,355.0,1000,- 0.0029,- 0.0037,0.05,22.4,35,992,2000,3.4,17.89,144,5,25,2,6,- 40,85,42,15,'Canadian CS3U360P',47,47.0,9.67,39.6,9.1,360.0,1000,- 0.0029,- 0.0037,0.05,22.4,35,992,2000,3.4,18.15,144,5,25,2,6,- 40,85,42,15,'Canadian CS3U365P',48,47.2,9.75,39.8,9.18,365.0,1000,- 0.0029,- 0.0037,0.05,22.4,35,992,2000,3.4,18.4,144,5,25,2,6,- 40,85,42,15,'Canadian CS3U370P',49,47.4,9.83,40.0,9.26,365.0,1000,- 0.0029,- 0.0037,0.05,22.4,35,992,2000,3.4,18.65,144,5,25,2,6,- 40,85,42,15,'Canadian CS3U335P',50,45.7,9.28,38.2,8.77,335.0,1000,- 0.0031,- 0.0038,0.05,22.4,35,992,2000,3.4,16.89,144,5,25,2,6,- 40,85,43,15,'Canadian CS3U340P',51,45.9,9.36,38.4,8.86,340.0,1000,- 0.0031,- 0.0038,0.05,22.4,35,992,2000,3.4,17.14,144,5,25,2,6,- 40,85,43,15,'Canadian CS3U345P',52,46.1,9.44,38.6,8.94,345.0,1000,- 0.0031,- 0.0038,0.05,22.4,35,992,2000,3.4,17.39,144,5,25,2,6,- 40,85,43,15,'Canadian CS3U350P',53,46.6,9.51,39.2,8.94,350.0,1000,- 0.0031,- 0.0038,0.05,22.4,35,992,2000,3.4,17.64,144,5,25,2,6,- 40,85,43,15,'Canadian CS3U375MS',54,47.6,9.93,39.8,9.43,375.0,1000,- 0.0029,- 0.0036,0.05,22.5,35,992,2000,3.4,18.9,144,5,25,1,6,- 40,85,42,15,'Canadian CS3U380MS',55,47.8,10.01,40.0,9.5,380.0,1000,- 0.0029,- 0.0036,0.05,22.5,35,992,2000,3.4,19.15,144,5,25,1,6,- 40,85,42,15,'Canadian CS3U385MS',56,48.0,10.09,40.2,9.58,385.0,1000,- 0.0029,- 0.0036,0.05,22.5,35,992,2000,3.4,19.41,144,5,25,1,6,- 40,85,42,15,'Canadian CS3U390MS',57,48.2,10.17,40.4,9.66,390.0,1000,- 0.0029,- 0.0036,0.05,22.5,35,992,2000,3.4,19.66,144,5,25,1,6,- 40,85,42,15,'Canadian CS3U395MS',58,48.4,10.25,40.6,9.73,395.0,1000,- 0.0029,- 0.0036,0.05,22.5,35,992,2000,3.4,19.91,144,5,25,1,6,- 40,85,42,15,'Canadian CS3K295P',59,39.1,9.57,32.5,9.08,295.0,1000,- 0.0029,- 0.0037,0.05,18.5,35,992,1675,3.4,17.75,120,5,25,2,6,- 40,85,42,30,'Canadian CS3K300P',60,39.3,9.65,32.7,9.18,300.0,1000,- 0.0029,- 0.0037,0.05,18.5,35,992,1675,3.4,18.05,120,5,25,2,6,- 40,85,42,30,'Canadian CS3K305P',61,39.5,9.73,32.9,9.28,305.0,1000,- 0.0029,- 0.0037,0.05,18.5,35,992,1675,3.4,18.36,120,5,25,2,6,- 40,85,42,30,'Canadian CS3K310P',62,39.7,9.81,33.1,9.37,310.0,1000,- 0.0029,- 0.0037,0.05,18.5,35,992,1675,3.4,18.66,120,5,25,2,6,- 40,85,42,30,'Canadian CS3K275P',63,37.7,9.38,31.0,8.88,275.0,1000,- 0.0031,- 0.0038,0.05,18.5,35,992,1675,3.4,16.65,120,5,25,2,6,- 40,85,43,30,'Canadian CS3K280P',64,37.9,9.47,31.2,8.98,280.0,1000,- 0.0031,- 0.0038,0.05,18.5,35,992,1675,3.4,16.85,120,5,25,2,6,- 40,85,43,30,'Canadian CS3K285P',65,38.1,9.56,31.4,9.08,285.0,1000,- 0.0031,- 0.0038,0.05,18.5,35,992,1675,3.4,17.15,120,5,25,2,6,- 40,85,43,30,'Canadian CS3K290P',66,38.9,9.49,32.3,8.98,290.0,1000,- 0.0031,- 0.0038,0.05,18.5,35,992,1675,3.4,17.45,120,5,25,2,6,- 40,85,43,30,'Canadian CS3K295P',67,38.9,9.49,32.3,8.98,290.0,1000,- 0.0031,- 0.0038,0.05,18.5,35,992,1675,3.4,17.45,120,5,25,2,6,- 40,85,43,30,'Canadian CS3K315MS',68,39.9,10.06,31.1,9.52,315.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,18.96,120,5,25,1,6,- 40,85,42,30,'Canadian CS3K320MS',69,40.1,10.14,33.3,9.61,320.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,19.26,120,5,25,1,6,- 40,85,42,30,'Canadian CS3K325MS',70,40.3,10.22,33.5,9.71,325.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,19.56,120,5,25,1,6,- 40,85,42,30,'Canadian CS3K330MS',71,40.5,10.3,33.7,9.8,330.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,19.86,120,5,25,1,6,- 40,85,42,30,'Canadian CS3K295MS',72,39.1,9.73,32.3,9.14,295.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,17.75,120,5,25,1,6,- 40,85,43,30,'Canadian CS3K300MS',73,39.3,9.82,32.5,9.24,300.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,18.05,120,5,25,1,6,- 40,85,43,30,'Canadian CS3K305MS',74,39.5,9.9,32.7,9.33,305.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,18.36,120,5,25,1,6,- 40,85,43,30,'Canadian CS3K310MS',75,39.7,9.98,32.9,9.43,310.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,18.66,120,5,25,1,6,- 40,85,43,30,'Canadian CS3U355P-FG Dymond',76,46.8,9.59,39.4,9.02,355.0,1000,- 0.0029,- 0.0037,0.05,29.0,8.5,995,2003,3.4,17.89,144,5,30,2,6,- 40,85,42,30,'Canadian CS3U360P-FG Dymond',77,47.0,9.67,39.6,9.1,360.0,1000,- 0.0029,- 0.0037,0.05,29.0,8.5,995,2003,3.4,18.15,144,5,30,2,6,- 40,85,42,30,'Canadian CS3U365P-FG Dymond',78,47.2,9.75,39.8,9.18,365.0,1000,- 0.0029,- 0.0037,0.05,29.0,8.5,995,2003,3.4,18.4,144,5,30,2,6,- 40,85,42,30,'Canadian CS3U370P-FG Dymond',79,47.4,9.83,40.0,9.26,370.0,1000,- 0.0029,- 0.0037,0.05,29.0,8.5,995,2003,3.4,18.65,144,5,30,2,6,- 40,85,42,30,'Canadian CS3U335P-FG Dymond',80,45.7,9.28,38.2,8.77,335.0,1000,- 0.0031,- 0.0038,0.05,29.0,8.5,995,2003,3.4,16.89,144,5,30,2,6,- 40,85,43,30,'Canadian CS3U340P-FG Dymond',81,45.9,9.36,38.4,8.86,340.0,1000,- 0.0031,- 0.0038,0.05,29.0,8.5,995,2003,3.4,17.14,144,5,30,2,6,- 40,85,43,30,'Canadian CS3U345P-FG Dymond',82,46.1,9.44,38.6,8.94,345.0,1000,- 0.0031,- 0.0038,0.05,29.0,8.5,995,2003,3.4,17.39,144,5,30,2,6,- 40,85,43,30,'Canadian CS3U350P-FG Dymond',83,46.6,9.51,39.2,8.94,350.0,1000,- 0.0031,- 0.0038,0.05,29.0,8.5,995,2003,3.4,17.64,144,5,30,2,6,- 40,85,43,30,'Canadian CS3U375MS-FG Dymond',84,47.6,9.93,39.8,9.43,375.0,1000,- 0.0029,- 0.0036,0.05,29.0,8.5,995,2003,3.4,18.9,144,5,30,1,6,- 40,85,42,30,'Canadian CS3U380MS-FG Dymond',85,47.8,10.01,40.0,9.5,380.0,1000,- 0.0029,- 0.0036,0.05,29.0,8.5,995,2003,3.4,19.15,144,5,30,1,6,- 40,85,42,30,'Canadian CS3U385MS-FG Dymond',86,48.0,10.09,40.2,9.58,385.0,1000,- 0.0029,- 0.0036,0.05,29.0,8.5,995,2003,3.4,19.41,144,5,30,1,6,- 40,85,42,30,'Canadian CS3U390MS-FG Dymond',87,48.2,10.17,40.4,9.66,390.0,1000,- 0.0029,- 0.0036,0.05,29.0,8.5,995,2003,3.4,19.66,144,5,30,1,6,- 40,85,42,30,'Canadian CS3U395MS-FG Dymond',88,48.4,10.25,40.6,9.73,395.0,1000,- 0.0029,- 0.0036,0.05,29.0,8.5,995,2003,3.4,19.91,144,5,30,1,6,- 40,85,42,30,'Canadian CS3K295MS-FG Dymond',89,39.1,9.57,32.5,9.08,295.0,1000,- 0.0029,- 0.0037,0.05,24.0,8.5,995,1678,3.4,17.75,120,5,30,2,6,- 40,85,43,30,'Canadian CS3K300MS-FG Dymond',90,39.3,9.65,32.7,9.18,300.0,1000,- 0.0029,- 0.0037,0.05,24.0,8.5,995,1678,3.4,18.05,120,5,30,2,6,- 40,85,43,30,'Canadian CS3K305MS-FG Dymond',91,39.5,9.73,32.9,9.28,305.0,1000,- 0.0029,- 0.0037,0.05,24.0,8.5,995,1678,3.4,18.36,120,5,30,2,6,- 40,85,43,30,'Canadian CS3K310MS-FG Dymond',92,39.7,9.81,33.1,9.37,310.0,1000,- 0.0029,- 0.0037,0.05,24.0,8.5,995,1678,3.4,18.66,120,5,30,2,6,- 40,85,43,30,'Canadian CS3K275P-FG Dymond',93,37.7,9.38,31.0,8.88,275.0,1000,- 0.0031,- 0.0038,0.05,24.0,8.5,995,1678,3.4,16.55,120,5,30,2,6,- 40,85,42,30,'Canadian CS3K280P-FG Dymond',94,37.9,9.47,31.2,8.98,280.0,1000,- 0.0031,- 0.0038,0.05,24.0,8.5,995,1678,3.4,16.85,120,5,30,2,6,- 40,85,42,30,'Canadian CS3K285P-FG Dymond',95,38.1,9.56,31.4,9.08,285.0,1000,- 0.0031,- 0.0038,0.05,24.0,8.5,995,1678,3.4,17.15,120,5,30,2,6,- 40,85,42,30,'Canadian CS3K290P-FG Dymond',96,38.9,9.49,32.3,8.98,290.0,1000,- 0.0031,- 0.0038,0.05,24.0,8.5,995,1678,3.4,17.45,120,5,30,2,6,- 40,85,42,30,'Canadian CS3K315MS-FG Dymond',97,39.9,10.06,33.1,9.52,315.0,1000,- 0.0029,- 0.0036,0.05,24.0,8.5,995,1678,3.4,18.96,120,5,30,1,6,- 40,85,42,30,'Canadian CS3K320MS-FG Dymond',98,40.1,10.14,33.3,9.61,320.0,1000,- 0.0029,- 0.0036,0.05,24.0,8.5,995,1678,3.4,19.26,120,5,30,1,6,- 40,85,42,30,'Canadian CS3K325MS-FG Dymond',99,40.3,10.22,33.5,9.71,325.0,1000,- 0.0029,- 0.0036,0.05,24.0,8.5,995,1678,3.4,19.56,120,5,30,1,6,- 40,85,42,30,'Canadian CS3K330MS-FG Dymond',100,40.5,10.3,33.7,9.8,330.0,1000,- 0.0029,- 0.0036,0.05,24.0,8.5,995,1678,3.4,19.86,120,5,30,1,6,- 40,85,42,30,'Canadian CS3W-390PB-AG',101,46.8,10.74,38.3,10.19,390.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,17.5,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-395PB-AG',102,47.0,10.82,38.5,10.26,395.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,17.7,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-400PB-AG',103,47.2,10.9,38.7,10.34,400.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,17.9,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-405PB-AG',104,47.4,10.98,38.9,10.42,405.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,18.1,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-410PB-AG',105,47.6,11.06,39.1,10.49,410.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,18.3,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-415PB-AG',106,47.8,11.14,39.3,10.56,415.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,18.6,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-420PB-AG',107,48.0,11.26,39.5,10.64,420.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,18.8,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-425PB-AG',108,48.2,11.29,39.7,10.71,425.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,19.0,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-430PB-AG',109,48.4,11.32,39.9,10.78,430.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,19.2,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-435PB-AG',110,48.6,11.35,40.1,10.85,435.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,19.5,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-440PB-AG',111,48.7,11.4,40.3,10.92,440.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,19.7,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-420MB-AG',112,47.9,11.27,39.9,10.53,420.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,18.8,144,5,30,1,4,- 40,85,41,25,'Canadian CS3W-425MB-AG',113,48.1,11.32,40.1,10.6,425.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,19.0,144,5,30,1,4,- 40,85,41,25,'Canadian CS3W-430MB-AG',114,48.3,11.37,40.3,10.68,430.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,19.2,144,5,30,1,4,- 40,85,41,25,'Canadian CS3W-435MB-AG',115,48.5,11.42,40.5,10.75,435.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,19.5,144,5,30,1,4,- 40,85,41,25,'Canadian CS3W-440MB-AG',116,48.7,11.48,40.7,10.82,440.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,19.7,144,5,30,1,4,- 40,85,41,25,'Canadian CS3W-445MB-AG',117,48.9,11.54,40.9,10.89,445.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,19.9,144,5,30,1,4,- 40,85,41,25])\n    #      type            no   ocv   scc  vmax  imax    pmax  Vmax      ocvt    otvmp tcisc   weig  deph  widt  leng  icost     ef  ncel  tol   dur   tcell   tier   temp   TEMP   NOCT    Inop\n    yingli = np.array(['Yingli YL340D-36b',1,46.1,9.3,38.3,8.88,340.0,1000,- 0.003,- 0.0039,0.06,22.0,40,992,1960,2.6,17.5,72,5,25,1,2,- 40,85,45,15,'Yingli YL345D-36b',2,46.3,9.4,38.6,8.94,345.0,1000,- 0.003,- 0.0039,0.06,22.0,40,992,1960,2.6,17.7,72,5,25,1,2,- 40,85,45,15,'Yingli YL350D-36b',3,46.4,9.5,38.8,9.03,350.0,1000,- 0.003,- 0.0039,0.06,22.0,40,992,1960,2.6,18.0,72,5,25,1,2,- 40,85,45,15,'Yingli YL360D-36b',4,46.6,9.7,39.3,9.17,360.0,1000,- 0.003,- 0.0039,0.06,22.0,40,992,1960,2.6,18.5,72,5,25,1,2,- 40,85,45,15,'Yingli YL365D-36b',5,48.1,9.73,39.7,9.2,365.0,1000,- 0.003,- 0.0039,0.06,22.0,40,992,1960,2.6,18.8,72,5,25,1,2,- 40,85,45,15,'Yingli YL370D-36b',6,48.2,9.8,39.8,9.3,370.0,1000,- 0.003,- 0.0039,0.06,22.0,40,992,1960,2.6,19.0,72,5,25,1,2,- 40,85,45,15,'Yingli YL375D-36b',7,48.3,9.87,39.9,9.4,375.0,1000,- 0.003,- 0.0039,0.06,22.0,40,992,1960,2.6,19.3,72,5,25,1,2,- 40,85,45,15,'Yingli YL320D-35b',8,45.2,9.25,36.5,8.78,320.0,1000,- 0.003,- 0.0039,0.05,22.0,40,992,1960,2.6,16.5,72,5,25,1,2,- 40,85,45,15,'Yingli YL325D-35b',9,45.4,9.29,36.9,8.82,325.0,1000,- 0.003,- 0.0039,0.05,22.0,40,992,1960,2.6,16.7,72,5,25,1,2,- 40,85,45,15,'Yingli YL330D-35b',10,45.6,9.33,37.3,8.85,330.0,1000,- 0.003,- 0.0039,0.05,22.0,40,992,1960,2.6,17.0,72,5,25,1,2,- 40,85,45,15,'Yingli YL335D-35b',11,45.7,9.37,37.7,8.89,335.0,1000,- 0.003,- 0.0039,0.05,22.0,40,992,1960,2.6,17.2,72,5,25,1,2,- 40,85,45,15,'Yingli YL340D-35b',12,45.9,9.41,38.1,8.93,340.0,1000,- 0.003,- 0.0039,0.05,22.0,40,992,1960,2.6,17.5,72,5,25,1,2,- 40,85,45,15,'Yingli YL345D-35b',13,46.1,9.45,38.5,8.97,345.0,1000,- 0.003,- 0.0039,0.05,22.0,40,992,1960,2.6,17.7,72,5,25,1,2,- 40,85,45,15,'Yingli YL270D-29b',14,37.7,9.26,30.8,8.77,270.0,1000,- 0.003,- 0.0039,0.05,18.5,35,992,1650,2.6,16.5,60,5,25,1,2,- 40,85,45,15,'Yingli YL275D-29b',15,37.8,9.36,31.0,8.88,275.0,1000,- 0.003,- 0.0039,0.05,18.5,35,992,1650,2.6,16.8,60,5,25,1,2,- 40,85,45,15,'Yingli YL280D-29b',16,38.0,9.45,31.3,8.95,280.0,1000,- 0.003,- 0.0039,0.05,18.5,35,992,1650,2.6,17.1,60,5,25,1,2,- 40,85,45,15,'Yingli YL285D-29b',17,38.2,9.55,31.5,9.05,285.0,1000,- 0.003,- 0.0039,0.05,18.5,35,992,1650,2.6,17.4,60,5,25,1,2,- 40,85,45,15,'Yingli YL290D-29b',18,38.4,9.65,31.7,9.15,290.0,1000,- 0.003,- 0.0039,0.05,18.5,35,992,1650,2.6,17.7,60,5,25,1,2,- 40,85,45,15,'Yingli YL295D-29b',19,38.5,9.74,32.0,9.22,295.0,1000,- 0.003,- 0.0039,0.05,18.5,35,992,1650,2.6,18.0,60,5,25,1,2,- 40,85,45,15,'Yingli YL370CG2536F1',20,45.8,10.76,36.7,10.13,370.0,1500,- 0.003,- 0.0038,0.04,29.2,32,998,1981,2.6,18.7,72,5,30,1,2,- 40,85,39,20,'Yingli YL375CG2536F1',21,46.1,10.79,37.1,10.19,375.0,1500,- 0.003,- 0.0038,0.04,29.2,32,998,1981,2.6,19.0,72,5,30,1,2,- 40,85,39,20,'Yingli YL380CG2536F1',22,46.3,10.83,37.4,10.24,380.0,1500,- 0.003,- 0.0038,0.04,29.2,32,998,1981,2.6,19.2,72,5,30,1,2,- 40,85,39,20,'Yingli YL385CG2536F1',23,46.5,10.87,37.7,10.3,385.0,1500,- 0.003,- 0.0038,0.04,29.2,32,998,1981,2.6,19.5,72,5,30,1,2,- 40,85,39,20,'Yingli YL390CG2536F1',24,46.7,10.91,38.0,10.36,390.0,1500,- 0.003,- 0.0038,0.04,29.2,32,998,1981,2.6,19.7,72,5,30,1,2,- 40,85,39,20,'Yingli YL370CG2536L1',25,45.8,10.76,36.7,10.13,370.0,1500,- 0.003,- 0.0038,0.04,27.5,6,992,1975,2.6,18.9,72,5,30,1,2,- 40,85,39,20,'Yingli YL375CG2536L1',21,46.1,10.79,37.1,10.19,375.0,1500,- 0.003,- 0.0038,0.04,27.5,6,992,1975,2.6,19.1,72,5,30,1,2,- 40,85,39,20,'Yingli YL380CG2536F1',22,46.3,10.83,37.4,10.24,380.0,1500,- 0.003,- 0.0038,0.04,27.5,6,992,1975,2.6,19.4,72,5,30,1,2,- 40,85,39,20,'Yingli YL385CG2536F1',23,46.5,10.87,37.7,10.3,385.0,1500,- 0.003,- 0.0038,0.04,27.5,6,992,1975,2.6,19.7,72,5,30,1,2,- 40,85,39,20,'Yingli YL390CG2536F1',24,46.7,10.91,38.0,10.36,390.0,1500,- 0.003,- 0.0038,0.04,27.5,6,992,1975,2.6,19.9,72,5,30,1,2,- 40,85,39,20])",
        "detail": "old.pv_parameters_matheus",
        "documentation": {}
    },
    {
        "label": "#tier",
        "kind": 5,
        "importPath": "old.pv_parameters_matheus",
        "description": "old.pv_parameters_matheus",
        "peekOfCode": "#tier = IEC-61730; IEC-61215; IEC-62804; IEC-61701; IEC-60068;UL-1703;\n#NOCT = Nominal Operating Cell Temperature\n#Inop = max. series fuse rating\n    #       type            no   ocv   scc   vmp   imp     pmp  Vmax      ocvt    otvmp  tcisc  weig  deph  widt  leng  icost     ef  ncel  tol   dur   tcell   tier  temp   TEMP   NOCT   Inop\n    jinko = np.array(['Jinko_JKM450N-7RL3',1,51.5,11.32,42.9,10.49,450.0,1000,- 0.0028,- 0.0034,0.05,26.1,40,1029,2182,2.0,20.04,156,3,30,1,2,- 40,85,45,20,'Jinko_JKM455N-7RL3',2,51.6,11.41,43.0,10.58,455.0,1000,- 0.0028,- 0.0034,0.05,26.1,40,1029,2182,2.0,20.26,156,3,30,1,2,- 40,85,45,20,'Jinko_JKM460N-7RL3',3,51.7,11.5,43.1,10.67,460.0,1000,- 0.0028,- 0.0034,0.05,26.1,40,1029,2182,2.0,20.49,156,3,30,1,2,- 40,85,45,20,'Jinko_JKM465N-7RL3',4,51.9,11.59,43.2,10.76,465.0,1000,- 0.0028,- 0.0034,0.05,26.1,40,1029,2182,2.0,20.71,156,3,30,1,2,- 40,85,45,20,'Jinko_JKM470N-7RL3',5,52.1,11.68,43.3,10.85,470.0,1000,- 0.0028,- 0.0034,0.05,26.1,40,1029,2182,2.0,20.93,156,3,30,1,2,- 40,85,45,20,'Jinko_JKM375N-6RL3',6,43.5,11.23,35.9,10.44,375.0,1000,- 0.0028,- 0.0034,0.05,20.6,30,1029,1855,2.0,19.65,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM380N-6RL3',7,43.6,11.33,35.9,10.56,380.0,1000,- 0.0028,- 0.0034,0.05,20.6,30,1029,1855,2.0,19.91,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM385N-6RL3',8,43.7,11.43,36.0,10.68,385.0,1000,- 0.0028,- 0.0034,0.05,20.6,30,1029,1855,2.0,20.17,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM390N-6RL3',9,43.8,11.53,36.1,10.8,390.0,1000,- 0.0028,- 0.0034,0.05,20.6,30,1029,1855,2.0,20.43,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM395N-6RL3',10,43.9,11.63,36.2,10.92,395.0,1000,- 0.0028,- 0.0034,0.05,20.6,30,1029,1855,2.0,20.43,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM360N-6RL3-B',11,43.9,10.52,36.7,9.82,360.0,1000,- 0.0028,- 0.0034,0.05,20.8,30,1029,1855,2.0,18.86,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM365N-6RL3-B',12,44.0,10.63,36.8,9.93,365.0,1000,- 0.0028,- 0.0034,0.05,20.8,30,1029,1855,2.0,19.12,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM370N-6RL3-B',13,44.1,10.74,36.9,10.04,370.0,1000,- 0.0028,- 0.0034,0.05,20.8,30,1029,1855,2.0,19.38,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM375N-6RL3-B',14,44.2,10.85,36.9,10.15,375.0,1000,- 0.0028,- 0.0034,0.05,20.8,30,1029,1855,2.0,19.65,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM380N-6RL3-B',15,44.3,10.96,37.0,10.26,380.0,1000,- 0.0028,- 0.0034,0.05,20.8,30,1029,1855,2.0,19.91,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM445M-7RL3-TV',16,51.6,11.08,43.1,10.32,445.0,1500,- 0.0028,- 0.0035,0.05,25.0,35,1032,2205,2.0,19.56,156,3,30,1,2,- 40,85,45,25,'Jinko_JKM450M-7RL3-TV',17,51.7,11.17,43.2,10.42,450.0,1500,- 0.0028,- 0.0035,0.05,25.0,35,1032,2205,2.0,19.78,156,3,30,1,2,- 40,85,45,25,'Jinko_JKM455M-7RL3-TV',18,51.8,11.26,43.2,10.52,455.0,1500,- 0.0028,- 0.0035,0.05,25.0,35,1032,2205,2.0,20.0,156,3,30,1,2,- 40,85,45,25,'Jinko_JKM460M-7RL3-TV',19,51.9,11.35,43.3,10.62,460.0,1500,- 0.0028,- 0.0035,0.05,25.0,35,1032,2205,2.0,20.21,156,3,30,1,2,- 40,85,45,25,'Jinko_JKM465M-7RL3-TV',20,52.0,11.44,43.4,10.72,465.0,1500,- 0.0028,- 0.0035,0.05,25.0,35,1032,2205,2.0,20.43,156,3,30,1,2,- 40,85,45,25,'Jinko_JKM375M-6RL3',21,43.5,11.12,36.2,10.36,375.0,1000,- 0.0028,- 0.0035,0.05,20.8,30,1029,1855,2.0,19.65,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM380M-6RL3',22,43.6,11.21,36.3,10.47,380.0,1000,- 0.0028,- 0.0035,0.05,20.8,30,1029,1855,2.0,19.91,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM385M-6RL3',23,43.7,11.3,36.4,10.58,385.0,1000,- 0.0028,- 0.0035,0.05,20.8,30,1029,1855,2.0,20.17,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM390M-6RL3',24,43.8,11.39,36.5,10.69,390.0,1000,- 0.0028,- 0.0035,0.05,20.8,30,1029,1855,2.0,20.43,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM395M-6RL3',25,43.9,11.48,36.6,10.8,395.0,1000,- 0.0028,- 0.0035,0.05,20.8,30,1029,1855,2.0,20.69,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM360M-6RL3-B',26,43.8,10.68,36.5,9.86,360.0,1000,- 0.0028,- 0.0035,0.05,20.8,30,1029,1855,2.0,18.86,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM365M-6RL3-B',27,43.9,10.79,36.6,9.97,365.0,1000,- 0.0028,- 0.0035,0.05,20.8,30,1029,1855,2.0,19.12,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM370M-6RL3-B',28,44.0,10.9,36.7,10.08,370.0,1000,- 0.0028,- 0.0035,0.05,20.8,30,1029,1855,2.0,19.38,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM375M-6RL3-B',29,44.1,11.01,36.8,10.19,375.0,1000,- 0.0028,- 0.0035,0.05,20.8,30,1029,1855,2.0,19.65,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM380M-6RL3-B',30,44.2,11.12,36.9,10.3,380.0,1000,- 0.0028,- 0.0035,0.05,20.8,30,1029,1855,2.0,19.91,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM325M-60H',31,40.4,10.5,33.4,9.74,325.0,1000,- 0.0029,- 0.0035,0.05,18.5,30,1002,1684,2.0,19.26,120,3,25,1,3,- 40,85,45,20,'Jinko_JKM330M-60H',32,40.6,10.61,33.5,9.84,330.0,1000,- 0.0029,- 0.0035,0.05,18.5,30,1002,1684,2.0,19.56,120,3,25,1,3,- 40,85,45,20,'Jinko_JKM335M-60H',33,40.8,10.73,33.7,9.93,335.0,1000,- 0.0029,- 0.0035,0.05,18.5,30,1002,1684,2.0,19.85,120,3,25,1,3,- 40,85,45,20,'Jinko_JKM340M-60H',34,41.0,10.82,33.9,10.02,340.0,1000,- 0.0029,- 0.0035,0.05,18.5,30,1002,1684,2.0,20.15,120,3,25,1,3,- 40,85,45,20,'Jinko_JKM345M-60H',35,41.2,10.91,34.1,10.11,345.0,1000,- 0.0029,- 0.0035,0.05,18.5,30,1002,1684,2.0,20.45,120,3,25,1,3,- 40,85,45,20,'Jinko_JKM390M-72H',36,48.6,10.46,39.6,9.84,390.0,1000,- 0.0029,- 0.0035,0.05,22.0,30,1002,2008,2.0,19.38,144,3,25,1,2,- 40,85,45,20,'Jinko_JKM395M-72H',37,48.8,10.54,39.9,9.9,395.0,1000,- 0.0029,- 0.0035,0.05,22.0,30,1002,2008,2.0,19.63,144,3,25,1,2,- 40,85,45,20,'Jinko_JKM400M-72H',38,49.1,10.61,40.2,9.96,400.0,1000,- 0.0029,- 0.0035,0.05,22.0,30,1002,2008,2.0,19.88,144,3,25,1,2,- 40,85,45,20,'Jinko_JKM405M-72H',39,49.4,10.69,40.4,10.02,405.0,1000,- 0.0029,- 0.0035,0.05,22.0,30,1002,2008,2.0,20.13,144,3,25,1,2,- 40,85,45,20,'Jinko_JKM410M-72H',40,49.6,10.76,40.7,10.08,410.0,1000,- 0.0029,- 0.0035,0.05,22.0,30,1002,2008,2.0,20.38,144,3,25,1,2,- 40,85,45,20,'Jinko_JKM320M-60H',41,40.2,10.31,33.2,9.65,320.0,1000,- 0.0028,- 0.0035,0.05,18.5,30,1002,1684,2.0,18.96,120,3,25,1,3,- 40,85,45,20,'Jinko_JKM325M-60H',42,40.4,10.5,33.4,9.74,325.0,1000,- 0.0028,- 0.0035,0.05,18.5,30,1002,1684,2.0,19.26,120,3,25,1,3,- 40,85,45,20,'Jinko_JKM330M-60H',43,40.6,10.61,33.5,9.84,330.0,1000,- 0.0028,- 0.0035,0.05,18.5,30,1002,1684,2.0,19.56,120,3,25,1,3,- 40,85,45,20,'Jinko_JKM335M-60H',44,40.8,10.73,33.7,9.93,335.0,1000,- 0.0028,- 0.0035,0.05,18.5,30,1002,1684,2.0,19.86,120,3,25,1,3,- 40,85,45,20,'Jinko_JKM340M-60H',45,41.0,10.82,33.9,10.02,340.0,1000,- 0.0028,- 0.0035,0.05,18.5,30,1002,1684,2.0,20.16,120,3,25,1,3,- 40,85,45,20,'Jinko_JKM345M-66H',46,43.6,10.13,36.6,9.42,345.0,1000,- 0.0029,- 0.0035,0.05,20.0,30,1002,1841,2.0,18.7,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM350M-66H',47,43.6,10.25,36.7,9.54,350.0,1000,- 0.0029,- 0.0035,0.05,20.0,30,1002,1841,2.0,18.97,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM355M-66H',48,43.7,10.37,36.8,9.66,355.0,1000,- 0.0029,- 0.0035,0.05,20.0,30,1002,1841,2.0,19.24,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM360M-66H',49,43.7,10.49,36.8,9.78,360.0,1000,- 0.0029,- 0.0035,0.05,20.0,30,1002,1841,2.0,19.52,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM365M-66H',50,43.7,10.61,36.9,9.9,365.0,1000,- 0.0029,- 0.0035,0.05,20.0,30,1002,1841,2.0,19.79,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM370M-66H',51,43.8,10.62,37.2,9.96,370.0,1000,- 0.0029,- 0.0035,0.05,20.0,30,1002,1841,2.0,20.06,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM375M-66H',52,44.0,10.69,37.2,10.07,375.0,1000,- 0.0029,- 0.0035,0.05,20.0,30,1002,1841,2.0,20.33,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM425M-78H',53,51.4,10.48,43.2,9.83,425.0,1000,- 0.0028,- 0.0035,0.05,24.0,35,1002,2166,2.0,19.58,156,3,25,1,3,- 40,85,45,20,'Jinko_JKM430M-78H',54,51.5,10.57,43.5,9.89,430.0,1000,- 0.0028,- 0.0035,0.05,24.0,35,1002,2166,2.0,19.81,156,3,25,1,3,- 40,85,45,20,'Jinko_JKM435M-78H',55,51.6,10.67,43.6,9.99,435.0,1000,- 0.0028,- 0.0035,0.05,24.0,35,1002,2166,2.0,20.04,156,3,25,1,3,- 40,85,45,20,'Jinko_JKM440M-78H',56,51.7,10.77,43.7,10.08,440.0,1000,- 0.0028,- 0.0035,0.05,24.0,35,1002,2166,2.0,20.27,156,3,25,1,3,- 40,85,45,20,'Jinko_JKM445M-78H',57,52.0,10.84,43.7,10.18,445.0,1000,- 0.0028,- 0.0035,0.05,24.0,35,1002,2166,2.0,20.5,156,3,25,1,3,- 40,85,45,20,'Jinko_JKM385M-72HBDVP',58,48.1,10.32,39.5,9.76,385.0,1500,- 0.0029,- 0.0035,0.05,26.6,30,1008,2031,2.0,18.81,144,3,30,1,2,- 40,85,45,25,'Jinko_JKM390M-72HBDVP',59,48.1,10.41,39.6,9.84,390.0,1500,- 0.0029,- 0.0035,0.05,26.6,30,1008,2031,2.0,19.05,144,3,30,1,2,- 40,85,45,25,'Jinko_JKM395M-72HBDVP',60,48.3,10.5,39.8,9.92,395.0,1500,- 0.0029,- 0.0035,0.05,26.6,30,1008,2031,2.0,19.29,144,3,30,1,2,- 40,85,45,25,'Jinko_JKM400M-72HBDVP',61,48.3,10.59,40.0,10.0,400.0,1500,- 0.0029,- 0.0035,0.05,26.6,30,1008,2031,2.0,19.54,144,3,30,1,2,- 40,85,45,25,'Jinko_JKM405M-72HBDVP',62,48.4,10.68,40.2,10.08,405.0,1500,- 0.0029,- 0.0035,0.05,26.6,30,1008,2031,2.0,19.78,144,3,30,1,2,- 40,85,45,25,'Jinko_JKM385M-72-TV',63,48.1,10.08,39.5,9.76,385.0,1500,- 0.0029,- 0.0035,0.05,22.3,30,1008,2031,2.0,18.81,144,3,30,1,2,- 40,85,45,25,'Jinko_JKM390M-72-TV',64,48.1,10.17,39.6,9.84,390.0,1500,- 0.0029,- 0.0035,0.05,22.3,30,1008,2031,2.0,19.05,144,3,30,1,2,- 40,85,45,25,'Jinko_JKM395M-72-TV',65,48.3,10.23,39.8,9.92,395.0,1500,- 0.0029,- 0.0035,0.05,22.3,30,1008,2031,2.0,19.29,144,3,30,1,2,- 40,85,45,25,'Jinko_JKM400M-72-TV',66,48.3,10.32,40.0,10.0,400.0,1500,- 0.0029,- 0.0035,0.05,22.3,30,1008,2031,2.0,19.54,144,3,30,1,2,- 40,85,45,25,'Jinko_JKM405M-72-TV',67,48.4,10.42,40.2,10.08,405.0,1500,- 0.0029,- 0.0035,0.05,22.3,30,1008,2031,2.0,19.78,144,3,30,1,2,- 40,85,45,25])\n    #type                                no   ocv   scc  vmax  imax    pmax  Vmax      ocvt   otvmp   tcisc  weig  deph  widt  leng  icost     ef  ncel  tol   dur   tcell   tier   temp   TEMP   NOCT    Inop\n    canadian = np.array(['Canadian CS6K260P',1,37.5,9.12,30.4,8.56,260.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.6,15.88,60,5,25,2,6,- 40,85,45,15,'Canadian CS6K265P',2,37.7,9.23,30.6,8.66,265.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.64,16.19,60,5,25,2,6,- 40,85,45,15,'Canadian CS6K270P',3,37.9,9.32,30.8,8.75,270.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.69,16.5,60,5,25,2,6,- 40,85,45,15,'Canadian CS6K275P',4,38.0,9.45,31.0,8.88,275.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.75,16.8,60,5,25,2,6,- 40,85,45,15,'Canadian CS6K275M',5,38.3,9.31,31.3,8.8,275.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.75,16.8,60,5,25,1,6,- 40,85,45,15,'Canadian CS6K280M',6,38.5,9.43,31.5,8.89,280.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.8,17.11,60,5,25,1,6,- 40,85,45,15,'Canadian CS6K285M',7,38.6,9.51,31.7,8.98,285.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.85,17.41,60,5,25,1,6,- 40,85,45,15,'Canadian CS6X310P',8,44.9,9.08,36.4,8.52,310.0,1000,- 0.0031,- 0.0041,0.053,22.0,40,982,1954,3.1,16.16,72,5,25,2,6,- 40,85,43,15,'Canadian CS6X315P',9,45.1,9.18,36.6,8.61,315.0,1000,- 0.0031,- 0.0041,0.053,22.0,40,982,1954,3.15,16.42,72,5,25,2,6,- 40,85,43,15,'Canadian CS6X320P',10,45.3,9.26,36.8,8.69,320.0,1000,- 0.0031,- 0.0041,0.053,22.0,40,982,1954,3.2,16.68,72,5,25,2,6,- 40,85,43,15,'Canadian CS6X325P',11,45.5,9.34,37.0,8.78,325.0,1000,- 0.0031,- 0.0041,0.053,22.0,40,982,1954,3.25,16.94,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U325P',12,45.5,9.34,37.0,8.78,325.0,1000,- 0.0031,- 0.0041,0.05,22.4,40,992,1960,3.25,16.72,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U330P',13,45.6,9.45,37.2,8.88,330.0,1000,- 0.0031,- 0.0041,0.05,22.4,40,992,1960,3.3,16.97,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U335P',14,45.8,9.54,37.4,8.96,335.0,1000,- 0.0031,- 0.0041,0.05,22.4,40,992,1960,3.35,17.23,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U340P',15,45.9,9.62,37.6,9.05,340.0,1000,- 0.0029,- 0.0039,0.05,22.4,40,992,1960,3.4,17.49,72,5,25,2,6,- 40,85,43,15,'Canadian CS6X330P-FG',16,45.6,9.45,37.2,8.88,330.0,1000,- 0.0031,- 0.004,0.05,27.5,8.5,971,1971,3.25,16.9,72,5,30,2,6,- 40,85,43,15,'Canadian CS6X335P-FG',17,45.8,9.54,37.4,8.96,335.0,1000,- 0.0031,- 0.004,0.05,27.5,8.5,971,1971,3.25,17.16,72,5,30,2,6,- 40,85,43,15,'Canadian CS6X340P-FG',18,45.9,9.62,37.6,9.05,340.0,1000,- 0.0029,- 0.0039,0.05,27.5,8.5,971,1971,3.25,17.42,72,5,30,2,6,- 40,85,43,15,'Canadian CS6X345P-FG',19,46.0,9.69,37.8,9.13,345.0,1000,- 0.0029,- 0.0039,0.05,27.5,8.5,971,1971,3.25,17.67,72,5,30,2,6,- 40,85,43,15,'Canadian CS6X350P-FG',20,46.2,9.79,38.1,9.21,350.0,1000,- 0.0029,- 0.0039,0.05,27.5,8.5,971,1971,3.25,17.93,72,5,30,2,6,- 40,85,43,15,'Canadian CS6X355P-FG',21,46.4,9.84,38.2,9.3,355.0,1000,- 0.0029,- 0.0039,0.05,27.5,8.5,971,1971,3.25,18.18,72,5,30,2,6,- 40,85,43,15,'Canadian CS6K285P-FG Dymond',22,38.3,9.64,31.4,9.06,285.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,3.25,17.33,60,5,30,2,6,- 40,85,43,15,'Canadian CS6K290P-FG Dymond',23,38.5,9.72,31.6,9.18,290.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,3.25,17.63,60,5,30,2,6,- 40,85,43,15,'Canadian CS6K295P-FG Dymond',24,38.6,9.81,31.8,9.28,295.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,3.25,17.94,60,5,30,2,6,- 40,85,43,15,'Canadian CS6K290MS-FG Dymond',25,39.3,9.67,32.1,9.05,290.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,2.85,17.72,60,5,30,2,6,- 40,85,42,15,'Canadian CS6K295MS-FG Dymond',26,39.5,9.75,32.3,9.14,295.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,2.85,18.02,60,5,30,2,6,- 40,85,42,15,'Canadian CS6K300MS-FG Dymond',27,39.7,9.83,32.5,9.24,300.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,2.85,18.33,60,5,30,2,6,- 40,85,42,15,'Canadian CS6K305MS-FG Dymond',28,39.9,9.91,32.7,9.33,305.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,2.85,18.54,60,5,30,2,6,- 40,85,42,15,'Canadian CS6K295MS-FG All black',29,39.5,9.75,32.3,9.14,295.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,17.72,60,5,25,1,6,- 40,85,43,15,'Canadian CS6K300MS-FG All black',30,39.7,9.83,32.5,9.24,300.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.33,60,5,25,1,6,- 40,85,43,15,'Canadian CS6K305MS-FG All black',31,39.9,9.91,32.7,9.33,305.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.63,60,5,25,1,6,- 40,85,43,15,'Canadian CS6K310MS-FG All black',32,40.1,9.99,32.9,9.43,310.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.94,60,5,25,1,6,- 40,85,43,15,'Canadian CS6K285P',33,38.3,9.64,31.4,9.06,285.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,17.41,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K290P',34,38.5,9.72,31.6,9.18,290.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,17.72,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K295P',35,38.6,9.81,31.8,9.28,295.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.02,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K300P',36,38.8,9.92,32.0,9.38,300.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.33,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K305P',37,38.9,10.03,32.1,9.5,305.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.63,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K280P',38,38.2,9.52,31.3,8.95,280.0,1000,- 0.0031,- 0.004,0.05,18.2,35,992,1650,2.85,17.11,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K300MS Superpower',39,39.7,9.83,32.5,9.24,300.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.33,60,5,25,2,6,- 40,85,42,15,'Canadian CS6K305MS Superpower',40,39.9,9.91,32.7,9.33,305.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.63,60,5,25,2,6,- 40,85,42,15,'Canadian CS6K310MS Superpower',41,40.1,9.99,32.9,9.43,310.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.94,60,5,25,2,6,- 40,85,42,15,'Canadian CS6K315MS Superpower',42,40.3,10.07,33.1,9.52,315.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,19.24,60,5,25,2,6,- 40,85,42,15,'Canadian CS6U345P',43,46.0,9.69,37.8,9.13,345.0,1000,- 0.0029,- 0.0039,0.05,22.4,35,992,1960,3.4,17.74,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U350P',44,46.2,9.79,38.1,9.21,350.0,1000,- 0.0029,- 0.0039,0.05,22.4,35,992,1960,3.4,18.0,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U355P',45,46.4,9.84,38.2,9.3,355.0,1000,- 0.0029,- 0.0039,0.05,22.4,35,992,1960,3.4,18.26,72,5,25,2,6,- 40,85,43,15,'Canadian CS3U355P',46,46.8,9.59,39.4,9.02,355.0,1000,- 0.0029,- 0.0037,0.05,22.4,35,992,2000,3.4,17.89,144,5,25,2,6,- 40,85,42,15,'Canadian CS3U360P',47,47.0,9.67,39.6,9.1,360.0,1000,- 0.0029,- 0.0037,0.05,22.4,35,992,2000,3.4,18.15,144,5,25,2,6,- 40,85,42,15,'Canadian CS3U365P',48,47.2,9.75,39.8,9.18,365.0,1000,- 0.0029,- 0.0037,0.05,22.4,35,992,2000,3.4,18.4,144,5,25,2,6,- 40,85,42,15,'Canadian CS3U370P',49,47.4,9.83,40.0,9.26,365.0,1000,- 0.0029,- 0.0037,0.05,22.4,35,992,2000,3.4,18.65,144,5,25,2,6,- 40,85,42,15,'Canadian CS3U335P',50,45.7,9.28,38.2,8.77,335.0,1000,- 0.0031,- 0.0038,0.05,22.4,35,992,2000,3.4,16.89,144,5,25,2,6,- 40,85,43,15,'Canadian CS3U340P',51,45.9,9.36,38.4,8.86,340.0,1000,- 0.0031,- 0.0038,0.05,22.4,35,992,2000,3.4,17.14,144,5,25,2,6,- 40,85,43,15,'Canadian CS3U345P',52,46.1,9.44,38.6,8.94,345.0,1000,- 0.0031,- 0.0038,0.05,22.4,35,992,2000,3.4,17.39,144,5,25,2,6,- 40,85,43,15,'Canadian CS3U350P',53,46.6,9.51,39.2,8.94,350.0,1000,- 0.0031,- 0.0038,0.05,22.4,35,992,2000,3.4,17.64,144,5,25,2,6,- 40,85,43,15,'Canadian CS3U375MS',54,47.6,9.93,39.8,9.43,375.0,1000,- 0.0029,- 0.0036,0.05,22.5,35,992,2000,3.4,18.9,144,5,25,1,6,- 40,85,42,15,'Canadian CS3U380MS',55,47.8,10.01,40.0,9.5,380.0,1000,- 0.0029,- 0.0036,0.05,22.5,35,992,2000,3.4,19.15,144,5,25,1,6,- 40,85,42,15,'Canadian CS3U385MS',56,48.0,10.09,40.2,9.58,385.0,1000,- 0.0029,- 0.0036,0.05,22.5,35,992,2000,3.4,19.41,144,5,25,1,6,- 40,85,42,15,'Canadian CS3U390MS',57,48.2,10.17,40.4,9.66,390.0,1000,- 0.0029,- 0.0036,0.05,22.5,35,992,2000,3.4,19.66,144,5,25,1,6,- 40,85,42,15,'Canadian CS3U395MS',58,48.4,10.25,40.6,9.73,395.0,1000,- 0.0029,- 0.0036,0.05,22.5,35,992,2000,3.4,19.91,144,5,25,1,6,- 40,85,42,15,'Canadian CS3K295P',59,39.1,9.57,32.5,9.08,295.0,1000,- 0.0029,- 0.0037,0.05,18.5,35,992,1675,3.4,17.75,120,5,25,2,6,- 40,85,42,30,'Canadian CS3K300P',60,39.3,9.65,32.7,9.18,300.0,1000,- 0.0029,- 0.0037,0.05,18.5,35,992,1675,3.4,18.05,120,5,25,2,6,- 40,85,42,30,'Canadian CS3K305P',61,39.5,9.73,32.9,9.28,305.0,1000,- 0.0029,- 0.0037,0.05,18.5,35,992,1675,3.4,18.36,120,5,25,2,6,- 40,85,42,30,'Canadian CS3K310P',62,39.7,9.81,33.1,9.37,310.0,1000,- 0.0029,- 0.0037,0.05,18.5,35,992,1675,3.4,18.66,120,5,25,2,6,- 40,85,42,30,'Canadian CS3K275P',63,37.7,9.38,31.0,8.88,275.0,1000,- 0.0031,- 0.0038,0.05,18.5,35,992,1675,3.4,16.65,120,5,25,2,6,- 40,85,43,30,'Canadian CS3K280P',64,37.9,9.47,31.2,8.98,280.0,1000,- 0.0031,- 0.0038,0.05,18.5,35,992,1675,3.4,16.85,120,5,25,2,6,- 40,85,43,30,'Canadian CS3K285P',65,38.1,9.56,31.4,9.08,285.0,1000,- 0.0031,- 0.0038,0.05,18.5,35,992,1675,3.4,17.15,120,5,25,2,6,- 40,85,43,30,'Canadian CS3K290P',66,38.9,9.49,32.3,8.98,290.0,1000,- 0.0031,- 0.0038,0.05,18.5,35,992,1675,3.4,17.45,120,5,25,2,6,- 40,85,43,30,'Canadian CS3K295P',67,38.9,9.49,32.3,8.98,290.0,1000,- 0.0031,- 0.0038,0.05,18.5,35,992,1675,3.4,17.45,120,5,25,2,6,- 40,85,43,30,'Canadian CS3K315MS',68,39.9,10.06,31.1,9.52,315.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,18.96,120,5,25,1,6,- 40,85,42,30,'Canadian CS3K320MS',69,40.1,10.14,33.3,9.61,320.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,19.26,120,5,25,1,6,- 40,85,42,30,'Canadian CS3K325MS',70,40.3,10.22,33.5,9.71,325.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,19.56,120,5,25,1,6,- 40,85,42,30,'Canadian CS3K330MS',71,40.5,10.3,33.7,9.8,330.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,19.86,120,5,25,1,6,- 40,85,42,30,'Canadian CS3K295MS',72,39.1,9.73,32.3,9.14,295.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,17.75,120,5,25,1,6,- 40,85,43,30,'Canadian CS3K300MS',73,39.3,9.82,32.5,9.24,300.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,18.05,120,5,25,1,6,- 40,85,43,30,'Canadian CS3K305MS',74,39.5,9.9,32.7,9.33,305.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,18.36,120,5,25,1,6,- 40,85,43,30,'Canadian CS3K310MS',75,39.7,9.98,32.9,9.43,310.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,18.66,120,5,25,1,6,- 40,85,43,30,'Canadian CS3U355P-FG Dymond',76,46.8,9.59,39.4,9.02,355.0,1000,- 0.0029,- 0.0037,0.05,29.0,8.5,995,2003,3.4,17.89,144,5,30,2,6,- 40,85,42,30,'Canadian CS3U360P-FG Dymond',77,47.0,9.67,39.6,9.1,360.0,1000,- 0.0029,- 0.0037,0.05,29.0,8.5,995,2003,3.4,18.15,144,5,30,2,6,- 40,85,42,30,'Canadian CS3U365P-FG Dymond',78,47.2,9.75,39.8,9.18,365.0,1000,- 0.0029,- 0.0037,0.05,29.0,8.5,995,2003,3.4,18.4,144,5,30,2,6,- 40,85,42,30,'Canadian CS3U370P-FG Dymond',79,47.4,9.83,40.0,9.26,370.0,1000,- 0.0029,- 0.0037,0.05,29.0,8.5,995,2003,3.4,18.65,144,5,30,2,6,- 40,85,42,30,'Canadian CS3U335P-FG Dymond',80,45.7,9.28,38.2,8.77,335.0,1000,- 0.0031,- 0.0038,0.05,29.0,8.5,995,2003,3.4,16.89,144,5,30,2,6,- 40,85,43,30,'Canadian CS3U340P-FG Dymond',81,45.9,9.36,38.4,8.86,340.0,1000,- 0.0031,- 0.0038,0.05,29.0,8.5,995,2003,3.4,17.14,144,5,30,2,6,- 40,85,43,30,'Canadian CS3U345P-FG Dymond',82,46.1,9.44,38.6,8.94,345.0,1000,- 0.0031,- 0.0038,0.05,29.0,8.5,995,2003,3.4,17.39,144,5,30,2,6,- 40,85,43,30,'Canadian CS3U350P-FG Dymond',83,46.6,9.51,39.2,8.94,350.0,1000,- 0.0031,- 0.0038,0.05,29.0,8.5,995,2003,3.4,17.64,144,5,30,2,6,- 40,85,43,30,'Canadian CS3U375MS-FG Dymond',84,47.6,9.93,39.8,9.43,375.0,1000,- 0.0029,- 0.0036,0.05,29.0,8.5,995,2003,3.4,18.9,144,5,30,1,6,- 40,85,42,30,'Canadian CS3U380MS-FG Dymond',85,47.8,10.01,40.0,9.5,380.0,1000,- 0.0029,- 0.0036,0.05,29.0,8.5,995,2003,3.4,19.15,144,5,30,1,6,- 40,85,42,30,'Canadian CS3U385MS-FG Dymond',86,48.0,10.09,40.2,9.58,385.0,1000,- 0.0029,- 0.0036,0.05,29.0,8.5,995,2003,3.4,19.41,144,5,30,1,6,- 40,85,42,30,'Canadian CS3U390MS-FG Dymond',87,48.2,10.17,40.4,9.66,390.0,1000,- 0.0029,- 0.0036,0.05,29.0,8.5,995,2003,3.4,19.66,144,5,30,1,6,- 40,85,42,30,'Canadian CS3U395MS-FG Dymond',88,48.4,10.25,40.6,9.73,395.0,1000,- 0.0029,- 0.0036,0.05,29.0,8.5,995,2003,3.4,19.91,144,5,30,1,6,- 40,85,42,30,'Canadian CS3K295MS-FG Dymond',89,39.1,9.57,32.5,9.08,295.0,1000,- 0.0029,- 0.0037,0.05,24.0,8.5,995,1678,3.4,17.75,120,5,30,2,6,- 40,85,43,30,'Canadian CS3K300MS-FG Dymond',90,39.3,9.65,32.7,9.18,300.0,1000,- 0.0029,- 0.0037,0.05,24.0,8.5,995,1678,3.4,18.05,120,5,30,2,6,- 40,85,43,30,'Canadian CS3K305MS-FG Dymond',91,39.5,9.73,32.9,9.28,305.0,1000,- 0.0029,- 0.0037,0.05,24.0,8.5,995,1678,3.4,18.36,120,5,30,2,6,- 40,85,43,30,'Canadian CS3K310MS-FG Dymond',92,39.7,9.81,33.1,9.37,310.0,1000,- 0.0029,- 0.0037,0.05,24.0,8.5,995,1678,3.4,18.66,120,5,30,2,6,- 40,85,43,30,'Canadian CS3K275P-FG Dymond',93,37.7,9.38,31.0,8.88,275.0,1000,- 0.0031,- 0.0038,0.05,24.0,8.5,995,1678,3.4,16.55,120,5,30,2,6,- 40,85,42,30,'Canadian CS3K280P-FG Dymond',94,37.9,9.47,31.2,8.98,280.0,1000,- 0.0031,- 0.0038,0.05,24.0,8.5,995,1678,3.4,16.85,120,5,30,2,6,- 40,85,42,30,'Canadian CS3K285P-FG Dymond',95,38.1,9.56,31.4,9.08,285.0,1000,- 0.0031,- 0.0038,0.05,24.0,8.5,995,1678,3.4,17.15,120,5,30,2,6,- 40,85,42,30,'Canadian CS3K290P-FG Dymond',96,38.9,9.49,32.3,8.98,290.0,1000,- 0.0031,- 0.0038,0.05,24.0,8.5,995,1678,3.4,17.45,120,5,30,2,6,- 40,85,42,30,'Canadian CS3K315MS-FG Dymond',97,39.9,10.06,33.1,9.52,315.0,1000,- 0.0029,- 0.0036,0.05,24.0,8.5,995,1678,3.4,18.96,120,5,30,1,6,- 40,85,42,30,'Canadian CS3K320MS-FG Dymond',98,40.1,10.14,33.3,9.61,320.0,1000,- 0.0029,- 0.0036,0.05,24.0,8.5,995,1678,3.4,19.26,120,5,30,1,6,- 40,85,42,30,'Canadian CS3K325MS-FG Dymond',99,40.3,10.22,33.5,9.71,325.0,1000,- 0.0029,- 0.0036,0.05,24.0,8.5,995,1678,3.4,19.56,120,5,30,1,6,- 40,85,42,30,'Canadian CS3K330MS-FG Dymond',100,40.5,10.3,33.7,9.8,330.0,1000,- 0.0029,- 0.0036,0.05,24.0,8.5,995,1678,3.4,19.86,120,5,30,1,6,- 40,85,42,30,'Canadian CS3W-390PB-AG',101,46.8,10.74,38.3,10.19,390.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,17.5,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-395PB-AG',102,47.0,10.82,38.5,10.26,395.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,17.7,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-400PB-AG',103,47.2,10.9,38.7,10.34,400.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,17.9,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-405PB-AG',104,47.4,10.98,38.9,10.42,405.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,18.1,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-410PB-AG',105,47.6,11.06,39.1,10.49,410.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,18.3,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-415PB-AG',106,47.8,11.14,39.3,10.56,415.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,18.6,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-420PB-AG',107,48.0,11.26,39.5,10.64,420.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,18.8,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-425PB-AG',108,48.2,11.29,39.7,10.71,425.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,19.0,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-430PB-AG',109,48.4,11.32,39.9,10.78,430.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,19.2,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-435PB-AG',110,48.6,11.35,40.1,10.85,435.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,19.5,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-440PB-AG',111,48.7,11.4,40.3,10.92,440.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,19.7,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-420MB-AG',112,47.9,11.27,39.9,10.53,420.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,18.8,144,5,30,1,4,- 40,85,41,25,'Canadian CS3W-425MB-AG',113,48.1,11.32,40.1,10.6,425.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,19.0,144,5,30,1,4,- 40,85,41,25,'Canadian CS3W-430MB-AG',114,48.3,11.37,40.3,10.68,430.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,19.2,144,5,30,1,4,- 40,85,41,25,'Canadian CS3W-435MB-AG',115,48.5,11.42,40.5,10.75,435.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,19.5,144,5,30,1,4,- 40,85,41,25,'Canadian CS3W-440MB-AG',116,48.7,11.48,40.7,10.82,440.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,19.7,144,5,30,1,4,- 40,85,41,25,'Canadian CS3W-445MB-AG',117,48.9,11.54,40.9,10.89,445.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,19.9,144,5,30,1,4,- 40,85,41,25])\n    #      type            no   ocv   scc  vmax  imax    pmax  Vmax      ocvt    otvmp tcisc   weig  deph  widt  leng  icost     ef  ncel  tol   dur   tcell   tier   temp   TEMP   NOCT    Inop\n    yingli = np.array(['Yingli YL340D-36b',1,46.1,9.3,38.3,8.88,340.0,1000,- 0.003,- 0.0039,0.06,22.0,40,992,1960,2.6,17.5,72,5,25,1,2,- 40,85,45,15,'Yingli YL345D-36b',2,46.3,9.4,38.6,8.94,345.0,1000,- 0.003,- 0.0039,0.06,22.0,40,992,1960,2.6,17.7,72,5,25,1,2,- 40,85,45,15,'Yingli YL350D-36b',3,46.4,9.5,38.8,9.03,350.0,1000,- 0.003,- 0.0039,0.06,22.0,40,992,1960,2.6,18.0,72,5,25,1,2,- 40,85,45,15,'Yingli YL360D-36b',4,46.6,9.7,39.3,9.17,360.0,1000,- 0.003,- 0.0039,0.06,22.0,40,992,1960,2.6,18.5,72,5,25,1,2,- 40,85,45,15,'Yingli YL365D-36b',5,48.1,9.73,39.7,9.2,365.0,1000,- 0.003,- 0.0039,0.06,22.0,40,992,1960,2.6,18.8,72,5,25,1,2,- 40,85,45,15,'Yingli YL370D-36b',6,48.2,9.8,39.8,9.3,370.0,1000,- 0.003,- 0.0039,0.06,22.0,40,992,1960,2.6,19.0,72,5,25,1,2,- 40,85,45,15,'Yingli YL375D-36b',7,48.3,9.87,39.9,9.4,375.0,1000,- 0.003,- 0.0039,0.06,22.0,40,992,1960,2.6,19.3,72,5,25,1,2,- 40,85,45,15,'Yingli YL320D-35b',8,45.2,9.25,36.5,8.78,320.0,1000,- 0.003,- 0.0039,0.05,22.0,40,992,1960,2.6,16.5,72,5,25,1,2,- 40,85,45,15,'Yingli YL325D-35b',9,45.4,9.29,36.9,8.82,325.0,1000,- 0.003,- 0.0039,0.05,22.0,40,992,1960,2.6,16.7,72,5,25,1,2,- 40,85,45,15,'Yingli YL330D-35b',10,45.6,9.33,37.3,8.85,330.0,1000,- 0.003,- 0.0039,0.05,22.0,40,992,1960,2.6,17.0,72,5,25,1,2,- 40,85,45,15,'Yingli YL335D-35b',11,45.7,9.37,37.7,8.89,335.0,1000,- 0.003,- 0.0039,0.05,22.0,40,992,1960,2.6,17.2,72,5,25,1,2,- 40,85,45,15,'Yingli YL340D-35b',12,45.9,9.41,38.1,8.93,340.0,1000,- 0.003,- 0.0039,0.05,22.0,40,992,1960,2.6,17.5,72,5,25,1,2,- 40,85,45,15,'Yingli YL345D-35b',13,46.1,9.45,38.5,8.97,345.0,1000,- 0.003,- 0.0039,0.05,22.0,40,992,1960,2.6,17.7,72,5,25,1,2,- 40,85,45,15,'Yingli YL270D-29b',14,37.7,9.26,30.8,8.77,270.0,1000,- 0.003,- 0.0039,0.05,18.5,35,992,1650,2.6,16.5,60,5,25,1,2,- 40,85,45,15,'Yingli YL275D-29b',15,37.8,9.36,31.0,8.88,275.0,1000,- 0.003,- 0.0039,0.05,18.5,35,992,1650,2.6,16.8,60,5,25,1,2,- 40,85,45,15,'Yingli YL280D-29b',16,38.0,9.45,31.3,8.95,280.0,1000,- 0.003,- 0.0039,0.05,18.5,35,992,1650,2.6,17.1,60,5,25,1,2,- 40,85,45,15,'Yingli YL285D-29b',17,38.2,9.55,31.5,9.05,285.0,1000,- 0.003,- 0.0039,0.05,18.5,35,992,1650,2.6,17.4,60,5,25,1,2,- 40,85,45,15,'Yingli YL290D-29b',18,38.4,9.65,31.7,9.15,290.0,1000,- 0.003,- 0.0039,0.05,18.5,35,992,1650,2.6,17.7,60,5,25,1,2,- 40,85,45,15,'Yingli YL295D-29b',19,38.5,9.74,32.0,9.22,295.0,1000,- 0.003,- 0.0039,0.05,18.5,35,992,1650,2.6,18.0,60,5,25,1,2,- 40,85,45,15,'Yingli YL370CG2536F1',20,45.8,10.76,36.7,10.13,370.0,1500,- 0.003,- 0.0038,0.04,29.2,32,998,1981,2.6,18.7,72,5,30,1,2,- 40,85,39,20,'Yingli YL375CG2536F1',21,46.1,10.79,37.1,10.19,375.0,1500,- 0.003,- 0.0038,0.04,29.2,32,998,1981,2.6,19.0,72,5,30,1,2,- 40,85,39,20,'Yingli YL380CG2536F1',22,46.3,10.83,37.4,10.24,380.0,1500,- 0.003,- 0.0038,0.04,29.2,32,998,1981,2.6,19.2,72,5,30,1,2,- 40,85,39,20,'Yingli YL385CG2536F1',23,46.5,10.87,37.7,10.3,385.0,1500,- 0.003,- 0.0038,0.04,29.2,32,998,1981,2.6,19.5,72,5,30,1,2,- 40,85,39,20,'Yingli YL390CG2536F1',24,46.7,10.91,38.0,10.36,390.0,1500,- 0.003,- 0.0038,0.04,29.2,32,998,1981,2.6,19.7,72,5,30,1,2,- 40,85,39,20,'Yingli YL370CG2536L1',25,45.8,10.76,36.7,10.13,370.0,1500,- 0.003,- 0.0038,0.04,27.5,6,992,1975,2.6,18.9,72,5,30,1,2,- 40,85,39,20,'Yingli YL375CG2536L1',21,46.1,10.79,37.1,10.19,375.0,1500,- 0.003,- 0.0038,0.04,27.5,6,992,1975,2.6,19.1,72,5,30,1,2,- 40,85,39,20,'Yingli YL380CG2536F1',22,46.3,10.83,37.4,10.24,380.0,1500,- 0.003,- 0.0038,0.04,27.5,6,992,1975,2.6,19.4,72,5,30,1,2,- 40,85,39,20,'Yingli YL385CG2536F1',23,46.5,10.87,37.7,10.3,385.0,1500,- 0.003,- 0.0038,0.04,27.5,6,992,1975,2.6,19.7,72,5,30,1,2,- 40,85,39,20,'Yingli YL390CG2536F1',24,46.7,10.91,38.0,10.36,390.0,1500,- 0.003,- 0.0038,0.04,27.5,6,992,1975,2.6,19.9,72,5,30,1,2,- 40,85,39,20])\n    #        type             no   ocv   scc   vmax  imax  pmax   Vmax     ocvt    otvmp   tcisc  weig  deph  widt  leng  icost    ef  ncel  tol   dur   tcell   tier     temp   TEMP     NOCT   Inop",
        "detail": "old.pv_parameters_matheus",
        "documentation": {}
    },
    {
        "label": "#NOCT",
        "kind": 5,
        "importPath": "old.pv_parameters_matheus",
        "description": "old.pv_parameters_matheus",
        "peekOfCode": "#NOCT = Nominal Operating Cell Temperature\n#Inop = max. series fuse rating\n    #       type            no   ocv   scc   vmp   imp     pmp  Vmax      ocvt    otvmp  tcisc  weig  deph  widt  leng  icost     ef  ncel  tol   dur   tcell   tier  temp   TEMP   NOCT   Inop\n    jinko = np.array(['Jinko_JKM450N-7RL3',1,51.5,11.32,42.9,10.49,450.0,1000,- 0.0028,- 0.0034,0.05,26.1,40,1029,2182,2.0,20.04,156,3,30,1,2,- 40,85,45,20,'Jinko_JKM455N-7RL3',2,51.6,11.41,43.0,10.58,455.0,1000,- 0.0028,- 0.0034,0.05,26.1,40,1029,2182,2.0,20.26,156,3,30,1,2,- 40,85,45,20,'Jinko_JKM460N-7RL3',3,51.7,11.5,43.1,10.67,460.0,1000,- 0.0028,- 0.0034,0.05,26.1,40,1029,2182,2.0,20.49,156,3,30,1,2,- 40,85,45,20,'Jinko_JKM465N-7RL3',4,51.9,11.59,43.2,10.76,465.0,1000,- 0.0028,- 0.0034,0.05,26.1,40,1029,2182,2.0,20.71,156,3,30,1,2,- 40,85,45,20,'Jinko_JKM470N-7RL3',5,52.1,11.68,43.3,10.85,470.0,1000,- 0.0028,- 0.0034,0.05,26.1,40,1029,2182,2.0,20.93,156,3,30,1,2,- 40,85,45,20,'Jinko_JKM375N-6RL3',6,43.5,11.23,35.9,10.44,375.0,1000,- 0.0028,- 0.0034,0.05,20.6,30,1029,1855,2.0,19.65,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM380N-6RL3',7,43.6,11.33,35.9,10.56,380.0,1000,- 0.0028,- 0.0034,0.05,20.6,30,1029,1855,2.0,19.91,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM385N-6RL3',8,43.7,11.43,36.0,10.68,385.0,1000,- 0.0028,- 0.0034,0.05,20.6,30,1029,1855,2.0,20.17,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM390N-6RL3',9,43.8,11.53,36.1,10.8,390.0,1000,- 0.0028,- 0.0034,0.05,20.6,30,1029,1855,2.0,20.43,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM395N-6RL3',10,43.9,11.63,36.2,10.92,395.0,1000,- 0.0028,- 0.0034,0.05,20.6,30,1029,1855,2.0,20.43,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM360N-6RL3-B',11,43.9,10.52,36.7,9.82,360.0,1000,- 0.0028,- 0.0034,0.05,20.8,30,1029,1855,2.0,18.86,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM365N-6RL3-B',12,44.0,10.63,36.8,9.93,365.0,1000,- 0.0028,- 0.0034,0.05,20.8,30,1029,1855,2.0,19.12,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM370N-6RL3-B',13,44.1,10.74,36.9,10.04,370.0,1000,- 0.0028,- 0.0034,0.05,20.8,30,1029,1855,2.0,19.38,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM375N-6RL3-B',14,44.2,10.85,36.9,10.15,375.0,1000,- 0.0028,- 0.0034,0.05,20.8,30,1029,1855,2.0,19.65,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM380N-6RL3-B',15,44.3,10.96,37.0,10.26,380.0,1000,- 0.0028,- 0.0034,0.05,20.8,30,1029,1855,2.0,19.91,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM445M-7RL3-TV',16,51.6,11.08,43.1,10.32,445.0,1500,- 0.0028,- 0.0035,0.05,25.0,35,1032,2205,2.0,19.56,156,3,30,1,2,- 40,85,45,25,'Jinko_JKM450M-7RL3-TV',17,51.7,11.17,43.2,10.42,450.0,1500,- 0.0028,- 0.0035,0.05,25.0,35,1032,2205,2.0,19.78,156,3,30,1,2,- 40,85,45,25,'Jinko_JKM455M-7RL3-TV',18,51.8,11.26,43.2,10.52,455.0,1500,- 0.0028,- 0.0035,0.05,25.0,35,1032,2205,2.0,20.0,156,3,30,1,2,- 40,85,45,25,'Jinko_JKM460M-7RL3-TV',19,51.9,11.35,43.3,10.62,460.0,1500,- 0.0028,- 0.0035,0.05,25.0,35,1032,2205,2.0,20.21,156,3,30,1,2,- 40,85,45,25,'Jinko_JKM465M-7RL3-TV',20,52.0,11.44,43.4,10.72,465.0,1500,- 0.0028,- 0.0035,0.05,25.0,35,1032,2205,2.0,20.43,156,3,30,1,2,- 40,85,45,25,'Jinko_JKM375M-6RL3',21,43.5,11.12,36.2,10.36,375.0,1000,- 0.0028,- 0.0035,0.05,20.8,30,1029,1855,2.0,19.65,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM380M-6RL3',22,43.6,11.21,36.3,10.47,380.0,1000,- 0.0028,- 0.0035,0.05,20.8,30,1029,1855,2.0,19.91,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM385M-6RL3',23,43.7,11.3,36.4,10.58,385.0,1000,- 0.0028,- 0.0035,0.05,20.8,30,1029,1855,2.0,20.17,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM390M-6RL3',24,43.8,11.39,36.5,10.69,390.0,1000,- 0.0028,- 0.0035,0.05,20.8,30,1029,1855,2.0,20.43,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM395M-6RL3',25,43.9,11.48,36.6,10.8,395.0,1000,- 0.0028,- 0.0035,0.05,20.8,30,1029,1855,2.0,20.69,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM360M-6RL3-B',26,43.8,10.68,36.5,9.86,360.0,1000,- 0.0028,- 0.0035,0.05,20.8,30,1029,1855,2.0,18.86,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM365M-6RL3-B',27,43.9,10.79,36.6,9.97,365.0,1000,- 0.0028,- 0.0035,0.05,20.8,30,1029,1855,2.0,19.12,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM370M-6RL3-B',28,44.0,10.9,36.7,10.08,370.0,1000,- 0.0028,- 0.0035,0.05,20.8,30,1029,1855,2.0,19.38,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM375M-6RL3-B',29,44.1,11.01,36.8,10.19,375.0,1000,- 0.0028,- 0.0035,0.05,20.8,30,1029,1855,2.0,19.65,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM380M-6RL3-B',30,44.2,11.12,36.9,10.3,380.0,1000,- 0.0028,- 0.0035,0.05,20.8,30,1029,1855,2.0,19.91,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM325M-60H',31,40.4,10.5,33.4,9.74,325.0,1000,- 0.0029,- 0.0035,0.05,18.5,30,1002,1684,2.0,19.26,120,3,25,1,3,- 40,85,45,20,'Jinko_JKM330M-60H',32,40.6,10.61,33.5,9.84,330.0,1000,- 0.0029,- 0.0035,0.05,18.5,30,1002,1684,2.0,19.56,120,3,25,1,3,- 40,85,45,20,'Jinko_JKM335M-60H',33,40.8,10.73,33.7,9.93,335.0,1000,- 0.0029,- 0.0035,0.05,18.5,30,1002,1684,2.0,19.85,120,3,25,1,3,- 40,85,45,20,'Jinko_JKM340M-60H',34,41.0,10.82,33.9,10.02,340.0,1000,- 0.0029,- 0.0035,0.05,18.5,30,1002,1684,2.0,20.15,120,3,25,1,3,- 40,85,45,20,'Jinko_JKM345M-60H',35,41.2,10.91,34.1,10.11,345.0,1000,- 0.0029,- 0.0035,0.05,18.5,30,1002,1684,2.0,20.45,120,3,25,1,3,- 40,85,45,20,'Jinko_JKM390M-72H',36,48.6,10.46,39.6,9.84,390.0,1000,- 0.0029,- 0.0035,0.05,22.0,30,1002,2008,2.0,19.38,144,3,25,1,2,- 40,85,45,20,'Jinko_JKM395M-72H',37,48.8,10.54,39.9,9.9,395.0,1000,- 0.0029,- 0.0035,0.05,22.0,30,1002,2008,2.0,19.63,144,3,25,1,2,- 40,85,45,20,'Jinko_JKM400M-72H',38,49.1,10.61,40.2,9.96,400.0,1000,- 0.0029,- 0.0035,0.05,22.0,30,1002,2008,2.0,19.88,144,3,25,1,2,- 40,85,45,20,'Jinko_JKM405M-72H',39,49.4,10.69,40.4,10.02,405.0,1000,- 0.0029,- 0.0035,0.05,22.0,30,1002,2008,2.0,20.13,144,3,25,1,2,- 40,85,45,20,'Jinko_JKM410M-72H',40,49.6,10.76,40.7,10.08,410.0,1000,- 0.0029,- 0.0035,0.05,22.0,30,1002,2008,2.0,20.38,144,3,25,1,2,- 40,85,45,20,'Jinko_JKM320M-60H',41,40.2,10.31,33.2,9.65,320.0,1000,- 0.0028,- 0.0035,0.05,18.5,30,1002,1684,2.0,18.96,120,3,25,1,3,- 40,85,45,20,'Jinko_JKM325M-60H',42,40.4,10.5,33.4,9.74,325.0,1000,- 0.0028,- 0.0035,0.05,18.5,30,1002,1684,2.0,19.26,120,3,25,1,3,- 40,85,45,20,'Jinko_JKM330M-60H',43,40.6,10.61,33.5,9.84,330.0,1000,- 0.0028,- 0.0035,0.05,18.5,30,1002,1684,2.0,19.56,120,3,25,1,3,- 40,85,45,20,'Jinko_JKM335M-60H',44,40.8,10.73,33.7,9.93,335.0,1000,- 0.0028,- 0.0035,0.05,18.5,30,1002,1684,2.0,19.86,120,3,25,1,3,- 40,85,45,20,'Jinko_JKM340M-60H',45,41.0,10.82,33.9,10.02,340.0,1000,- 0.0028,- 0.0035,0.05,18.5,30,1002,1684,2.0,20.16,120,3,25,1,3,- 40,85,45,20,'Jinko_JKM345M-66H',46,43.6,10.13,36.6,9.42,345.0,1000,- 0.0029,- 0.0035,0.05,20.0,30,1002,1841,2.0,18.7,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM350M-66H',47,43.6,10.25,36.7,9.54,350.0,1000,- 0.0029,- 0.0035,0.05,20.0,30,1002,1841,2.0,18.97,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM355M-66H',48,43.7,10.37,36.8,9.66,355.0,1000,- 0.0029,- 0.0035,0.05,20.0,30,1002,1841,2.0,19.24,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM360M-66H',49,43.7,10.49,36.8,9.78,360.0,1000,- 0.0029,- 0.0035,0.05,20.0,30,1002,1841,2.0,19.52,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM365M-66H',50,43.7,10.61,36.9,9.9,365.0,1000,- 0.0029,- 0.0035,0.05,20.0,30,1002,1841,2.0,19.79,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM370M-66H',51,43.8,10.62,37.2,9.96,370.0,1000,- 0.0029,- 0.0035,0.05,20.0,30,1002,1841,2.0,20.06,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM375M-66H',52,44.0,10.69,37.2,10.07,375.0,1000,- 0.0029,- 0.0035,0.05,20.0,30,1002,1841,2.0,20.33,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM425M-78H',53,51.4,10.48,43.2,9.83,425.0,1000,- 0.0028,- 0.0035,0.05,24.0,35,1002,2166,2.0,19.58,156,3,25,1,3,- 40,85,45,20,'Jinko_JKM430M-78H',54,51.5,10.57,43.5,9.89,430.0,1000,- 0.0028,- 0.0035,0.05,24.0,35,1002,2166,2.0,19.81,156,3,25,1,3,- 40,85,45,20,'Jinko_JKM435M-78H',55,51.6,10.67,43.6,9.99,435.0,1000,- 0.0028,- 0.0035,0.05,24.0,35,1002,2166,2.0,20.04,156,3,25,1,3,- 40,85,45,20,'Jinko_JKM440M-78H',56,51.7,10.77,43.7,10.08,440.0,1000,- 0.0028,- 0.0035,0.05,24.0,35,1002,2166,2.0,20.27,156,3,25,1,3,- 40,85,45,20,'Jinko_JKM445M-78H',57,52.0,10.84,43.7,10.18,445.0,1000,- 0.0028,- 0.0035,0.05,24.0,35,1002,2166,2.0,20.5,156,3,25,1,3,- 40,85,45,20,'Jinko_JKM385M-72HBDVP',58,48.1,10.32,39.5,9.76,385.0,1500,- 0.0029,- 0.0035,0.05,26.6,30,1008,2031,2.0,18.81,144,3,30,1,2,- 40,85,45,25,'Jinko_JKM390M-72HBDVP',59,48.1,10.41,39.6,9.84,390.0,1500,- 0.0029,- 0.0035,0.05,26.6,30,1008,2031,2.0,19.05,144,3,30,1,2,- 40,85,45,25,'Jinko_JKM395M-72HBDVP',60,48.3,10.5,39.8,9.92,395.0,1500,- 0.0029,- 0.0035,0.05,26.6,30,1008,2031,2.0,19.29,144,3,30,1,2,- 40,85,45,25,'Jinko_JKM400M-72HBDVP',61,48.3,10.59,40.0,10.0,400.0,1500,- 0.0029,- 0.0035,0.05,26.6,30,1008,2031,2.0,19.54,144,3,30,1,2,- 40,85,45,25,'Jinko_JKM405M-72HBDVP',62,48.4,10.68,40.2,10.08,405.0,1500,- 0.0029,- 0.0035,0.05,26.6,30,1008,2031,2.0,19.78,144,3,30,1,2,- 40,85,45,25,'Jinko_JKM385M-72-TV',63,48.1,10.08,39.5,9.76,385.0,1500,- 0.0029,- 0.0035,0.05,22.3,30,1008,2031,2.0,18.81,144,3,30,1,2,- 40,85,45,25,'Jinko_JKM390M-72-TV',64,48.1,10.17,39.6,9.84,390.0,1500,- 0.0029,- 0.0035,0.05,22.3,30,1008,2031,2.0,19.05,144,3,30,1,2,- 40,85,45,25,'Jinko_JKM395M-72-TV',65,48.3,10.23,39.8,9.92,395.0,1500,- 0.0029,- 0.0035,0.05,22.3,30,1008,2031,2.0,19.29,144,3,30,1,2,- 40,85,45,25,'Jinko_JKM400M-72-TV',66,48.3,10.32,40.0,10.0,400.0,1500,- 0.0029,- 0.0035,0.05,22.3,30,1008,2031,2.0,19.54,144,3,30,1,2,- 40,85,45,25,'Jinko_JKM405M-72-TV',67,48.4,10.42,40.2,10.08,405.0,1500,- 0.0029,- 0.0035,0.05,22.3,30,1008,2031,2.0,19.78,144,3,30,1,2,- 40,85,45,25])\n    #type                                no   ocv   scc  vmax  imax    pmax  Vmax      ocvt   otvmp   tcisc  weig  deph  widt  leng  icost     ef  ncel  tol   dur   tcell   tier   temp   TEMP   NOCT    Inop\n    canadian = np.array(['Canadian CS6K260P',1,37.5,9.12,30.4,8.56,260.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.6,15.88,60,5,25,2,6,- 40,85,45,15,'Canadian CS6K265P',2,37.7,9.23,30.6,8.66,265.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.64,16.19,60,5,25,2,6,- 40,85,45,15,'Canadian CS6K270P',3,37.9,9.32,30.8,8.75,270.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.69,16.5,60,5,25,2,6,- 40,85,45,15,'Canadian CS6K275P',4,38.0,9.45,31.0,8.88,275.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.75,16.8,60,5,25,2,6,- 40,85,45,15,'Canadian CS6K275M',5,38.3,9.31,31.3,8.8,275.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.75,16.8,60,5,25,1,6,- 40,85,45,15,'Canadian CS6K280M',6,38.5,9.43,31.5,8.89,280.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.8,17.11,60,5,25,1,6,- 40,85,45,15,'Canadian CS6K285M',7,38.6,9.51,31.7,8.98,285.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.85,17.41,60,5,25,1,6,- 40,85,45,15,'Canadian CS6X310P',8,44.9,9.08,36.4,8.52,310.0,1000,- 0.0031,- 0.0041,0.053,22.0,40,982,1954,3.1,16.16,72,5,25,2,6,- 40,85,43,15,'Canadian CS6X315P',9,45.1,9.18,36.6,8.61,315.0,1000,- 0.0031,- 0.0041,0.053,22.0,40,982,1954,3.15,16.42,72,5,25,2,6,- 40,85,43,15,'Canadian CS6X320P',10,45.3,9.26,36.8,8.69,320.0,1000,- 0.0031,- 0.0041,0.053,22.0,40,982,1954,3.2,16.68,72,5,25,2,6,- 40,85,43,15,'Canadian CS6X325P',11,45.5,9.34,37.0,8.78,325.0,1000,- 0.0031,- 0.0041,0.053,22.0,40,982,1954,3.25,16.94,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U325P',12,45.5,9.34,37.0,8.78,325.0,1000,- 0.0031,- 0.0041,0.05,22.4,40,992,1960,3.25,16.72,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U330P',13,45.6,9.45,37.2,8.88,330.0,1000,- 0.0031,- 0.0041,0.05,22.4,40,992,1960,3.3,16.97,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U335P',14,45.8,9.54,37.4,8.96,335.0,1000,- 0.0031,- 0.0041,0.05,22.4,40,992,1960,3.35,17.23,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U340P',15,45.9,9.62,37.6,9.05,340.0,1000,- 0.0029,- 0.0039,0.05,22.4,40,992,1960,3.4,17.49,72,5,25,2,6,- 40,85,43,15,'Canadian CS6X330P-FG',16,45.6,9.45,37.2,8.88,330.0,1000,- 0.0031,- 0.004,0.05,27.5,8.5,971,1971,3.25,16.9,72,5,30,2,6,- 40,85,43,15,'Canadian CS6X335P-FG',17,45.8,9.54,37.4,8.96,335.0,1000,- 0.0031,- 0.004,0.05,27.5,8.5,971,1971,3.25,17.16,72,5,30,2,6,- 40,85,43,15,'Canadian CS6X340P-FG',18,45.9,9.62,37.6,9.05,340.0,1000,- 0.0029,- 0.0039,0.05,27.5,8.5,971,1971,3.25,17.42,72,5,30,2,6,- 40,85,43,15,'Canadian CS6X345P-FG',19,46.0,9.69,37.8,9.13,345.0,1000,- 0.0029,- 0.0039,0.05,27.5,8.5,971,1971,3.25,17.67,72,5,30,2,6,- 40,85,43,15,'Canadian CS6X350P-FG',20,46.2,9.79,38.1,9.21,350.0,1000,- 0.0029,- 0.0039,0.05,27.5,8.5,971,1971,3.25,17.93,72,5,30,2,6,- 40,85,43,15,'Canadian CS6X355P-FG',21,46.4,9.84,38.2,9.3,355.0,1000,- 0.0029,- 0.0039,0.05,27.5,8.5,971,1971,3.25,18.18,72,5,30,2,6,- 40,85,43,15,'Canadian CS6K285P-FG Dymond',22,38.3,9.64,31.4,9.06,285.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,3.25,17.33,60,5,30,2,6,- 40,85,43,15,'Canadian CS6K290P-FG Dymond',23,38.5,9.72,31.6,9.18,290.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,3.25,17.63,60,5,30,2,6,- 40,85,43,15,'Canadian CS6K295P-FG Dymond',24,38.6,9.81,31.8,9.28,295.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,3.25,17.94,60,5,30,2,6,- 40,85,43,15,'Canadian CS6K290MS-FG Dymond',25,39.3,9.67,32.1,9.05,290.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,2.85,17.72,60,5,30,2,6,- 40,85,42,15,'Canadian CS6K295MS-FG Dymond',26,39.5,9.75,32.3,9.14,295.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,2.85,18.02,60,5,30,2,6,- 40,85,42,15,'Canadian CS6K300MS-FG Dymond',27,39.7,9.83,32.5,9.24,300.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,2.85,18.33,60,5,30,2,6,- 40,85,42,15,'Canadian CS6K305MS-FG Dymond',28,39.9,9.91,32.7,9.33,305.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,2.85,18.54,60,5,30,2,6,- 40,85,42,15,'Canadian CS6K295MS-FG All black',29,39.5,9.75,32.3,9.14,295.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,17.72,60,5,25,1,6,- 40,85,43,15,'Canadian CS6K300MS-FG All black',30,39.7,9.83,32.5,9.24,300.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.33,60,5,25,1,6,- 40,85,43,15,'Canadian CS6K305MS-FG All black',31,39.9,9.91,32.7,9.33,305.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.63,60,5,25,1,6,- 40,85,43,15,'Canadian CS6K310MS-FG All black',32,40.1,9.99,32.9,9.43,310.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.94,60,5,25,1,6,- 40,85,43,15,'Canadian CS6K285P',33,38.3,9.64,31.4,9.06,285.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,17.41,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K290P',34,38.5,9.72,31.6,9.18,290.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,17.72,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K295P',35,38.6,9.81,31.8,9.28,295.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.02,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K300P',36,38.8,9.92,32.0,9.38,300.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.33,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K305P',37,38.9,10.03,32.1,9.5,305.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.63,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K280P',38,38.2,9.52,31.3,8.95,280.0,1000,- 0.0031,- 0.004,0.05,18.2,35,992,1650,2.85,17.11,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K300MS Superpower',39,39.7,9.83,32.5,9.24,300.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.33,60,5,25,2,6,- 40,85,42,15,'Canadian CS6K305MS Superpower',40,39.9,9.91,32.7,9.33,305.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.63,60,5,25,2,6,- 40,85,42,15,'Canadian CS6K310MS Superpower',41,40.1,9.99,32.9,9.43,310.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.94,60,5,25,2,6,- 40,85,42,15,'Canadian CS6K315MS Superpower',42,40.3,10.07,33.1,9.52,315.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,19.24,60,5,25,2,6,- 40,85,42,15,'Canadian CS6U345P',43,46.0,9.69,37.8,9.13,345.0,1000,- 0.0029,- 0.0039,0.05,22.4,35,992,1960,3.4,17.74,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U350P',44,46.2,9.79,38.1,9.21,350.0,1000,- 0.0029,- 0.0039,0.05,22.4,35,992,1960,3.4,18.0,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U355P',45,46.4,9.84,38.2,9.3,355.0,1000,- 0.0029,- 0.0039,0.05,22.4,35,992,1960,3.4,18.26,72,5,25,2,6,- 40,85,43,15,'Canadian CS3U355P',46,46.8,9.59,39.4,9.02,355.0,1000,- 0.0029,- 0.0037,0.05,22.4,35,992,2000,3.4,17.89,144,5,25,2,6,- 40,85,42,15,'Canadian CS3U360P',47,47.0,9.67,39.6,9.1,360.0,1000,- 0.0029,- 0.0037,0.05,22.4,35,992,2000,3.4,18.15,144,5,25,2,6,- 40,85,42,15,'Canadian CS3U365P',48,47.2,9.75,39.8,9.18,365.0,1000,- 0.0029,- 0.0037,0.05,22.4,35,992,2000,3.4,18.4,144,5,25,2,6,- 40,85,42,15,'Canadian CS3U370P',49,47.4,9.83,40.0,9.26,365.0,1000,- 0.0029,- 0.0037,0.05,22.4,35,992,2000,3.4,18.65,144,5,25,2,6,- 40,85,42,15,'Canadian CS3U335P',50,45.7,9.28,38.2,8.77,335.0,1000,- 0.0031,- 0.0038,0.05,22.4,35,992,2000,3.4,16.89,144,5,25,2,6,- 40,85,43,15,'Canadian CS3U340P',51,45.9,9.36,38.4,8.86,340.0,1000,- 0.0031,- 0.0038,0.05,22.4,35,992,2000,3.4,17.14,144,5,25,2,6,- 40,85,43,15,'Canadian CS3U345P',52,46.1,9.44,38.6,8.94,345.0,1000,- 0.0031,- 0.0038,0.05,22.4,35,992,2000,3.4,17.39,144,5,25,2,6,- 40,85,43,15,'Canadian CS3U350P',53,46.6,9.51,39.2,8.94,350.0,1000,- 0.0031,- 0.0038,0.05,22.4,35,992,2000,3.4,17.64,144,5,25,2,6,- 40,85,43,15,'Canadian CS3U375MS',54,47.6,9.93,39.8,9.43,375.0,1000,- 0.0029,- 0.0036,0.05,22.5,35,992,2000,3.4,18.9,144,5,25,1,6,- 40,85,42,15,'Canadian CS3U380MS',55,47.8,10.01,40.0,9.5,380.0,1000,- 0.0029,- 0.0036,0.05,22.5,35,992,2000,3.4,19.15,144,5,25,1,6,- 40,85,42,15,'Canadian CS3U385MS',56,48.0,10.09,40.2,9.58,385.0,1000,- 0.0029,- 0.0036,0.05,22.5,35,992,2000,3.4,19.41,144,5,25,1,6,- 40,85,42,15,'Canadian CS3U390MS',57,48.2,10.17,40.4,9.66,390.0,1000,- 0.0029,- 0.0036,0.05,22.5,35,992,2000,3.4,19.66,144,5,25,1,6,- 40,85,42,15,'Canadian CS3U395MS',58,48.4,10.25,40.6,9.73,395.0,1000,- 0.0029,- 0.0036,0.05,22.5,35,992,2000,3.4,19.91,144,5,25,1,6,- 40,85,42,15,'Canadian CS3K295P',59,39.1,9.57,32.5,9.08,295.0,1000,- 0.0029,- 0.0037,0.05,18.5,35,992,1675,3.4,17.75,120,5,25,2,6,- 40,85,42,30,'Canadian CS3K300P',60,39.3,9.65,32.7,9.18,300.0,1000,- 0.0029,- 0.0037,0.05,18.5,35,992,1675,3.4,18.05,120,5,25,2,6,- 40,85,42,30,'Canadian CS3K305P',61,39.5,9.73,32.9,9.28,305.0,1000,- 0.0029,- 0.0037,0.05,18.5,35,992,1675,3.4,18.36,120,5,25,2,6,- 40,85,42,30,'Canadian CS3K310P',62,39.7,9.81,33.1,9.37,310.0,1000,- 0.0029,- 0.0037,0.05,18.5,35,992,1675,3.4,18.66,120,5,25,2,6,- 40,85,42,30,'Canadian CS3K275P',63,37.7,9.38,31.0,8.88,275.0,1000,- 0.0031,- 0.0038,0.05,18.5,35,992,1675,3.4,16.65,120,5,25,2,6,- 40,85,43,30,'Canadian CS3K280P',64,37.9,9.47,31.2,8.98,280.0,1000,- 0.0031,- 0.0038,0.05,18.5,35,992,1675,3.4,16.85,120,5,25,2,6,- 40,85,43,30,'Canadian CS3K285P',65,38.1,9.56,31.4,9.08,285.0,1000,- 0.0031,- 0.0038,0.05,18.5,35,992,1675,3.4,17.15,120,5,25,2,6,- 40,85,43,30,'Canadian CS3K290P',66,38.9,9.49,32.3,8.98,290.0,1000,- 0.0031,- 0.0038,0.05,18.5,35,992,1675,3.4,17.45,120,5,25,2,6,- 40,85,43,30,'Canadian CS3K295P',67,38.9,9.49,32.3,8.98,290.0,1000,- 0.0031,- 0.0038,0.05,18.5,35,992,1675,3.4,17.45,120,5,25,2,6,- 40,85,43,30,'Canadian CS3K315MS',68,39.9,10.06,31.1,9.52,315.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,18.96,120,5,25,1,6,- 40,85,42,30,'Canadian CS3K320MS',69,40.1,10.14,33.3,9.61,320.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,19.26,120,5,25,1,6,- 40,85,42,30,'Canadian CS3K325MS',70,40.3,10.22,33.5,9.71,325.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,19.56,120,5,25,1,6,- 40,85,42,30,'Canadian CS3K330MS',71,40.5,10.3,33.7,9.8,330.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,19.86,120,5,25,1,6,- 40,85,42,30,'Canadian CS3K295MS',72,39.1,9.73,32.3,9.14,295.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,17.75,120,5,25,1,6,- 40,85,43,30,'Canadian CS3K300MS',73,39.3,9.82,32.5,9.24,300.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,18.05,120,5,25,1,6,- 40,85,43,30,'Canadian CS3K305MS',74,39.5,9.9,32.7,9.33,305.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,18.36,120,5,25,1,6,- 40,85,43,30,'Canadian CS3K310MS',75,39.7,9.98,32.9,9.43,310.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,18.66,120,5,25,1,6,- 40,85,43,30,'Canadian CS3U355P-FG Dymond',76,46.8,9.59,39.4,9.02,355.0,1000,- 0.0029,- 0.0037,0.05,29.0,8.5,995,2003,3.4,17.89,144,5,30,2,6,- 40,85,42,30,'Canadian CS3U360P-FG Dymond',77,47.0,9.67,39.6,9.1,360.0,1000,- 0.0029,- 0.0037,0.05,29.0,8.5,995,2003,3.4,18.15,144,5,30,2,6,- 40,85,42,30,'Canadian CS3U365P-FG Dymond',78,47.2,9.75,39.8,9.18,365.0,1000,- 0.0029,- 0.0037,0.05,29.0,8.5,995,2003,3.4,18.4,144,5,30,2,6,- 40,85,42,30,'Canadian CS3U370P-FG Dymond',79,47.4,9.83,40.0,9.26,370.0,1000,- 0.0029,- 0.0037,0.05,29.0,8.5,995,2003,3.4,18.65,144,5,30,2,6,- 40,85,42,30,'Canadian CS3U335P-FG Dymond',80,45.7,9.28,38.2,8.77,335.0,1000,- 0.0031,- 0.0038,0.05,29.0,8.5,995,2003,3.4,16.89,144,5,30,2,6,- 40,85,43,30,'Canadian CS3U340P-FG Dymond',81,45.9,9.36,38.4,8.86,340.0,1000,- 0.0031,- 0.0038,0.05,29.0,8.5,995,2003,3.4,17.14,144,5,30,2,6,- 40,85,43,30,'Canadian CS3U345P-FG Dymond',82,46.1,9.44,38.6,8.94,345.0,1000,- 0.0031,- 0.0038,0.05,29.0,8.5,995,2003,3.4,17.39,144,5,30,2,6,- 40,85,43,30,'Canadian CS3U350P-FG Dymond',83,46.6,9.51,39.2,8.94,350.0,1000,- 0.0031,- 0.0038,0.05,29.0,8.5,995,2003,3.4,17.64,144,5,30,2,6,- 40,85,43,30,'Canadian CS3U375MS-FG Dymond',84,47.6,9.93,39.8,9.43,375.0,1000,- 0.0029,- 0.0036,0.05,29.0,8.5,995,2003,3.4,18.9,144,5,30,1,6,- 40,85,42,30,'Canadian CS3U380MS-FG Dymond',85,47.8,10.01,40.0,9.5,380.0,1000,- 0.0029,- 0.0036,0.05,29.0,8.5,995,2003,3.4,19.15,144,5,30,1,6,- 40,85,42,30,'Canadian CS3U385MS-FG Dymond',86,48.0,10.09,40.2,9.58,385.0,1000,- 0.0029,- 0.0036,0.05,29.0,8.5,995,2003,3.4,19.41,144,5,30,1,6,- 40,85,42,30,'Canadian CS3U390MS-FG Dymond',87,48.2,10.17,40.4,9.66,390.0,1000,- 0.0029,- 0.0036,0.05,29.0,8.5,995,2003,3.4,19.66,144,5,30,1,6,- 40,85,42,30,'Canadian CS3U395MS-FG Dymond',88,48.4,10.25,40.6,9.73,395.0,1000,- 0.0029,- 0.0036,0.05,29.0,8.5,995,2003,3.4,19.91,144,5,30,1,6,- 40,85,42,30,'Canadian CS3K295MS-FG Dymond',89,39.1,9.57,32.5,9.08,295.0,1000,- 0.0029,- 0.0037,0.05,24.0,8.5,995,1678,3.4,17.75,120,5,30,2,6,- 40,85,43,30,'Canadian CS3K300MS-FG Dymond',90,39.3,9.65,32.7,9.18,300.0,1000,- 0.0029,- 0.0037,0.05,24.0,8.5,995,1678,3.4,18.05,120,5,30,2,6,- 40,85,43,30,'Canadian CS3K305MS-FG Dymond',91,39.5,9.73,32.9,9.28,305.0,1000,- 0.0029,- 0.0037,0.05,24.0,8.5,995,1678,3.4,18.36,120,5,30,2,6,- 40,85,43,30,'Canadian CS3K310MS-FG Dymond',92,39.7,9.81,33.1,9.37,310.0,1000,- 0.0029,- 0.0037,0.05,24.0,8.5,995,1678,3.4,18.66,120,5,30,2,6,- 40,85,43,30,'Canadian CS3K275P-FG Dymond',93,37.7,9.38,31.0,8.88,275.0,1000,- 0.0031,- 0.0038,0.05,24.0,8.5,995,1678,3.4,16.55,120,5,30,2,6,- 40,85,42,30,'Canadian CS3K280P-FG Dymond',94,37.9,9.47,31.2,8.98,280.0,1000,- 0.0031,- 0.0038,0.05,24.0,8.5,995,1678,3.4,16.85,120,5,30,2,6,- 40,85,42,30,'Canadian CS3K285P-FG Dymond',95,38.1,9.56,31.4,9.08,285.0,1000,- 0.0031,- 0.0038,0.05,24.0,8.5,995,1678,3.4,17.15,120,5,30,2,6,- 40,85,42,30,'Canadian CS3K290P-FG Dymond',96,38.9,9.49,32.3,8.98,290.0,1000,- 0.0031,- 0.0038,0.05,24.0,8.5,995,1678,3.4,17.45,120,5,30,2,6,- 40,85,42,30,'Canadian CS3K315MS-FG Dymond',97,39.9,10.06,33.1,9.52,315.0,1000,- 0.0029,- 0.0036,0.05,24.0,8.5,995,1678,3.4,18.96,120,5,30,1,6,- 40,85,42,30,'Canadian CS3K320MS-FG Dymond',98,40.1,10.14,33.3,9.61,320.0,1000,- 0.0029,- 0.0036,0.05,24.0,8.5,995,1678,3.4,19.26,120,5,30,1,6,- 40,85,42,30,'Canadian CS3K325MS-FG Dymond',99,40.3,10.22,33.5,9.71,325.0,1000,- 0.0029,- 0.0036,0.05,24.0,8.5,995,1678,3.4,19.56,120,5,30,1,6,- 40,85,42,30,'Canadian CS3K330MS-FG Dymond',100,40.5,10.3,33.7,9.8,330.0,1000,- 0.0029,- 0.0036,0.05,24.0,8.5,995,1678,3.4,19.86,120,5,30,1,6,- 40,85,42,30,'Canadian CS3W-390PB-AG',101,46.8,10.74,38.3,10.19,390.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,17.5,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-395PB-AG',102,47.0,10.82,38.5,10.26,395.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,17.7,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-400PB-AG',103,47.2,10.9,38.7,10.34,400.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,17.9,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-405PB-AG',104,47.4,10.98,38.9,10.42,405.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,18.1,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-410PB-AG',105,47.6,11.06,39.1,10.49,410.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,18.3,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-415PB-AG',106,47.8,11.14,39.3,10.56,415.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,18.6,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-420PB-AG',107,48.0,11.26,39.5,10.64,420.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,18.8,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-425PB-AG',108,48.2,11.29,39.7,10.71,425.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,19.0,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-430PB-AG',109,48.4,11.32,39.9,10.78,430.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,19.2,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-435PB-AG',110,48.6,11.35,40.1,10.85,435.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,19.5,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-440PB-AG',111,48.7,11.4,40.3,10.92,440.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,19.7,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-420MB-AG',112,47.9,11.27,39.9,10.53,420.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,18.8,144,5,30,1,4,- 40,85,41,25,'Canadian CS3W-425MB-AG',113,48.1,11.32,40.1,10.6,425.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,19.0,144,5,30,1,4,- 40,85,41,25,'Canadian CS3W-430MB-AG',114,48.3,11.37,40.3,10.68,430.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,19.2,144,5,30,1,4,- 40,85,41,25,'Canadian CS3W-435MB-AG',115,48.5,11.42,40.5,10.75,435.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,19.5,144,5,30,1,4,- 40,85,41,25,'Canadian CS3W-440MB-AG',116,48.7,11.48,40.7,10.82,440.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,19.7,144,5,30,1,4,- 40,85,41,25,'Canadian CS3W-445MB-AG',117,48.9,11.54,40.9,10.89,445.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,19.9,144,5,30,1,4,- 40,85,41,25])\n    #      type            no   ocv   scc  vmax  imax    pmax  Vmax      ocvt    otvmp tcisc   weig  deph  widt  leng  icost     ef  ncel  tol   dur   tcell   tier   temp   TEMP   NOCT    Inop\n    yingli = np.array(['Yingli YL340D-36b',1,46.1,9.3,38.3,8.88,340.0,1000,- 0.003,- 0.0039,0.06,22.0,40,992,1960,2.6,17.5,72,5,25,1,2,- 40,85,45,15,'Yingli YL345D-36b',2,46.3,9.4,38.6,8.94,345.0,1000,- 0.003,- 0.0039,0.06,22.0,40,992,1960,2.6,17.7,72,5,25,1,2,- 40,85,45,15,'Yingli YL350D-36b',3,46.4,9.5,38.8,9.03,350.0,1000,- 0.003,- 0.0039,0.06,22.0,40,992,1960,2.6,18.0,72,5,25,1,2,- 40,85,45,15,'Yingli YL360D-36b',4,46.6,9.7,39.3,9.17,360.0,1000,- 0.003,- 0.0039,0.06,22.0,40,992,1960,2.6,18.5,72,5,25,1,2,- 40,85,45,15,'Yingli YL365D-36b',5,48.1,9.73,39.7,9.2,365.0,1000,- 0.003,- 0.0039,0.06,22.0,40,992,1960,2.6,18.8,72,5,25,1,2,- 40,85,45,15,'Yingli YL370D-36b',6,48.2,9.8,39.8,9.3,370.0,1000,- 0.003,- 0.0039,0.06,22.0,40,992,1960,2.6,19.0,72,5,25,1,2,- 40,85,45,15,'Yingli YL375D-36b',7,48.3,9.87,39.9,9.4,375.0,1000,- 0.003,- 0.0039,0.06,22.0,40,992,1960,2.6,19.3,72,5,25,1,2,- 40,85,45,15,'Yingli YL320D-35b',8,45.2,9.25,36.5,8.78,320.0,1000,- 0.003,- 0.0039,0.05,22.0,40,992,1960,2.6,16.5,72,5,25,1,2,- 40,85,45,15,'Yingli YL325D-35b',9,45.4,9.29,36.9,8.82,325.0,1000,- 0.003,- 0.0039,0.05,22.0,40,992,1960,2.6,16.7,72,5,25,1,2,- 40,85,45,15,'Yingli YL330D-35b',10,45.6,9.33,37.3,8.85,330.0,1000,- 0.003,- 0.0039,0.05,22.0,40,992,1960,2.6,17.0,72,5,25,1,2,- 40,85,45,15,'Yingli YL335D-35b',11,45.7,9.37,37.7,8.89,335.0,1000,- 0.003,- 0.0039,0.05,22.0,40,992,1960,2.6,17.2,72,5,25,1,2,- 40,85,45,15,'Yingli YL340D-35b',12,45.9,9.41,38.1,8.93,340.0,1000,- 0.003,- 0.0039,0.05,22.0,40,992,1960,2.6,17.5,72,5,25,1,2,- 40,85,45,15,'Yingli YL345D-35b',13,46.1,9.45,38.5,8.97,345.0,1000,- 0.003,- 0.0039,0.05,22.0,40,992,1960,2.6,17.7,72,5,25,1,2,- 40,85,45,15,'Yingli YL270D-29b',14,37.7,9.26,30.8,8.77,270.0,1000,- 0.003,- 0.0039,0.05,18.5,35,992,1650,2.6,16.5,60,5,25,1,2,- 40,85,45,15,'Yingli YL275D-29b',15,37.8,9.36,31.0,8.88,275.0,1000,- 0.003,- 0.0039,0.05,18.5,35,992,1650,2.6,16.8,60,5,25,1,2,- 40,85,45,15,'Yingli YL280D-29b',16,38.0,9.45,31.3,8.95,280.0,1000,- 0.003,- 0.0039,0.05,18.5,35,992,1650,2.6,17.1,60,5,25,1,2,- 40,85,45,15,'Yingli YL285D-29b',17,38.2,9.55,31.5,9.05,285.0,1000,- 0.003,- 0.0039,0.05,18.5,35,992,1650,2.6,17.4,60,5,25,1,2,- 40,85,45,15,'Yingli YL290D-29b',18,38.4,9.65,31.7,9.15,290.0,1000,- 0.003,- 0.0039,0.05,18.5,35,992,1650,2.6,17.7,60,5,25,1,2,- 40,85,45,15,'Yingli YL295D-29b',19,38.5,9.74,32.0,9.22,295.0,1000,- 0.003,- 0.0039,0.05,18.5,35,992,1650,2.6,18.0,60,5,25,1,2,- 40,85,45,15,'Yingli YL370CG2536F1',20,45.8,10.76,36.7,10.13,370.0,1500,- 0.003,- 0.0038,0.04,29.2,32,998,1981,2.6,18.7,72,5,30,1,2,- 40,85,39,20,'Yingli YL375CG2536F1',21,46.1,10.79,37.1,10.19,375.0,1500,- 0.003,- 0.0038,0.04,29.2,32,998,1981,2.6,19.0,72,5,30,1,2,- 40,85,39,20,'Yingli YL380CG2536F1',22,46.3,10.83,37.4,10.24,380.0,1500,- 0.003,- 0.0038,0.04,29.2,32,998,1981,2.6,19.2,72,5,30,1,2,- 40,85,39,20,'Yingli YL385CG2536F1',23,46.5,10.87,37.7,10.3,385.0,1500,- 0.003,- 0.0038,0.04,29.2,32,998,1981,2.6,19.5,72,5,30,1,2,- 40,85,39,20,'Yingli YL390CG2536F1',24,46.7,10.91,38.0,10.36,390.0,1500,- 0.003,- 0.0038,0.04,29.2,32,998,1981,2.6,19.7,72,5,30,1,2,- 40,85,39,20,'Yingli YL370CG2536L1',25,45.8,10.76,36.7,10.13,370.0,1500,- 0.003,- 0.0038,0.04,27.5,6,992,1975,2.6,18.9,72,5,30,1,2,- 40,85,39,20,'Yingli YL375CG2536L1',21,46.1,10.79,37.1,10.19,375.0,1500,- 0.003,- 0.0038,0.04,27.5,6,992,1975,2.6,19.1,72,5,30,1,2,- 40,85,39,20,'Yingli YL380CG2536F1',22,46.3,10.83,37.4,10.24,380.0,1500,- 0.003,- 0.0038,0.04,27.5,6,992,1975,2.6,19.4,72,5,30,1,2,- 40,85,39,20,'Yingli YL385CG2536F1',23,46.5,10.87,37.7,10.3,385.0,1500,- 0.003,- 0.0038,0.04,27.5,6,992,1975,2.6,19.7,72,5,30,1,2,- 40,85,39,20,'Yingli YL390CG2536F1',24,46.7,10.91,38.0,10.36,390.0,1500,- 0.003,- 0.0038,0.04,27.5,6,992,1975,2.6,19.9,72,5,30,1,2,- 40,85,39,20])\n    #        type             no   ocv   scc   vmax  imax  pmax   Vmax     ocvt    otvmp   tcisc  weig  deph  widt  leng  icost    ef  ncel  tol   dur   tcell   tier     temp   TEMP     NOCT   Inop\n    brasilG = np.array(['Globo Brasil GBR260p',1,37.65,9.11,30.24,8.6,260.0,1000,- 0.0034,- 0.0043,0.065,19.0,40,990,1640,2.6,16.05,60,5,25,2,1,- 40,85,50,15,'Globo Brasil GBR265p',2,37.9,9.15,30.65,8.65,265.0,1000,- 0.0034,- 0.0043,0.065,19.0,40,990,1640,2.65,16.4,60,5,25,2,1,- 40,85,50,15,'Globo Brasil GBR305p',3,41.2,9.19,35.8,8.53,305.0,1000,- 0.0034,- 0.0043,0.065,27.0,40,992,1956,3.05,15.7,72,5,25,2,1,- 40,85,50,15,'Globo Brasil GBR310p',4,45.57,9.32,36.6,8.56,310.0,1000,- 0.0034,- 0.0043,0.065,27.0,40,992,1956,3.13,16.0,72,5,25,2,1,- 40,85,50,15,'Globo Brasil GBR315p',5,45.38,9.5,36.6,8.61,315.0,1000,- 0.0034,- 0.0043,0.065,27.0,40,992,1956,3.15,16.5,72,5,25,2,1,- 40,85,50,15,'Globo BRasil GBR320p',6,45.44,9.79,37.1,8.63,320.0,1000,- 0.0034,- 0.0043,0.065,27.0,40,992,1956,3.2,16.7,72,5,25,2,1,- 40,85,50,15])",
        "detail": "old.pv_parameters_matheus",
        "documentation": {}
    },
    {
        "label": "#Inop",
        "kind": 5,
        "importPath": "old.pv_parameters_matheus",
        "description": "old.pv_parameters_matheus",
        "peekOfCode": "#Inop = max. series fuse rating\n    #       type            no   ocv   scc   vmp   imp     pmp  Vmax      ocvt    otvmp  tcisc  weig  deph  widt  leng  icost     ef  ncel  tol   dur   tcell   tier  temp   TEMP   NOCT   Inop\n    jinko = np.array(['Jinko_JKM450N-7RL3',1,51.5,11.32,42.9,10.49,450.0,1000,- 0.0028,- 0.0034,0.05,26.1,40,1029,2182,2.0,20.04,156,3,30,1,2,- 40,85,45,20,'Jinko_JKM455N-7RL3',2,51.6,11.41,43.0,10.58,455.0,1000,- 0.0028,- 0.0034,0.05,26.1,40,1029,2182,2.0,20.26,156,3,30,1,2,- 40,85,45,20,'Jinko_JKM460N-7RL3',3,51.7,11.5,43.1,10.67,460.0,1000,- 0.0028,- 0.0034,0.05,26.1,40,1029,2182,2.0,20.49,156,3,30,1,2,- 40,85,45,20,'Jinko_JKM465N-7RL3',4,51.9,11.59,43.2,10.76,465.0,1000,- 0.0028,- 0.0034,0.05,26.1,40,1029,2182,2.0,20.71,156,3,30,1,2,- 40,85,45,20,'Jinko_JKM470N-7RL3',5,52.1,11.68,43.3,10.85,470.0,1000,- 0.0028,- 0.0034,0.05,26.1,40,1029,2182,2.0,20.93,156,3,30,1,2,- 40,85,45,20,'Jinko_JKM375N-6RL3',6,43.5,11.23,35.9,10.44,375.0,1000,- 0.0028,- 0.0034,0.05,20.6,30,1029,1855,2.0,19.65,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM380N-6RL3',7,43.6,11.33,35.9,10.56,380.0,1000,- 0.0028,- 0.0034,0.05,20.6,30,1029,1855,2.0,19.91,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM385N-6RL3',8,43.7,11.43,36.0,10.68,385.0,1000,- 0.0028,- 0.0034,0.05,20.6,30,1029,1855,2.0,20.17,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM390N-6RL3',9,43.8,11.53,36.1,10.8,390.0,1000,- 0.0028,- 0.0034,0.05,20.6,30,1029,1855,2.0,20.43,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM395N-6RL3',10,43.9,11.63,36.2,10.92,395.0,1000,- 0.0028,- 0.0034,0.05,20.6,30,1029,1855,2.0,20.43,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM360N-6RL3-B',11,43.9,10.52,36.7,9.82,360.0,1000,- 0.0028,- 0.0034,0.05,20.8,30,1029,1855,2.0,18.86,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM365N-6RL3-B',12,44.0,10.63,36.8,9.93,365.0,1000,- 0.0028,- 0.0034,0.05,20.8,30,1029,1855,2.0,19.12,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM370N-6RL3-B',13,44.1,10.74,36.9,10.04,370.0,1000,- 0.0028,- 0.0034,0.05,20.8,30,1029,1855,2.0,19.38,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM375N-6RL3-B',14,44.2,10.85,36.9,10.15,375.0,1000,- 0.0028,- 0.0034,0.05,20.8,30,1029,1855,2.0,19.65,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM380N-6RL3-B',15,44.3,10.96,37.0,10.26,380.0,1000,- 0.0028,- 0.0034,0.05,20.8,30,1029,1855,2.0,19.91,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM445M-7RL3-TV',16,51.6,11.08,43.1,10.32,445.0,1500,- 0.0028,- 0.0035,0.05,25.0,35,1032,2205,2.0,19.56,156,3,30,1,2,- 40,85,45,25,'Jinko_JKM450M-7RL3-TV',17,51.7,11.17,43.2,10.42,450.0,1500,- 0.0028,- 0.0035,0.05,25.0,35,1032,2205,2.0,19.78,156,3,30,1,2,- 40,85,45,25,'Jinko_JKM455M-7RL3-TV',18,51.8,11.26,43.2,10.52,455.0,1500,- 0.0028,- 0.0035,0.05,25.0,35,1032,2205,2.0,20.0,156,3,30,1,2,- 40,85,45,25,'Jinko_JKM460M-7RL3-TV',19,51.9,11.35,43.3,10.62,460.0,1500,- 0.0028,- 0.0035,0.05,25.0,35,1032,2205,2.0,20.21,156,3,30,1,2,- 40,85,45,25,'Jinko_JKM465M-7RL3-TV',20,52.0,11.44,43.4,10.72,465.0,1500,- 0.0028,- 0.0035,0.05,25.0,35,1032,2205,2.0,20.43,156,3,30,1,2,- 40,85,45,25,'Jinko_JKM375M-6RL3',21,43.5,11.12,36.2,10.36,375.0,1000,- 0.0028,- 0.0035,0.05,20.8,30,1029,1855,2.0,19.65,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM380M-6RL3',22,43.6,11.21,36.3,10.47,380.0,1000,- 0.0028,- 0.0035,0.05,20.8,30,1029,1855,2.0,19.91,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM385M-6RL3',23,43.7,11.3,36.4,10.58,385.0,1000,- 0.0028,- 0.0035,0.05,20.8,30,1029,1855,2.0,20.17,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM390M-6RL3',24,43.8,11.39,36.5,10.69,390.0,1000,- 0.0028,- 0.0035,0.05,20.8,30,1029,1855,2.0,20.43,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM395M-6RL3',25,43.9,11.48,36.6,10.8,395.0,1000,- 0.0028,- 0.0035,0.05,20.8,30,1029,1855,2.0,20.69,132,3,30,1,2,- 40,85,45,20,'Jinko_JKM360M-6RL3-B',26,43.8,10.68,36.5,9.86,360.0,1000,- 0.0028,- 0.0035,0.05,20.8,30,1029,1855,2.0,18.86,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM365M-6RL3-B',27,43.9,10.79,36.6,9.97,365.0,1000,- 0.0028,- 0.0035,0.05,20.8,30,1029,1855,2.0,19.12,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM370M-6RL3-B',28,44.0,10.9,36.7,10.08,370.0,1000,- 0.0028,- 0.0035,0.05,20.8,30,1029,1855,2.0,19.38,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM375M-6RL3-B',29,44.1,11.01,36.8,10.19,375.0,1000,- 0.0028,- 0.0035,0.05,20.8,30,1029,1855,2.0,19.65,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM380M-6RL3-B',30,44.2,11.12,36.9,10.3,380.0,1000,- 0.0028,- 0.0035,0.05,20.8,30,1029,1855,2.0,19.91,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM325M-60H',31,40.4,10.5,33.4,9.74,325.0,1000,- 0.0029,- 0.0035,0.05,18.5,30,1002,1684,2.0,19.26,120,3,25,1,3,- 40,85,45,20,'Jinko_JKM330M-60H',32,40.6,10.61,33.5,9.84,330.0,1000,- 0.0029,- 0.0035,0.05,18.5,30,1002,1684,2.0,19.56,120,3,25,1,3,- 40,85,45,20,'Jinko_JKM335M-60H',33,40.8,10.73,33.7,9.93,335.0,1000,- 0.0029,- 0.0035,0.05,18.5,30,1002,1684,2.0,19.85,120,3,25,1,3,- 40,85,45,20,'Jinko_JKM340M-60H',34,41.0,10.82,33.9,10.02,340.0,1000,- 0.0029,- 0.0035,0.05,18.5,30,1002,1684,2.0,20.15,120,3,25,1,3,- 40,85,45,20,'Jinko_JKM345M-60H',35,41.2,10.91,34.1,10.11,345.0,1000,- 0.0029,- 0.0035,0.05,18.5,30,1002,1684,2.0,20.45,120,3,25,1,3,- 40,85,45,20,'Jinko_JKM390M-72H',36,48.6,10.46,39.6,9.84,390.0,1000,- 0.0029,- 0.0035,0.05,22.0,30,1002,2008,2.0,19.38,144,3,25,1,2,- 40,85,45,20,'Jinko_JKM395M-72H',37,48.8,10.54,39.9,9.9,395.0,1000,- 0.0029,- 0.0035,0.05,22.0,30,1002,2008,2.0,19.63,144,3,25,1,2,- 40,85,45,20,'Jinko_JKM400M-72H',38,49.1,10.61,40.2,9.96,400.0,1000,- 0.0029,- 0.0035,0.05,22.0,30,1002,2008,2.0,19.88,144,3,25,1,2,- 40,85,45,20,'Jinko_JKM405M-72H',39,49.4,10.69,40.4,10.02,405.0,1000,- 0.0029,- 0.0035,0.05,22.0,30,1002,2008,2.0,20.13,144,3,25,1,2,- 40,85,45,20,'Jinko_JKM410M-72H',40,49.6,10.76,40.7,10.08,410.0,1000,- 0.0029,- 0.0035,0.05,22.0,30,1002,2008,2.0,20.38,144,3,25,1,2,- 40,85,45,20,'Jinko_JKM320M-60H',41,40.2,10.31,33.2,9.65,320.0,1000,- 0.0028,- 0.0035,0.05,18.5,30,1002,1684,2.0,18.96,120,3,25,1,3,- 40,85,45,20,'Jinko_JKM325M-60H',42,40.4,10.5,33.4,9.74,325.0,1000,- 0.0028,- 0.0035,0.05,18.5,30,1002,1684,2.0,19.26,120,3,25,1,3,- 40,85,45,20,'Jinko_JKM330M-60H',43,40.6,10.61,33.5,9.84,330.0,1000,- 0.0028,- 0.0035,0.05,18.5,30,1002,1684,2.0,19.56,120,3,25,1,3,- 40,85,45,20,'Jinko_JKM335M-60H',44,40.8,10.73,33.7,9.93,335.0,1000,- 0.0028,- 0.0035,0.05,18.5,30,1002,1684,2.0,19.86,120,3,25,1,3,- 40,85,45,20,'Jinko_JKM340M-60H',45,41.0,10.82,33.9,10.02,340.0,1000,- 0.0028,- 0.0035,0.05,18.5,30,1002,1684,2.0,20.16,120,3,25,1,3,- 40,85,45,20,'Jinko_JKM345M-66H',46,43.6,10.13,36.6,9.42,345.0,1000,- 0.0029,- 0.0035,0.05,20.0,30,1002,1841,2.0,18.7,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM350M-66H',47,43.6,10.25,36.7,9.54,350.0,1000,- 0.0029,- 0.0035,0.05,20.0,30,1002,1841,2.0,18.97,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM355M-66H',48,43.7,10.37,36.8,9.66,355.0,1000,- 0.0029,- 0.0035,0.05,20.0,30,1002,1841,2.0,19.24,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM360M-66H',49,43.7,10.49,36.8,9.78,360.0,1000,- 0.0029,- 0.0035,0.05,20.0,30,1002,1841,2.0,19.52,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM365M-66H',50,43.7,10.61,36.9,9.9,365.0,1000,- 0.0029,- 0.0035,0.05,20.0,30,1002,1841,2.0,19.79,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM370M-66H',51,43.8,10.62,37.2,9.96,370.0,1000,- 0.0029,- 0.0035,0.05,20.0,30,1002,1841,2.0,20.06,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM375M-66H',52,44.0,10.69,37.2,10.07,375.0,1000,- 0.0029,- 0.0035,0.05,20.0,30,1002,1841,2.0,20.33,132,3,25,1,2,- 40,85,45,20,'Jinko_JKM425M-78H',53,51.4,10.48,43.2,9.83,425.0,1000,- 0.0028,- 0.0035,0.05,24.0,35,1002,2166,2.0,19.58,156,3,25,1,3,- 40,85,45,20,'Jinko_JKM430M-78H',54,51.5,10.57,43.5,9.89,430.0,1000,- 0.0028,- 0.0035,0.05,24.0,35,1002,2166,2.0,19.81,156,3,25,1,3,- 40,85,45,20,'Jinko_JKM435M-78H',55,51.6,10.67,43.6,9.99,435.0,1000,- 0.0028,- 0.0035,0.05,24.0,35,1002,2166,2.0,20.04,156,3,25,1,3,- 40,85,45,20,'Jinko_JKM440M-78H',56,51.7,10.77,43.7,10.08,440.0,1000,- 0.0028,- 0.0035,0.05,24.0,35,1002,2166,2.0,20.27,156,3,25,1,3,- 40,85,45,20,'Jinko_JKM445M-78H',57,52.0,10.84,43.7,10.18,445.0,1000,- 0.0028,- 0.0035,0.05,24.0,35,1002,2166,2.0,20.5,156,3,25,1,3,- 40,85,45,20,'Jinko_JKM385M-72HBDVP',58,48.1,10.32,39.5,9.76,385.0,1500,- 0.0029,- 0.0035,0.05,26.6,30,1008,2031,2.0,18.81,144,3,30,1,2,- 40,85,45,25,'Jinko_JKM390M-72HBDVP',59,48.1,10.41,39.6,9.84,390.0,1500,- 0.0029,- 0.0035,0.05,26.6,30,1008,2031,2.0,19.05,144,3,30,1,2,- 40,85,45,25,'Jinko_JKM395M-72HBDVP',60,48.3,10.5,39.8,9.92,395.0,1500,- 0.0029,- 0.0035,0.05,26.6,30,1008,2031,2.0,19.29,144,3,30,1,2,- 40,85,45,25,'Jinko_JKM400M-72HBDVP',61,48.3,10.59,40.0,10.0,400.0,1500,- 0.0029,- 0.0035,0.05,26.6,30,1008,2031,2.0,19.54,144,3,30,1,2,- 40,85,45,25,'Jinko_JKM405M-72HBDVP',62,48.4,10.68,40.2,10.08,405.0,1500,- 0.0029,- 0.0035,0.05,26.6,30,1008,2031,2.0,19.78,144,3,30,1,2,- 40,85,45,25,'Jinko_JKM385M-72-TV',63,48.1,10.08,39.5,9.76,385.0,1500,- 0.0029,- 0.0035,0.05,22.3,30,1008,2031,2.0,18.81,144,3,30,1,2,- 40,85,45,25,'Jinko_JKM390M-72-TV',64,48.1,10.17,39.6,9.84,390.0,1500,- 0.0029,- 0.0035,0.05,22.3,30,1008,2031,2.0,19.05,144,3,30,1,2,- 40,85,45,25,'Jinko_JKM395M-72-TV',65,48.3,10.23,39.8,9.92,395.0,1500,- 0.0029,- 0.0035,0.05,22.3,30,1008,2031,2.0,19.29,144,3,30,1,2,- 40,85,45,25,'Jinko_JKM400M-72-TV',66,48.3,10.32,40.0,10.0,400.0,1500,- 0.0029,- 0.0035,0.05,22.3,30,1008,2031,2.0,19.54,144,3,30,1,2,- 40,85,45,25,'Jinko_JKM405M-72-TV',67,48.4,10.42,40.2,10.08,405.0,1500,- 0.0029,- 0.0035,0.05,22.3,30,1008,2031,2.0,19.78,144,3,30,1,2,- 40,85,45,25])\n    #type                                no   ocv   scc  vmax  imax    pmax  Vmax      ocvt   otvmp   tcisc  weig  deph  widt  leng  icost     ef  ncel  tol   dur   tcell   tier   temp   TEMP   NOCT    Inop\n    canadian = np.array(['Canadian CS6K260P',1,37.5,9.12,30.4,8.56,260.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.6,15.88,60,5,25,2,6,- 40,85,45,15,'Canadian CS6K265P',2,37.7,9.23,30.6,8.66,265.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.64,16.19,60,5,25,2,6,- 40,85,45,15,'Canadian CS6K270P',3,37.9,9.32,30.8,8.75,270.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.69,16.5,60,5,25,2,6,- 40,85,45,15,'Canadian CS6K275P',4,38.0,9.45,31.0,8.88,275.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.75,16.8,60,5,25,2,6,- 40,85,45,15,'Canadian CS6K275M',5,38.3,9.31,31.3,8.8,275.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.75,16.8,60,5,25,1,6,- 40,85,45,15,'Canadian CS6K280M',6,38.5,9.43,31.5,8.89,280.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.8,17.11,60,5,25,1,6,- 40,85,45,15,'Canadian CS6K285M',7,38.6,9.51,31.7,8.98,285.0,1000,- 0.0031,- 0.0041,0.053,18.2,40,992,1650,2.85,17.41,60,5,25,1,6,- 40,85,45,15,'Canadian CS6X310P',8,44.9,9.08,36.4,8.52,310.0,1000,- 0.0031,- 0.0041,0.053,22.0,40,982,1954,3.1,16.16,72,5,25,2,6,- 40,85,43,15,'Canadian CS6X315P',9,45.1,9.18,36.6,8.61,315.0,1000,- 0.0031,- 0.0041,0.053,22.0,40,982,1954,3.15,16.42,72,5,25,2,6,- 40,85,43,15,'Canadian CS6X320P',10,45.3,9.26,36.8,8.69,320.0,1000,- 0.0031,- 0.0041,0.053,22.0,40,982,1954,3.2,16.68,72,5,25,2,6,- 40,85,43,15,'Canadian CS6X325P',11,45.5,9.34,37.0,8.78,325.0,1000,- 0.0031,- 0.0041,0.053,22.0,40,982,1954,3.25,16.94,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U325P',12,45.5,9.34,37.0,8.78,325.0,1000,- 0.0031,- 0.0041,0.05,22.4,40,992,1960,3.25,16.72,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U330P',13,45.6,9.45,37.2,8.88,330.0,1000,- 0.0031,- 0.0041,0.05,22.4,40,992,1960,3.3,16.97,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U335P',14,45.8,9.54,37.4,8.96,335.0,1000,- 0.0031,- 0.0041,0.05,22.4,40,992,1960,3.35,17.23,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U340P',15,45.9,9.62,37.6,9.05,340.0,1000,- 0.0029,- 0.0039,0.05,22.4,40,992,1960,3.4,17.49,72,5,25,2,6,- 40,85,43,15,'Canadian CS6X330P-FG',16,45.6,9.45,37.2,8.88,330.0,1000,- 0.0031,- 0.004,0.05,27.5,8.5,971,1971,3.25,16.9,72,5,30,2,6,- 40,85,43,15,'Canadian CS6X335P-FG',17,45.8,9.54,37.4,8.96,335.0,1000,- 0.0031,- 0.004,0.05,27.5,8.5,971,1971,3.25,17.16,72,5,30,2,6,- 40,85,43,15,'Canadian CS6X340P-FG',18,45.9,9.62,37.6,9.05,340.0,1000,- 0.0029,- 0.0039,0.05,27.5,8.5,971,1971,3.25,17.42,72,5,30,2,6,- 40,85,43,15,'Canadian CS6X345P-FG',19,46.0,9.69,37.8,9.13,345.0,1000,- 0.0029,- 0.0039,0.05,27.5,8.5,971,1971,3.25,17.67,72,5,30,2,6,- 40,85,43,15,'Canadian CS6X350P-FG',20,46.2,9.79,38.1,9.21,350.0,1000,- 0.0029,- 0.0039,0.05,27.5,8.5,971,1971,3.25,17.93,72,5,30,2,6,- 40,85,43,15,'Canadian CS6X355P-FG',21,46.4,9.84,38.2,9.3,355.0,1000,- 0.0029,- 0.0039,0.05,27.5,8.5,971,1971,3.25,18.18,72,5,30,2,6,- 40,85,43,15,'Canadian CS6K285P-FG Dymond',22,38.3,9.64,31.4,9.06,285.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,3.25,17.33,60,5,30,2,6,- 40,85,43,15,'Canadian CS6K290P-FG Dymond',23,38.5,9.72,31.6,9.18,290.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,3.25,17.63,60,5,30,2,6,- 40,85,43,15,'Canadian CS6K295P-FG Dymond',24,38.6,9.81,31.8,9.28,295.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,3.25,17.94,60,5,30,2,6,- 40,85,43,15,'Canadian CS6K290MS-FG Dymond',25,39.3,9.67,32.1,9.05,290.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,2.85,17.72,60,5,30,2,6,- 40,85,42,15,'Canadian CS6K295MS-FG Dymond',26,39.5,9.75,32.3,9.14,295.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,2.85,18.02,60,5,30,2,6,- 40,85,42,15,'Canadian CS6K300MS-FG Dymond',27,39.7,9.83,32.5,9.24,300.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,2.85,18.33,60,5,30,2,6,- 40,85,42,15,'Canadian CS6K305MS-FG Dymond',28,39.9,9.91,32.7,9.33,305.0,1000,- 0.0029,- 0.0039,0.05,23.0,8.5,995,1661,2.85,18.54,60,5,30,2,6,- 40,85,42,15,'Canadian CS6K295MS-FG All black',29,39.5,9.75,32.3,9.14,295.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,17.72,60,5,25,1,6,- 40,85,43,15,'Canadian CS6K300MS-FG All black',30,39.7,9.83,32.5,9.24,300.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.33,60,5,25,1,6,- 40,85,43,15,'Canadian CS6K305MS-FG All black',31,39.9,9.91,32.7,9.33,305.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.63,60,5,25,1,6,- 40,85,43,15,'Canadian CS6K310MS-FG All black',32,40.1,9.99,32.9,9.43,310.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.94,60,5,25,1,6,- 40,85,43,15,'Canadian CS6K285P',33,38.3,9.64,31.4,9.06,285.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,17.41,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K290P',34,38.5,9.72,31.6,9.18,290.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,17.72,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K295P',35,38.6,9.81,31.8,9.28,295.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.02,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K300P',36,38.8,9.92,32.0,9.38,300.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.33,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K305P',37,38.9,10.03,32.1,9.5,305.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.63,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K280P',38,38.2,9.52,31.3,8.95,280.0,1000,- 0.0031,- 0.004,0.05,18.2,35,992,1650,2.85,17.11,60,5,25,2,6,- 40,85,43,15,'Canadian CS6K300MS Superpower',39,39.7,9.83,32.5,9.24,300.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.33,60,5,25,2,6,- 40,85,42,15,'Canadian CS6K305MS Superpower',40,39.9,9.91,32.7,9.33,305.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.63,60,5,25,2,6,- 40,85,42,15,'Canadian CS6K310MS Superpower',41,40.1,9.99,32.9,9.43,310.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,18.94,60,5,25,2,6,- 40,85,42,15,'Canadian CS6K315MS Superpower',42,40.3,10.07,33.1,9.52,315.0,1000,- 0.0029,- 0.0039,0.05,18.2,35,992,1650,2.85,19.24,60,5,25,2,6,- 40,85,42,15,'Canadian CS6U345P',43,46.0,9.69,37.8,9.13,345.0,1000,- 0.0029,- 0.0039,0.05,22.4,35,992,1960,3.4,17.74,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U350P',44,46.2,9.79,38.1,9.21,350.0,1000,- 0.0029,- 0.0039,0.05,22.4,35,992,1960,3.4,18.0,72,5,25,2,6,- 40,85,43,15,'Canadian CS6U355P',45,46.4,9.84,38.2,9.3,355.0,1000,- 0.0029,- 0.0039,0.05,22.4,35,992,1960,3.4,18.26,72,5,25,2,6,- 40,85,43,15,'Canadian CS3U355P',46,46.8,9.59,39.4,9.02,355.0,1000,- 0.0029,- 0.0037,0.05,22.4,35,992,2000,3.4,17.89,144,5,25,2,6,- 40,85,42,15,'Canadian CS3U360P',47,47.0,9.67,39.6,9.1,360.0,1000,- 0.0029,- 0.0037,0.05,22.4,35,992,2000,3.4,18.15,144,5,25,2,6,- 40,85,42,15,'Canadian CS3U365P',48,47.2,9.75,39.8,9.18,365.0,1000,- 0.0029,- 0.0037,0.05,22.4,35,992,2000,3.4,18.4,144,5,25,2,6,- 40,85,42,15,'Canadian CS3U370P',49,47.4,9.83,40.0,9.26,365.0,1000,- 0.0029,- 0.0037,0.05,22.4,35,992,2000,3.4,18.65,144,5,25,2,6,- 40,85,42,15,'Canadian CS3U335P',50,45.7,9.28,38.2,8.77,335.0,1000,- 0.0031,- 0.0038,0.05,22.4,35,992,2000,3.4,16.89,144,5,25,2,6,- 40,85,43,15,'Canadian CS3U340P',51,45.9,9.36,38.4,8.86,340.0,1000,- 0.0031,- 0.0038,0.05,22.4,35,992,2000,3.4,17.14,144,5,25,2,6,- 40,85,43,15,'Canadian CS3U345P',52,46.1,9.44,38.6,8.94,345.0,1000,- 0.0031,- 0.0038,0.05,22.4,35,992,2000,3.4,17.39,144,5,25,2,6,- 40,85,43,15,'Canadian CS3U350P',53,46.6,9.51,39.2,8.94,350.0,1000,- 0.0031,- 0.0038,0.05,22.4,35,992,2000,3.4,17.64,144,5,25,2,6,- 40,85,43,15,'Canadian CS3U375MS',54,47.6,9.93,39.8,9.43,375.0,1000,- 0.0029,- 0.0036,0.05,22.5,35,992,2000,3.4,18.9,144,5,25,1,6,- 40,85,42,15,'Canadian CS3U380MS',55,47.8,10.01,40.0,9.5,380.0,1000,- 0.0029,- 0.0036,0.05,22.5,35,992,2000,3.4,19.15,144,5,25,1,6,- 40,85,42,15,'Canadian CS3U385MS',56,48.0,10.09,40.2,9.58,385.0,1000,- 0.0029,- 0.0036,0.05,22.5,35,992,2000,3.4,19.41,144,5,25,1,6,- 40,85,42,15,'Canadian CS3U390MS',57,48.2,10.17,40.4,9.66,390.0,1000,- 0.0029,- 0.0036,0.05,22.5,35,992,2000,3.4,19.66,144,5,25,1,6,- 40,85,42,15,'Canadian CS3U395MS',58,48.4,10.25,40.6,9.73,395.0,1000,- 0.0029,- 0.0036,0.05,22.5,35,992,2000,3.4,19.91,144,5,25,1,6,- 40,85,42,15,'Canadian CS3K295P',59,39.1,9.57,32.5,9.08,295.0,1000,- 0.0029,- 0.0037,0.05,18.5,35,992,1675,3.4,17.75,120,5,25,2,6,- 40,85,42,30,'Canadian CS3K300P',60,39.3,9.65,32.7,9.18,300.0,1000,- 0.0029,- 0.0037,0.05,18.5,35,992,1675,3.4,18.05,120,5,25,2,6,- 40,85,42,30,'Canadian CS3K305P',61,39.5,9.73,32.9,9.28,305.0,1000,- 0.0029,- 0.0037,0.05,18.5,35,992,1675,3.4,18.36,120,5,25,2,6,- 40,85,42,30,'Canadian CS3K310P',62,39.7,9.81,33.1,9.37,310.0,1000,- 0.0029,- 0.0037,0.05,18.5,35,992,1675,3.4,18.66,120,5,25,2,6,- 40,85,42,30,'Canadian CS3K275P',63,37.7,9.38,31.0,8.88,275.0,1000,- 0.0031,- 0.0038,0.05,18.5,35,992,1675,3.4,16.65,120,5,25,2,6,- 40,85,43,30,'Canadian CS3K280P',64,37.9,9.47,31.2,8.98,280.0,1000,- 0.0031,- 0.0038,0.05,18.5,35,992,1675,3.4,16.85,120,5,25,2,6,- 40,85,43,30,'Canadian CS3K285P',65,38.1,9.56,31.4,9.08,285.0,1000,- 0.0031,- 0.0038,0.05,18.5,35,992,1675,3.4,17.15,120,5,25,2,6,- 40,85,43,30,'Canadian CS3K290P',66,38.9,9.49,32.3,8.98,290.0,1000,- 0.0031,- 0.0038,0.05,18.5,35,992,1675,3.4,17.45,120,5,25,2,6,- 40,85,43,30,'Canadian CS3K295P',67,38.9,9.49,32.3,8.98,290.0,1000,- 0.0031,- 0.0038,0.05,18.5,35,992,1675,3.4,17.45,120,5,25,2,6,- 40,85,43,30,'Canadian CS3K315MS',68,39.9,10.06,31.1,9.52,315.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,18.96,120,5,25,1,6,- 40,85,42,30,'Canadian CS3K320MS',69,40.1,10.14,33.3,9.61,320.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,19.26,120,5,25,1,6,- 40,85,42,30,'Canadian CS3K325MS',70,40.3,10.22,33.5,9.71,325.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,19.56,120,5,25,1,6,- 40,85,42,30,'Canadian CS3K330MS',71,40.5,10.3,33.7,9.8,330.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,19.86,120,5,25,1,6,- 40,85,42,30,'Canadian CS3K295MS',72,39.1,9.73,32.3,9.14,295.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,17.75,120,5,25,1,6,- 40,85,43,30,'Canadian CS3K300MS',73,39.3,9.82,32.5,9.24,300.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,18.05,120,5,25,1,6,- 40,85,43,30,'Canadian CS3K305MS',74,39.5,9.9,32.7,9.33,305.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,18.36,120,5,25,1,6,- 40,85,43,30,'Canadian CS3K310MS',75,39.7,9.98,32.9,9.43,310.0,1000,- 0.0029,- 0.0036,0.05,18.5,35,992,1675,3.4,18.66,120,5,25,1,6,- 40,85,43,30,'Canadian CS3U355P-FG Dymond',76,46.8,9.59,39.4,9.02,355.0,1000,- 0.0029,- 0.0037,0.05,29.0,8.5,995,2003,3.4,17.89,144,5,30,2,6,- 40,85,42,30,'Canadian CS3U360P-FG Dymond',77,47.0,9.67,39.6,9.1,360.0,1000,- 0.0029,- 0.0037,0.05,29.0,8.5,995,2003,3.4,18.15,144,5,30,2,6,- 40,85,42,30,'Canadian CS3U365P-FG Dymond',78,47.2,9.75,39.8,9.18,365.0,1000,- 0.0029,- 0.0037,0.05,29.0,8.5,995,2003,3.4,18.4,144,5,30,2,6,- 40,85,42,30,'Canadian CS3U370P-FG Dymond',79,47.4,9.83,40.0,9.26,370.0,1000,- 0.0029,- 0.0037,0.05,29.0,8.5,995,2003,3.4,18.65,144,5,30,2,6,- 40,85,42,30,'Canadian CS3U335P-FG Dymond',80,45.7,9.28,38.2,8.77,335.0,1000,- 0.0031,- 0.0038,0.05,29.0,8.5,995,2003,3.4,16.89,144,5,30,2,6,- 40,85,43,30,'Canadian CS3U340P-FG Dymond',81,45.9,9.36,38.4,8.86,340.0,1000,- 0.0031,- 0.0038,0.05,29.0,8.5,995,2003,3.4,17.14,144,5,30,2,6,- 40,85,43,30,'Canadian CS3U345P-FG Dymond',82,46.1,9.44,38.6,8.94,345.0,1000,- 0.0031,- 0.0038,0.05,29.0,8.5,995,2003,3.4,17.39,144,5,30,2,6,- 40,85,43,30,'Canadian CS3U350P-FG Dymond',83,46.6,9.51,39.2,8.94,350.0,1000,- 0.0031,- 0.0038,0.05,29.0,8.5,995,2003,3.4,17.64,144,5,30,2,6,- 40,85,43,30,'Canadian CS3U375MS-FG Dymond',84,47.6,9.93,39.8,9.43,375.0,1000,- 0.0029,- 0.0036,0.05,29.0,8.5,995,2003,3.4,18.9,144,5,30,1,6,- 40,85,42,30,'Canadian CS3U380MS-FG Dymond',85,47.8,10.01,40.0,9.5,380.0,1000,- 0.0029,- 0.0036,0.05,29.0,8.5,995,2003,3.4,19.15,144,5,30,1,6,- 40,85,42,30,'Canadian CS3U385MS-FG Dymond',86,48.0,10.09,40.2,9.58,385.0,1000,- 0.0029,- 0.0036,0.05,29.0,8.5,995,2003,3.4,19.41,144,5,30,1,6,- 40,85,42,30,'Canadian CS3U390MS-FG Dymond',87,48.2,10.17,40.4,9.66,390.0,1000,- 0.0029,- 0.0036,0.05,29.0,8.5,995,2003,3.4,19.66,144,5,30,1,6,- 40,85,42,30,'Canadian CS3U395MS-FG Dymond',88,48.4,10.25,40.6,9.73,395.0,1000,- 0.0029,- 0.0036,0.05,29.0,8.5,995,2003,3.4,19.91,144,5,30,1,6,- 40,85,42,30,'Canadian CS3K295MS-FG Dymond',89,39.1,9.57,32.5,9.08,295.0,1000,- 0.0029,- 0.0037,0.05,24.0,8.5,995,1678,3.4,17.75,120,5,30,2,6,- 40,85,43,30,'Canadian CS3K300MS-FG Dymond',90,39.3,9.65,32.7,9.18,300.0,1000,- 0.0029,- 0.0037,0.05,24.0,8.5,995,1678,3.4,18.05,120,5,30,2,6,- 40,85,43,30,'Canadian CS3K305MS-FG Dymond',91,39.5,9.73,32.9,9.28,305.0,1000,- 0.0029,- 0.0037,0.05,24.0,8.5,995,1678,3.4,18.36,120,5,30,2,6,- 40,85,43,30,'Canadian CS3K310MS-FG Dymond',92,39.7,9.81,33.1,9.37,310.0,1000,- 0.0029,- 0.0037,0.05,24.0,8.5,995,1678,3.4,18.66,120,5,30,2,6,- 40,85,43,30,'Canadian CS3K275P-FG Dymond',93,37.7,9.38,31.0,8.88,275.0,1000,- 0.0031,- 0.0038,0.05,24.0,8.5,995,1678,3.4,16.55,120,5,30,2,6,- 40,85,42,30,'Canadian CS3K280P-FG Dymond',94,37.9,9.47,31.2,8.98,280.0,1000,- 0.0031,- 0.0038,0.05,24.0,8.5,995,1678,3.4,16.85,120,5,30,2,6,- 40,85,42,30,'Canadian CS3K285P-FG Dymond',95,38.1,9.56,31.4,9.08,285.0,1000,- 0.0031,- 0.0038,0.05,24.0,8.5,995,1678,3.4,17.15,120,5,30,2,6,- 40,85,42,30,'Canadian CS3K290P-FG Dymond',96,38.9,9.49,32.3,8.98,290.0,1000,- 0.0031,- 0.0038,0.05,24.0,8.5,995,1678,3.4,17.45,120,5,30,2,6,- 40,85,42,30,'Canadian CS3K315MS-FG Dymond',97,39.9,10.06,33.1,9.52,315.0,1000,- 0.0029,- 0.0036,0.05,24.0,8.5,995,1678,3.4,18.96,120,5,30,1,6,- 40,85,42,30,'Canadian CS3K320MS-FG Dymond',98,40.1,10.14,33.3,9.61,320.0,1000,- 0.0029,- 0.0036,0.05,24.0,8.5,995,1678,3.4,19.26,120,5,30,1,6,- 40,85,42,30,'Canadian CS3K325MS-FG Dymond',99,40.3,10.22,33.5,9.71,325.0,1000,- 0.0029,- 0.0036,0.05,24.0,8.5,995,1678,3.4,19.56,120,5,30,1,6,- 40,85,42,30,'Canadian CS3K330MS-FG Dymond',100,40.5,10.3,33.7,9.8,330.0,1000,- 0.0029,- 0.0036,0.05,24.0,8.5,995,1678,3.4,19.86,120,5,30,1,6,- 40,85,42,30,'Canadian CS3W-390PB-AG',101,46.8,10.74,38.3,10.19,390.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,17.5,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-395PB-AG',102,47.0,10.82,38.5,10.26,395.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,17.7,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-400PB-AG',103,47.2,10.9,38.7,10.34,400.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,17.9,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-405PB-AG',104,47.4,10.98,38.9,10.42,405.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,18.1,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-410PB-AG',105,47.6,11.06,39.1,10.49,410.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,18.3,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-415PB-AG',106,47.8,11.14,39.3,10.56,415.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,18.6,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-420PB-AG',107,48.0,11.26,39.5,10.64,420.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,18.8,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-425PB-AG',108,48.2,11.29,39.7,10.71,425.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,19.0,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-430PB-AG',109,48.4,11.32,39.9,10.78,430.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,19.2,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-435PB-AG',110,48.6,11.35,40.1,10.85,435.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,19.5,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-440PB-AG',111,48.7,11.4,40.3,10.92,440.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,19.7,144,5,30,2,4,- 40,85,41,25,'Canadian CS3W-420MB-AG',112,47.9,11.27,39.9,10.53,420.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,18.8,144,5,30,1,4,- 40,85,41,25,'Canadian CS3W-425MB-AG',113,48.1,11.32,40.1,10.6,425.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,19.0,144,5,30,1,4,- 40,85,41,25,'Canadian CS3W-430MB-AG',114,48.3,11.37,40.3,10.68,430.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,19.2,144,5,30,1,4,- 40,85,41,25,'Canadian CS3W-435MB-AG',115,48.5,11.42,40.5,10.75,435.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,19.5,144,5,30,1,4,- 40,85,41,25,'Canadian CS3W-440MB-AG',116,48.7,11.48,40.7,10.82,440.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,19.7,144,5,30,1,4,- 40,85,41,25,'Canadian CS3W-445MB-AG',117,48.9,11.54,40.9,10.89,445.0,1000,- 0.0028,- 0.0036,0.05,28.4,30,1048,2132,3.4,19.9,144,5,30,1,4,- 40,85,41,25])\n    #      type            no   ocv   scc  vmax  imax    pmax  Vmax      ocvt    otvmp tcisc   weig  deph  widt  leng  icost     ef  ncel  tol   dur   tcell   tier   temp   TEMP   NOCT    Inop\n    yingli = np.array(['Yingli YL340D-36b',1,46.1,9.3,38.3,8.88,340.0,1000,- 0.003,- 0.0039,0.06,22.0,40,992,1960,2.6,17.5,72,5,25,1,2,- 40,85,45,15,'Yingli YL345D-36b',2,46.3,9.4,38.6,8.94,345.0,1000,- 0.003,- 0.0039,0.06,22.0,40,992,1960,2.6,17.7,72,5,25,1,2,- 40,85,45,15,'Yingli YL350D-36b',3,46.4,9.5,38.8,9.03,350.0,1000,- 0.003,- 0.0039,0.06,22.0,40,992,1960,2.6,18.0,72,5,25,1,2,- 40,85,45,15,'Yingli YL360D-36b',4,46.6,9.7,39.3,9.17,360.0,1000,- 0.003,- 0.0039,0.06,22.0,40,992,1960,2.6,18.5,72,5,25,1,2,- 40,85,45,15,'Yingli YL365D-36b',5,48.1,9.73,39.7,9.2,365.0,1000,- 0.003,- 0.0039,0.06,22.0,40,992,1960,2.6,18.8,72,5,25,1,2,- 40,85,45,15,'Yingli YL370D-36b',6,48.2,9.8,39.8,9.3,370.0,1000,- 0.003,- 0.0039,0.06,22.0,40,992,1960,2.6,19.0,72,5,25,1,2,- 40,85,45,15,'Yingli YL375D-36b',7,48.3,9.87,39.9,9.4,375.0,1000,- 0.003,- 0.0039,0.06,22.0,40,992,1960,2.6,19.3,72,5,25,1,2,- 40,85,45,15,'Yingli YL320D-35b',8,45.2,9.25,36.5,8.78,320.0,1000,- 0.003,- 0.0039,0.05,22.0,40,992,1960,2.6,16.5,72,5,25,1,2,- 40,85,45,15,'Yingli YL325D-35b',9,45.4,9.29,36.9,8.82,325.0,1000,- 0.003,- 0.0039,0.05,22.0,40,992,1960,2.6,16.7,72,5,25,1,2,- 40,85,45,15,'Yingli YL330D-35b',10,45.6,9.33,37.3,8.85,330.0,1000,- 0.003,- 0.0039,0.05,22.0,40,992,1960,2.6,17.0,72,5,25,1,2,- 40,85,45,15,'Yingli YL335D-35b',11,45.7,9.37,37.7,8.89,335.0,1000,- 0.003,- 0.0039,0.05,22.0,40,992,1960,2.6,17.2,72,5,25,1,2,- 40,85,45,15,'Yingli YL340D-35b',12,45.9,9.41,38.1,8.93,340.0,1000,- 0.003,- 0.0039,0.05,22.0,40,992,1960,2.6,17.5,72,5,25,1,2,- 40,85,45,15,'Yingli YL345D-35b',13,46.1,9.45,38.5,8.97,345.0,1000,- 0.003,- 0.0039,0.05,22.0,40,992,1960,2.6,17.7,72,5,25,1,2,- 40,85,45,15,'Yingli YL270D-29b',14,37.7,9.26,30.8,8.77,270.0,1000,- 0.003,- 0.0039,0.05,18.5,35,992,1650,2.6,16.5,60,5,25,1,2,- 40,85,45,15,'Yingli YL275D-29b',15,37.8,9.36,31.0,8.88,275.0,1000,- 0.003,- 0.0039,0.05,18.5,35,992,1650,2.6,16.8,60,5,25,1,2,- 40,85,45,15,'Yingli YL280D-29b',16,38.0,9.45,31.3,8.95,280.0,1000,- 0.003,- 0.0039,0.05,18.5,35,992,1650,2.6,17.1,60,5,25,1,2,- 40,85,45,15,'Yingli YL285D-29b',17,38.2,9.55,31.5,9.05,285.0,1000,- 0.003,- 0.0039,0.05,18.5,35,992,1650,2.6,17.4,60,5,25,1,2,- 40,85,45,15,'Yingli YL290D-29b',18,38.4,9.65,31.7,9.15,290.0,1000,- 0.003,- 0.0039,0.05,18.5,35,992,1650,2.6,17.7,60,5,25,1,2,- 40,85,45,15,'Yingli YL295D-29b',19,38.5,9.74,32.0,9.22,295.0,1000,- 0.003,- 0.0039,0.05,18.5,35,992,1650,2.6,18.0,60,5,25,1,2,- 40,85,45,15,'Yingli YL370CG2536F1',20,45.8,10.76,36.7,10.13,370.0,1500,- 0.003,- 0.0038,0.04,29.2,32,998,1981,2.6,18.7,72,5,30,1,2,- 40,85,39,20,'Yingli YL375CG2536F1',21,46.1,10.79,37.1,10.19,375.0,1500,- 0.003,- 0.0038,0.04,29.2,32,998,1981,2.6,19.0,72,5,30,1,2,- 40,85,39,20,'Yingli YL380CG2536F1',22,46.3,10.83,37.4,10.24,380.0,1500,- 0.003,- 0.0038,0.04,29.2,32,998,1981,2.6,19.2,72,5,30,1,2,- 40,85,39,20,'Yingli YL385CG2536F1',23,46.5,10.87,37.7,10.3,385.0,1500,- 0.003,- 0.0038,0.04,29.2,32,998,1981,2.6,19.5,72,5,30,1,2,- 40,85,39,20,'Yingli YL390CG2536F1',24,46.7,10.91,38.0,10.36,390.0,1500,- 0.003,- 0.0038,0.04,29.2,32,998,1981,2.6,19.7,72,5,30,1,2,- 40,85,39,20,'Yingli YL370CG2536L1',25,45.8,10.76,36.7,10.13,370.0,1500,- 0.003,- 0.0038,0.04,27.5,6,992,1975,2.6,18.9,72,5,30,1,2,- 40,85,39,20,'Yingli YL375CG2536L1',21,46.1,10.79,37.1,10.19,375.0,1500,- 0.003,- 0.0038,0.04,27.5,6,992,1975,2.6,19.1,72,5,30,1,2,- 40,85,39,20,'Yingli YL380CG2536F1',22,46.3,10.83,37.4,10.24,380.0,1500,- 0.003,- 0.0038,0.04,27.5,6,992,1975,2.6,19.4,72,5,30,1,2,- 40,85,39,20,'Yingli YL385CG2536F1',23,46.5,10.87,37.7,10.3,385.0,1500,- 0.003,- 0.0038,0.04,27.5,6,992,1975,2.6,19.7,72,5,30,1,2,- 40,85,39,20,'Yingli YL390CG2536F1',24,46.7,10.91,38.0,10.36,390.0,1500,- 0.003,- 0.0038,0.04,27.5,6,992,1975,2.6,19.9,72,5,30,1,2,- 40,85,39,20])\n    #        type             no   ocv   scc   vmax  imax  pmax   Vmax     ocvt    otvmp   tcisc  weig  deph  widt  leng  icost    ef  ncel  tol   dur   tcell   tier     temp   TEMP     NOCT   Inop\n    brasilG = np.array(['Globo Brasil GBR260p',1,37.65,9.11,30.24,8.6,260.0,1000,- 0.0034,- 0.0043,0.065,19.0,40,990,1640,2.6,16.05,60,5,25,2,1,- 40,85,50,15,'Globo Brasil GBR265p',2,37.9,9.15,30.65,8.65,265.0,1000,- 0.0034,- 0.0043,0.065,19.0,40,990,1640,2.65,16.4,60,5,25,2,1,- 40,85,50,15,'Globo Brasil GBR305p',3,41.2,9.19,35.8,8.53,305.0,1000,- 0.0034,- 0.0043,0.065,27.0,40,992,1956,3.05,15.7,72,5,25,2,1,- 40,85,50,15,'Globo Brasil GBR310p',4,45.57,9.32,36.6,8.56,310.0,1000,- 0.0034,- 0.0043,0.065,27.0,40,992,1956,3.13,16.0,72,5,25,2,1,- 40,85,50,15,'Globo Brasil GBR315p',5,45.38,9.5,36.6,8.61,315.0,1000,- 0.0034,- 0.0043,0.065,27.0,40,992,1956,3.15,16.5,72,5,25,2,1,- 40,85,50,15,'Globo BRasil GBR320p',6,45.44,9.79,37.1,8.63,320.0,1000,- 0.0034,- 0.0043,0.065,27.0,40,992,1956,3.2,16.7,72,5,25,2,1,- 40,85,50,15])\n    #      type                 no   ocv   scc  vmax  imax  pmax    Vmax      ocvt    otvmp tcisc  weig  deph  widt   leng  icost    ef  ncel  tol    dur  tcell   tier  temp  TEMP   NOCT    Inop",
        "detail": "old.pv_parameters_matheus",
        "documentation": {}
    },
    {
        "label": "lon",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "lon = input_('Enter the longitude \\n')\nlat = input_('Enter the latitude \\n')\nwind_speed = input_('Enter the annual average of wind speed in (m/s) \\n')\nx_temp = input_('Enter the annual average temperature in (�C) \\n')\nb_temp = input_('Enter the annual maximum temperature in (�C) \\n')\nn_temp = input_('Enter the annual minimum temperature in (�C) \\n')\nlen_ = input_('Enter the Lenght of the area for PV installation (m) \\n')\nwid = input_('Enter the Width of the area for PV installation (m) \\n')\nvff = input_('Enter the system voltage phase-phase. If the distribution system has one phase, inform the voltage phase-neutro (127V) \\n')\nvfn = vff / np.sqrt(3)",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "lat",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "lat = input_('Enter the latitude \\n')\nwind_speed = input_('Enter the annual average of wind speed in (m/s) \\n')\nx_temp = input_('Enter the annual average temperature in (�C) \\n')\nb_temp = input_('Enter the annual maximum temperature in (�C) \\n')\nn_temp = input_('Enter the annual minimum temperature in (�C) \\n')\nlen_ = input_('Enter the Lenght of the area for PV installation (m) \\n')\nwid = input_('Enter the Width of the area for PV installation (m) \\n')\nvff = input_('Enter the system voltage phase-phase. If the distribution system has one phase, inform the voltage phase-neutro (127V) \\n')\nvfn = vff / np.sqrt(3)\n# Solar PV boundary area",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "wind_speed",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "wind_speed = input_('Enter the annual average of wind speed in (m/s) \\n')\nx_temp = input_('Enter the annual average temperature in (�C) \\n')\nb_temp = input_('Enter the annual maximum temperature in (�C) \\n')\nn_temp = input_('Enter the annual minimum temperature in (�C) \\n')\nlen_ = input_('Enter the Lenght of the area for PV installation (m) \\n')\nwid = input_('Enter the Width of the area for PV installation (m) \\n')\nvff = input_('Enter the system voltage phase-phase. If the distribution system has one phase, inform the voltage phase-neutro (127V) \\n')\nvfn = vff / np.sqrt(3)\n# Solar PV boundary area\narea = len_ * wid",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "x_temp",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "x_temp = input_('Enter the annual average temperature in (�C) \\n')\nb_temp = input_('Enter the annual maximum temperature in (�C) \\n')\nn_temp = input_('Enter the annual minimum temperature in (�C) \\n')\nlen_ = input_('Enter the Lenght of the area for PV installation (m) \\n')\nwid = input_('Enter the Width of the area for PV installation (m) \\n')\nvff = input_('Enter the system voltage phase-phase. If the distribution system has one phase, inform the voltage phase-neutro (127V) \\n')\nvfn = vff / np.sqrt(3)\n# Solar PV boundary area\narea = len_ * wid\n# 2 - ELECTRICITY CONSUPTION",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "b_temp",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "b_temp = input_('Enter the annual maximum temperature in (�C) \\n')\nn_temp = input_('Enter the annual minimum temperature in (�C) \\n')\nlen_ = input_('Enter the Lenght of the area for PV installation (m) \\n')\nwid = input_('Enter the Width of the area for PV installation (m) \\n')\nvff = input_('Enter the system voltage phase-phase. If the distribution system has one phase, inform the voltage phase-neutro (127V) \\n')\nvfn = vff / np.sqrt(3)\n# Solar PV boundary area\narea = len_ * wid\n# 2 - ELECTRICITY CONSUPTION\nprint('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "n_temp",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "n_temp = input_('Enter the annual minimum temperature in (�C) \\n')\nlen_ = input_('Enter the Lenght of the area for PV installation (m) \\n')\nwid = input_('Enter the Width of the area for PV installation (m) \\n')\nvff = input_('Enter the system voltage phase-phase. If the distribution system has one phase, inform the voltage phase-neutro (127V) \\n')\nvfn = vff / np.sqrt(3)\n# Solar PV boundary area\narea = len_ * wid\n# 2 - ELECTRICITY CONSUPTION\nprint('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')\nprint('%%%%%%%%%%%%%%%%%%%%%%%%  ENTER THE ELECTRICITY CONSUPTION   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ')",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "len_",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "len_ = input_('Enter the Lenght of the area for PV installation (m) \\n')\nwid = input_('Enter the Width of the area for PV installation (m) \\n')\nvff = input_('Enter the system voltage phase-phase. If the distribution system has one phase, inform the voltage phase-neutro (127V) \\n')\nvfn = vff / np.sqrt(3)\n# Solar PV boundary area\narea = len_ * wid\n# 2 - ELECTRICITY CONSUPTION\nprint('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')\nprint('%%%%%%%%%%%%%%%%%%%%%%%%  ENTER THE ELECTRICITY CONSUPTION   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ')\nprint('[1] ENTER THE CONSUPTION FROM JANUARY TO DECEMBER         [2] ENTER A MEDIUM VALUE OR MAXIMUM VALUE OF A MONTH')",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "wid",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "wid = input_('Enter the Width of the area for PV installation (m) \\n')\nvff = input_('Enter the system voltage phase-phase. If the distribution system has one phase, inform the voltage phase-neutro (127V) \\n')\nvfn = vff / np.sqrt(3)\n# Solar PV boundary area\narea = len_ * wid\n# 2 - ELECTRICITY CONSUPTION\nprint('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')\nprint('%%%%%%%%%%%%%%%%%%%%%%%%  ENTER THE ELECTRICITY CONSUPTION   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ')\nprint('[1] ENTER THE CONSUPTION FROM JANUARY TO DECEMBER         [2] ENTER A MEDIUM VALUE OR MAXIMUM VALUE OF A MONTH')\nprint('[3] TO COMPUTE THE DEMAND USING LIGHT CRITEREA')",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "vff",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "vff = input_('Enter the system voltage phase-phase. If the distribution system has one phase, inform the voltage phase-neutro (127V) \\n')\nvfn = vff / np.sqrt(3)\n# Solar PV boundary area\narea = len_ * wid\n# 2 - ELECTRICITY CONSUPTION\nprint('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')\nprint('%%%%%%%%%%%%%%%%%%%%%%%%  ENTER THE ELECTRICITY CONSUPTION   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ')\nprint('[1] ENTER THE CONSUPTION FROM JANUARY TO DECEMBER         [2] ENTER A MEDIUM VALUE OR MAXIMUM VALUE OF A MONTH')\nprint('[3] TO COMPUTE THE DEMAND USING LIGHT CRITEREA')\nsel = input_('Type [1], [2] or [3] \\n')",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "vfn",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "vfn = vff / np.sqrt(3)\n# Solar PV boundary area\narea = len_ * wid\n# 2 - ELECTRICITY CONSUPTION\nprint('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')\nprint('%%%%%%%%%%%%%%%%%%%%%%%%  ENTER THE ELECTRICITY CONSUPTION   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ')\nprint('[1] ENTER THE CONSUPTION FROM JANUARY TO DECEMBER         [2] ENTER A MEDIUM VALUE OR MAXIMUM VALUE OF A MONTH')\nprint('[3] TO COMPUTE THE DEMAND USING LIGHT CRITEREA')\nsel = input_('Type [1], [2] or [3] \\n')\ndemand = consumption(sel,area)",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "area",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "area = len_ * wid\n# 2 - ELECTRICITY CONSUPTION\nprint('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')\nprint('%%%%%%%%%%%%%%%%%%%%%%%%  ENTER THE ELECTRICITY CONSUPTION   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ')\nprint('[1] ENTER THE CONSUPTION FROM JANUARY TO DECEMBER         [2] ENTER A MEDIUM VALUE OR MAXIMUM VALUE OF A MONTH')\nprint('[3] TO COMPUTE THE DEMAND USING LIGHT CRITEREA')\nsel = input_('Type [1], [2] or [3] \\n')\ndemand = consumption(sel,area)\n# 3 - DESIGN\nprint('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "sel",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "sel = input_('Type [1], [2] or [3] \\n')\ndemand = consumption(sel,area)\n# 3 - DESIGN\nprint('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')\nprint('%%%%%%%%%%%%%%%%%%%%%%%%      CHOOSE THE PROJECT DESIGN    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')\n#disp('[1]-OFF-GRID OPTIMUM                       [3]-OFF-GRID CHOOSING THE PV MODEL')\nprint('[2]-GRID-TIE OPTIMUM                       [4]-GRID-TIE CHOOSING THE PV MODEL')\npro = input_('Type the option [2] OR [4] \\n')\nprint('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')\nprint('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "demand",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "demand = consumption(sel,area)\n# 3 - DESIGN\nprint('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')\nprint('%%%%%%%%%%%%%%%%%%%%%%%%      CHOOSE THE PROJECT DESIGN    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')\n#disp('[1]-OFF-GRID OPTIMUM                       [3]-OFF-GRID CHOOSING THE PV MODEL')\nprint('[2]-GRID-TIE OPTIMUM                       [4]-GRID-TIE CHOOSING THE PV MODEL')\npro = input_('Type the option [2] OR [4] \\n')\nprint('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')\nprint('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')\nprint('%%%%%%%%%%%%%%%%%%%%%%%%      CHOOSE THE PROJECT DESIGN    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "pro",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "pro = input_('Type the option [2] OR [4] \\n')\nprint('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')\nprint('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')\nprint('%%%%%%%%%%%%%%%%%%%%%%%%      CHOOSE THE PROJECT DESIGN    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')\nprint('[1]-ANNUAL MEDIUM DEMAND                       [2]-MINIMUM DEMAND EVERY MONTH')\nproj = input_('Type the option [1] OR [2] \\n')\nprint('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')\nif pro == 4:\n    pv_mo = brapv(pro)\n# Result from the latitude and longitude",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "proj",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "proj = input_('Type the option [1] OR [2] \\n')\nprint('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')\nif pro == 4:\n    pv_mo = brapv(pro)\n# Result from the latitude and longitude\nsol,y,y1,y2 = irradiation(lat,lon)\nh,h1,h2 = month_hour(y,y1,y2)\n#wind_speed_rio = 3.89m/s;\n#wind_speed_salvador= 5.44m/s;\nE = 1000",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "sol,y,y1,y2",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "sol,y,y1,y2 = irradiation(lat,lon)\nh,h1,h2 = month_hour(y,y1,y2)\n#wind_speed_rio = 3.89m/s;\n#wind_speed_salvador= 5.44m/s;\nE = 1000\na_temp = 0.943 * x_temp + 0.0195 * E - 1.528 * wind_speed + 0.3529\nm_temp = 0.943 * x_temp + 0.0195 * E - 1.528 * wind_speed + 0.3529\n# Data_sheet\nfro = inverter_parameters_1(pro)\nbat = battery_parameters(pro)",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "h,h1,h2",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "h,h1,h2 = month_hour(y,y1,y2)\n#wind_speed_rio = 3.89m/s;\n#wind_speed_salvador= 5.44m/s;\nE = 1000\na_temp = 0.943 * x_temp + 0.0195 * E - 1.528 * wind_speed + 0.3529\nm_temp = 0.943 * x_temp + 0.0195 * E - 1.528 * wind_speed + 0.3529\n# Data_sheet\nfro = inverter_parameters_1(pro)\nbat = battery_parameters(pro)\nsun = pv_parameters_1(pro)",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "#wind_speed_rio",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "#wind_speed_rio = 3.89m/s;\n#wind_speed_salvador= 5.44m/s;\nE = 1000\na_temp = 0.943 * x_temp + 0.0195 * E - 1.528 * wind_speed + 0.3529\nm_temp = 0.943 * x_temp + 0.0195 * E - 1.528 * wind_speed + 0.3529\n# Data_sheet\nfro = inverter_parameters_1(pro)\nbat = battery_parameters(pro)\nsun = pv_parameters_1(pro)\nlcc = lc_parameters(pro)",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "E",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "E = 1000\na_temp = 0.943 * x_temp + 0.0195 * E - 1.528 * wind_speed + 0.3529\nm_temp = 0.943 * x_temp + 0.0195 * E - 1.528 * wind_speed + 0.3529\n# Data_sheet\nfro = inverter_parameters_1(pro)\nbat = battery_parameters(pro)\nsun = pv_parameters_1(pro)\nlcc = lc_parameters(pro)\nFc = 0.8\nif pro == 2:",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "a_temp",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "a_temp = 0.943 * x_temp + 0.0195 * E - 1.528 * wind_speed + 0.3529\nm_temp = 0.943 * x_temp + 0.0195 * E - 1.528 * wind_speed + 0.3529\n# Data_sheet\nfro = inverter_parameters_1(pro)\nbat = battery_parameters(pro)\nsun = pv_parameters_1(pro)\nlcc = lc_parameters(pro)\nFc = 0.8\nif pro == 2:\n    # Compute the demand of the system",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "m_temp",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "m_temp = 0.943 * x_temp + 0.0195 * E - 1.528 * wind_speed + 0.3529\n# Data_sheet\nfro = inverter_parameters_1(pro)\nbat = battery_parameters(pro)\nsun = pv_parameters_1(pro)\nlcc = lc_parameters(pro)\nFc = 0.8\nif pro == 2:\n    # Compute the demand of the system\n    P_tilt,P_dir,P_dif,M_tilt,M_dir,M_dif = power2(demand,h,h1,h2,fro,proj,Fc)",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "fro",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "fro = inverter_parameters_1(pro)\nbat = battery_parameters(pro)\nsun = pv_parameters_1(pro)\nlcc = lc_parameters(pro)\nFc = 0.8\nif pro == 2:\n    # Compute the demand of the system\n    P_tilt,P_dir,P_dif,M_tilt,M_dir,M_dif = power2(demand,h,h1,h2,fro,proj,Fc)\n    # 4 - PV DESIGN\n    Ntt,Ndd,Nddf,pt,pd,pdf,p,p1,p2 = pv2(a_temp,m_temp,area,M_tilt,M_dir,M_dif,sun,fro)",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "bat",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "bat = battery_parameters(pro)\nsun = pv_parameters_1(pro)\nlcc = lc_parameters(pro)\nFc = 0.8\nif pro == 2:\n    # Compute the demand of the system\n    P_tilt,P_dir,P_dif,M_tilt,M_dir,M_dif = power2(demand,h,h1,h2,fro,proj,Fc)\n    # 4 - PV DESIGN\n    Ntt,Ndd,Nddf,pt,pd,pdf,p,p1,p2 = pv2(a_temp,m_temp,area,M_tilt,M_dir,M_dif,sun,fro)\n    # # 7 - INVERTER AND MPPT DESIGN",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "sun",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "sun = pv_parameters_1(pro)\nlcc = lc_parameters(pro)\nFc = 0.8\nif pro == 2:\n    # Compute the demand of the system\n    P_tilt,P_dir,P_dif,M_tilt,M_dir,M_dif = power2(demand,h,h1,h2,fro,proj,Fc)\n    # 4 - PV DESIGN\n    Ntt,Ndd,Nddf,pt,pd,pdf,p,p1,p2 = pv2(a_temp,m_temp,area,M_tilt,M_dir,M_dif,sun,fro)\n    # # 7 - INVERTER AND MPPT DESIGN\n    Nit,Cit,pit,Nt,Ct,ptt,Npit,Nft,Npt1,Npt2,tt = inverter2t(M_tilt,a_temp,m_temp,b_temp,n_temp,p,pt,Ntt,vff)",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "lcc",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "lcc = lc_parameters(pro)\nFc = 0.8\nif pro == 2:\n    # Compute the demand of the system\n    P_tilt,P_dir,P_dif,M_tilt,M_dir,M_dif = power2(demand,h,h1,h2,fro,proj,Fc)\n    # 4 - PV DESIGN\n    Ntt,Ndd,Nddf,pt,pd,pdf,p,p1,p2 = pv2(a_temp,m_temp,area,M_tilt,M_dir,M_dif,sun,fro)\n    # # 7 - INVERTER AND MPPT DESIGN\n    Nit,Cit,pit,Nt,Ct,ptt,Npit,Nft,Npt1,Npt2,tt = inverter2t(M_tilt,a_temp,m_temp,b_temp,n_temp,p,pt,Ntt,vff)\n    Nid,Cid,pid,Nd,Cd,pdd,Npid,Nfd,Npd1,Npd2,td = inverter2d(M_dir,a_temp,m_temp,b_temp,n_temp,p1,pd,Ndd,vff)",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "Fc",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "Fc = 0.8\nif pro == 2:\n    # Compute the demand of the system\n    P_tilt,P_dir,P_dif,M_tilt,M_dir,M_dif = power2(demand,h,h1,h2,fro,proj,Fc)\n    # 4 - PV DESIGN\n    Ntt,Ndd,Nddf,pt,pd,pdf,p,p1,p2 = pv2(a_temp,m_temp,area,M_tilt,M_dir,M_dif,sun,fro)\n    # # 7 - INVERTER AND MPPT DESIGN\n    Nit,Cit,pit,Nt,Ct,ptt,Npit,Nft,Npt1,Npt2,tt = inverter2t(M_tilt,a_temp,m_temp,b_temp,n_temp,p,pt,Ntt,vff)\n    Nid,Cid,pid,Nd,Cd,pdd,Npid,Nfd,Npd1,Npd2,td = inverter2d(M_dir,a_temp,m_temp,b_temp,n_temp,p1,pd,Ndd,vff)\n    Nidf,Cidf,pidf,Ndf,Cdf,pddf,Npidf,Nfdf,Npdf1,Npdf2,tdf = inverter2df(M_dif,a_temp,m_temp,b_temp,n_temp,p2,pdf,Nddf,vff)",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "f1",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "f1 = plt.figure(1)\nformat('bank')\nd_t = sum(y / 12)\nd_d = sum(y1 / 12)\nd_df = sum(y2 / 12)\nh_t = np.array([y,d_t])\nh_d = np.array([y1,d_d])\nh_df = np.array([y2,d_df])\nyy = np.array([[h_t],[h_d],[h_df]])\nrnames1 = np.array(['Tilt [h]','Direct [h]','Diffuse [h]'])",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "d_t",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "d_t = sum(y / 12)\nd_d = sum(y1 / 12)\nd_df = sum(y2 / 12)\nh_t = np.array([y,d_t])\nh_d = np.array([y1,d_d])\nh_df = np.array([y2,d_df])\nyy = np.array([[h_t],[h_d],[h_df]])\nrnames1 = np.array(['Tilt [h]','Direct [h]','Diffuse [h]'])\ncnames1 = np.array(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','Annual'])\nt1 = uitable(f1,'Data',yy,'ColumnName',cnames1,'RowName',rnames1,'units','normalized','ColumnWidth',np.array([69]))",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "d_d",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "d_d = sum(y1 / 12)\nd_df = sum(y2 / 12)\nh_t = np.array([y,d_t])\nh_d = np.array([y1,d_d])\nh_df = np.array([y2,d_df])\nyy = np.array([[h_t],[h_d],[h_df]])\nrnames1 = np.array(['Tilt [h]','Direct [h]','Diffuse [h]'])\ncnames1 = np.array(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','Annual'])\nt1 = uitable(f1,'Data',yy,'ColumnName',cnames1,'RowName',rnames1,'units','normalized','ColumnWidth',np.array([69]))\n#'Position',[400 93 121 243],...",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "d_df",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "d_df = sum(y2 / 12)\nh_t = np.array([y,d_t])\nh_d = np.array([y1,d_d])\nh_df = np.array([y2,d_df])\nyy = np.array([[h_t],[h_d],[h_df]])\nrnames1 = np.array(['Tilt [h]','Direct [h]','Diffuse [h]'])\ncnames1 = np.array(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','Annual'])\nt1 = uitable(f1,'Data',yy,'ColumnName',cnames1,'RowName',rnames1,'units','normalized','ColumnWidth',np.array([69]))\n#'Position',[400 93 121 243],...\nsubplot(2,1,1,'position')",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "h_t",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "h_t = np.array([y,d_t])\nh_d = np.array([y1,d_d])\nh_df = np.array([y2,d_df])\nyy = np.array([[h_t],[h_d],[h_df]])\nrnames1 = np.array(['Tilt [h]','Direct [h]','Diffuse [h]'])\ncnames1 = np.array(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','Annual'])\nt1 = uitable(f1,'Data',yy,'ColumnName',cnames1,'RowName',rnames1,'units','normalized','ColumnWidth',np.array([69]))\n#'Position',[400 93 121 243],...\nsubplot(2,1,1,'position')\nx = np.array([np.arange(1,12+1,1)])",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "h_d",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "h_d = np.array([y1,d_d])\nh_df = np.array([y2,d_df])\nyy = np.array([[h_t],[h_d],[h_df]])\nrnames1 = np.array(['Tilt [h]','Direct [h]','Diffuse [h]'])\ncnames1 = np.array(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','Annual'])\nt1 = uitable(f1,'Data',yy,'ColumnName',cnames1,'RowName',rnames1,'units','normalized','ColumnWidth',np.array([69]))\n#'Position',[400 93 121 243],...\nsubplot(2,1,1,'position')\nx = np.array([np.arange(1,12+1,1)])\nplt.plot(x,y,'--or')",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "h_df",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "h_df = np.array([y2,d_df])\nyy = np.array([[h_t],[h_d],[h_df]])\nrnames1 = np.array(['Tilt [h]','Direct [h]','Diffuse [h]'])\ncnames1 = np.array(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','Annual'])\nt1 = uitable(f1,'Data',yy,'ColumnName',cnames1,'RowName',rnames1,'units','normalized','ColumnWidth',np.array([69]))\n#'Position',[400 93 121 243],...\nsubplot(2,1,1,'position')\nx = np.array([np.arange(1,12+1,1)])\nplt.plot(x,y,'--or')\ngrid",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "yy",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "yy = np.array([[h_t],[h_d],[h_df]])\nrnames1 = np.array(['Tilt [h]','Direct [h]','Diffuse [h]'])\ncnames1 = np.array(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','Annual'])\nt1 = uitable(f1,'Data',yy,'ColumnName',cnames1,'RowName',rnames1,'units','normalized','ColumnWidth',np.array([69]))\n#'Position',[400 93 121 243],...\nsubplot(2,1,1,'position')\nx = np.array([np.arange(1,12+1,1)])\nplt.plot(x,y,'--or')\ngrid\nplt.xlabel('Months')",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "rnames1",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "rnames1 = np.array(['Tilt [h]','Direct [h]','Diffuse [h]'])\ncnames1 = np.array(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','Annual'])\nt1 = uitable(f1,'Data',yy,'ColumnName',cnames1,'RowName',rnames1,'units','normalized','ColumnWidth',np.array([69]))\n#'Position',[400 93 121 243],...\nsubplot(2,1,1,'position')\nx = np.array([np.arange(1,12+1,1)])\nplt.plot(x,y,'--or')\ngrid\nplt.xlabel('Months')\nplt.ylabel('Hours [h]')",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "cnames1",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "cnames1 = np.array(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','Annual'])\nt1 = uitable(f1,'Data',yy,'ColumnName',cnames1,'RowName',rnames1,'units','normalized','ColumnWidth',np.array([69]))\n#'Position',[400 93 121 243],...\nsubplot(2,1,1,'position')\nx = np.array([np.arange(1,12+1,1)])\nplt.plot(x,y,'--or')\ngrid\nplt.xlabel('Months')\nplt.ylabel('Hours [h]')\nplt.title('HOURS OF SUN PER DAY')",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "t1",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "t1 = uitable(f1,'Data',yy,'ColumnName',cnames1,'RowName',rnames1,'units','normalized','ColumnWidth',np.array([69]))\n#'Position',[400 93 121 243],...\nsubplot(2,1,1,'position')\nx = np.array([np.arange(1,12+1,1)])\nplt.plot(x,y,'--or')\ngrid\nplt.xlabel('Months')\nplt.ylabel('Hours [h]')\nplt.title('HOURS OF SUN PER DAY')\nhold('on')",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "x = np.array([np.arange(1,12+1,1)])\nplt.plot(x,y,'--or')\ngrid\nplt.xlabel('Months')\nplt.ylabel('Hours [h]')\nplt.title('HOURS OF SUN PER DAY')\nhold('on')\nplt.plot(x,y1,'-+b')\nplt.plot(x,y2,':*m')\nplt.legend('Tilted','Direct','Difuse')",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "pos1",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "pos1 = get(subplot(2,1,2),'position')\nos.delete(subplot(2,1,2))\nset(t1,'position',pos1)\n# Figure 2 - Solar power\nf2 = plt.figure(2)\nformat('bank')\nPger_t = (np.multiply(np.multiply(pt(1,6) * Nt,h(1,:)),Fc)) / 1000\nPger_d = (np.multiply(np.multiply(pd(1,6) * Nd,h1(1,:)),Fc)) / 1000\nPger_df = (np.multiply(np.multiply(pdf(1,6) * Ndf,h2(1,:)),Fc)) / 1000\nMger_t = sum(Pger_t / 12)",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "f2",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "f2 = plt.figure(2)\nformat('bank')\nPger_t = (np.multiply(np.multiply(pt(1,6) * Nt,h(1,:)),Fc)) / 1000\nPger_d = (np.multiply(np.multiply(pd(1,6) * Nd,h1(1,:)),Fc)) / 1000\nPger_df = (np.multiply(np.multiply(pdf(1,6) * Ndf,h2(1,:)),Fc)) / 1000\nMger_t = sum(Pger_t / 12)\nMger_d = sum(Pger_d / 12)\nMger_df = sum(Pger_df / 12)\nger_t = np.array([Pger_t,Mger_t])\nger_d = np.array([Pger_d,Mger_d])",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "Pger_t",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "Pger_t = (np.multiply(np.multiply(pt(1,6) * Nt,h(1,:)),Fc)) / 1000\nPger_d = (np.multiply(np.multiply(pd(1,6) * Nd,h1(1,:)),Fc)) / 1000\nPger_df = (np.multiply(np.multiply(pdf(1,6) * Ndf,h2(1,:)),Fc)) / 1000\nMger_t = sum(Pger_t / 12)\nMger_d = sum(Pger_d / 12)\nMger_df = sum(Pger_df / 12)\nger_t = np.array([Pger_t,Mger_t])\nger_d = np.array([Pger_d,Mger_d])\nger_df = np.array([Pger_df,Mger_df])\nP = np.array([[ger_t],[ger_d],[ger_df]])",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "Pger_d",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "Pger_d = (np.multiply(np.multiply(pd(1,6) * Nd,h1(1,:)),Fc)) / 1000\nPger_df = (np.multiply(np.multiply(pdf(1,6) * Ndf,h2(1,:)),Fc)) / 1000\nMger_t = sum(Pger_t / 12)\nMger_d = sum(Pger_d / 12)\nMger_df = sum(Pger_df / 12)\nger_t = np.array([Pger_t,Mger_t])\nger_d = np.array([Pger_d,Mger_d])\nger_df = np.array([Pger_df,Mger_df])\nP = np.array([[ger_t],[ger_d],[ger_df]])\nrnames2 = np.array(['Tilt[kWh]','Direct [kWh]','Diffuse [kWh]'])",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "Pger_df",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "Pger_df = (np.multiply(np.multiply(pdf(1,6) * Ndf,h2(1,:)),Fc)) / 1000\nMger_t = sum(Pger_t / 12)\nMger_d = sum(Pger_d / 12)\nMger_df = sum(Pger_df / 12)\nger_t = np.array([Pger_t,Mger_t])\nger_d = np.array([Pger_d,Mger_d])\nger_df = np.array([Pger_df,Mger_df])\nP = np.array([[ger_t],[ger_d],[ger_df]])\nrnames2 = np.array(['Tilt[kWh]','Direct [kWh]','Diffuse [kWh]'])\ncnames2 = np.array(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','Annual'])",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "Mger_t",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "Mger_t = sum(Pger_t / 12)\nMger_d = sum(Pger_d / 12)\nMger_df = sum(Pger_df / 12)\nger_t = np.array([Pger_t,Mger_t])\nger_d = np.array([Pger_d,Mger_d])\nger_df = np.array([Pger_df,Mger_df])\nP = np.array([[ger_t],[ger_d],[ger_df]])\nrnames2 = np.array(['Tilt[kWh]','Direct [kWh]','Diffuse [kWh]'])\ncnames2 = np.array(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','Annual'])\nt2 = uitable(f2,'Data',P,'ColumnName',cnames2,'RowName',rnames2,'units','normalized','ColumnWidth',np.array([69]))",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "Mger_d",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "Mger_d = sum(Pger_d / 12)\nMger_df = sum(Pger_df / 12)\nger_t = np.array([Pger_t,Mger_t])\nger_d = np.array([Pger_d,Mger_d])\nger_df = np.array([Pger_df,Mger_df])\nP = np.array([[ger_t],[ger_d],[ger_df]])\nrnames2 = np.array(['Tilt[kWh]','Direct [kWh]','Diffuse [kWh]'])\ncnames2 = np.array(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','Annual'])\nt2 = uitable(f2,'Data',P,'ColumnName',cnames2,'RowName',rnames2,'units','normalized','ColumnWidth',np.array([69]))\n#'Position',[400 93 121 243],...",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "Mger_df",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "Mger_df = sum(Pger_df / 12)\nger_t = np.array([Pger_t,Mger_t])\nger_d = np.array([Pger_d,Mger_d])\nger_df = np.array([Pger_df,Mger_df])\nP = np.array([[ger_t],[ger_d],[ger_df]])\nrnames2 = np.array(['Tilt[kWh]','Direct [kWh]','Diffuse [kWh]'])\ncnames2 = np.array(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','Annual'])\nt2 = uitable(f2,'Data',P,'ColumnName',cnames2,'RowName',rnames2,'units','normalized','ColumnWidth',np.array([69]))\n#'Position',[400 93 121 243],...\nsubplot(2,1,1,'position')",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "ger_t",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "ger_t = np.array([Pger_t,Mger_t])\nger_d = np.array([Pger_d,Mger_d])\nger_df = np.array([Pger_df,Mger_df])\nP = np.array([[ger_t],[ger_d],[ger_df]])\nrnames2 = np.array(['Tilt[kWh]','Direct [kWh]','Diffuse [kWh]'])\ncnames2 = np.array(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','Annual'])\nt2 = uitable(f2,'Data',P,'ColumnName',cnames2,'RowName',rnames2,'units','normalized','ColumnWidth',np.array([69]))\n#'Position',[400 93 121 243],...\nsubplot(2,1,1,'position')\nx = np.array([np.arange(1,12+1,1)])",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "ger_d",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "ger_d = np.array([Pger_d,Mger_d])\nger_df = np.array([Pger_df,Mger_df])\nP = np.array([[ger_t],[ger_d],[ger_df]])\nrnames2 = np.array(['Tilt[kWh]','Direct [kWh]','Diffuse [kWh]'])\ncnames2 = np.array(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','Annual'])\nt2 = uitable(f2,'Data',P,'ColumnName',cnames2,'RowName',rnames2,'units','normalized','ColumnWidth',np.array([69]))\n#'Position',[400 93 121 243],...\nsubplot(2,1,1,'position')\nx = np.array([np.arange(1,12+1,1)])\nplt.plot(x,Pger_t,'--or')",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "ger_df",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "ger_df = np.array([Pger_df,Mger_df])\nP = np.array([[ger_t],[ger_d],[ger_df]])\nrnames2 = np.array(['Tilt[kWh]','Direct [kWh]','Diffuse [kWh]'])\ncnames2 = np.array(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','Annual'])\nt2 = uitable(f2,'Data',P,'ColumnName',cnames2,'RowName',rnames2,'units','normalized','ColumnWidth',np.array([69]))\n#'Position',[400 93 121 243],...\nsubplot(2,1,1,'position')\nx = np.array([np.arange(1,12+1,1)])\nplt.plot(x,Pger_t,'--or')\ngrid",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "P = np.array([[ger_t],[ger_d],[ger_df]])\nrnames2 = np.array(['Tilt[kWh]','Direct [kWh]','Diffuse [kWh]'])\ncnames2 = np.array(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','Annual'])\nt2 = uitable(f2,'Data',P,'ColumnName',cnames2,'RowName',rnames2,'units','normalized','ColumnWidth',np.array([69]))\n#'Position',[400 93 121 243],...\nsubplot(2,1,1,'position')\nx = np.array([np.arange(1,12+1,1)])\nplt.plot(x,Pger_t,'--or')\ngrid\nplt.xlabel('Months')",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "rnames2",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "rnames2 = np.array(['Tilt[kWh]','Direct [kWh]','Diffuse [kWh]'])\ncnames2 = np.array(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','Annual'])\nt2 = uitable(f2,'Data',P,'ColumnName',cnames2,'RowName',rnames2,'units','normalized','ColumnWidth',np.array([69]))\n#'Position',[400 93 121 243],...\nsubplot(2,1,1,'position')\nx = np.array([np.arange(1,12+1,1)])\nplt.plot(x,Pger_t,'--or')\ngrid\nplt.xlabel('Months')\nplt.ylabel('Energy [kWh]')",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "cnames2",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "cnames2 = np.array(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','Annual'])\nt2 = uitable(f2,'Data',P,'ColumnName',cnames2,'RowName',rnames2,'units','normalized','ColumnWidth',np.array([69]))\n#'Position',[400 93 121 243],...\nsubplot(2,1,1,'position')\nx = np.array([np.arange(1,12+1,1)])\nplt.plot(x,Pger_t,'--or')\ngrid\nplt.xlabel('Months')\nplt.ylabel('Energy [kWh]')\nplt.title('ENERGY PRODUCED BY MONTH')",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "t2",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "t2 = uitable(f2,'Data',P,'ColumnName',cnames2,'RowName',rnames2,'units','normalized','ColumnWidth',np.array([69]))\n#'Position',[400 93 121 243],...\nsubplot(2,1,1,'position')\nx = np.array([np.arange(1,12+1,1)])\nplt.plot(x,Pger_t,'--or')\ngrid\nplt.xlabel('Months')\nplt.ylabel('Energy [kWh]')\nplt.title('ENERGY PRODUCED BY MONTH')\nhold('on')",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "x = np.array([np.arange(1,12+1,1)])\nplt.plot(x,Pger_t,'--or')\ngrid\nplt.xlabel('Months')\nplt.ylabel('Energy [kWh]')\nplt.title('ENERGY PRODUCED BY MONTH')\nhold('on')\nplt.plot(x,Pger_d,':*m')\nplt.plot(x,Pger_df,'-.+g')\nplt.legend('Tilt','Direct','Difuse')",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "pos2",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "pos2 = get(subplot(2,1,2),'position')\nos.delete(subplot(2,1,2))\nset(t2,'position',pos2)\n# Solar Painel + Inverter Parameters\nf3 = plt.figure(3)\nformat('bank')\nSt,Sd,Sdf = pv_string_1(pt,pd,pdf)\nSit,Sid,Sidf = inv_string_1(pit,pid,pidf)\npvv = np.array([[pt(1,np.arange(2,22+1))],[pd(1,np.arange(2,22+1))],[pdf(1,np.arange(2,22+1))]])\nsvv = np.array([[St],[Sd],[Sdf]])",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "f3",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "f3 = plt.figure(3)\nformat('bank')\nSt,Sd,Sdf = pv_string_1(pt,pd,pdf)\nSit,Sid,Sidf = inv_string_1(pit,pid,pidf)\npvv = np.array([[pt(1,np.arange(2,22+1))],[pd(1,np.arange(2,22+1))],[pdf(1,np.arange(2,22+1))]])\nsvv = np.array([[St],[Sd],[Sdf]])\ninv = np.array([[pit(1,np.arange(2,25+1))],[pid(1,np.arange(2,25+1))],[pidf(1,np.arange(2,25+1))]])\nsinv = np.array([[Sit],[Sid],[Sidf]])\nnt = np.array([Nt,Nit,Npit,Npt1,Npt2,tt])\nnd = np.array([Nd,Nid,Npid,Npd1,Npd2,td])",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "St,Sd,Sdf",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "St,Sd,Sdf = pv_string_1(pt,pd,pdf)\nSit,Sid,Sidf = inv_string_1(pit,pid,pidf)\npvv = np.array([[pt(1,np.arange(2,22+1))],[pd(1,np.arange(2,22+1))],[pdf(1,np.arange(2,22+1))]])\nsvv = np.array([[St],[Sd],[Sdf]])\ninv = np.array([[pit(1,np.arange(2,25+1))],[pid(1,np.arange(2,25+1))],[pidf(1,np.arange(2,25+1))]])\nsinv = np.array([[Sit],[Sid],[Sidf]])\nnt = np.array([Nt,Nit,Npit,Npt1,Npt2,tt])\nnd = np.array([Nd,Nid,Npid,Npd1,Npd2,td])\nndf = np.array([Ndf,Nidf,Npidf,Npdf1,Npdf2,tdf])\nntt = np.array([num2cell(nt),NFT])",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "Sit,Sid,Sidf",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "Sit,Sid,Sidf = inv_string_1(pit,pid,pidf)\npvv = np.array([[pt(1,np.arange(2,22+1))],[pd(1,np.arange(2,22+1))],[pdf(1,np.arange(2,22+1))]])\nsvv = np.array([[St],[Sd],[Sdf]])\ninv = np.array([[pit(1,np.arange(2,25+1))],[pid(1,np.arange(2,25+1))],[pidf(1,np.arange(2,25+1))]])\nsinv = np.array([[Sit],[Sid],[Sidf]])\nnt = np.array([Nt,Nit,Npit,Npt1,Npt2,tt])\nnd = np.array([Nd,Nid,Npid,Npd1,Npd2,td])\nndf = np.array([Ndf,Nidf,Npidf,Npdf1,Npdf2,tdf])\nntt = np.array([num2cell(nt),NFT])\nndd = np.array([num2cell(nd),NFD])",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "pvv",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "pvv = np.array([[pt(1,np.arange(2,22+1))],[pd(1,np.arange(2,22+1))],[pdf(1,np.arange(2,22+1))]])\nsvv = np.array([[St],[Sd],[Sdf]])\ninv = np.array([[pit(1,np.arange(2,25+1))],[pid(1,np.arange(2,25+1))],[pidf(1,np.arange(2,25+1))]])\nsinv = np.array([[Sit],[Sid],[Sidf]])\nnt = np.array([Nt,Nit,Npit,Npt1,Npt2,tt])\nnd = np.array([Nd,Nid,Npid,Npd1,Npd2,td])\nndf = np.array([Ndf,Nidf,Npidf,Npdf1,Npdf2,tdf])\nntt = np.array([num2cell(nt),NFT])\nndd = np.array([num2cell(nd),NFD])\nnddf = np.array([num2cell(ndf),NFDF])",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "svv",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "svv = np.array([[St],[Sd],[Sdf]])\ninv = np.array([[pit(1,np.arange(2,25+1))],[pid(1,np.arange(2,25+1))],[pidf(1,np.arange(2,25+1))]])\nsinv = np.array([[Sit],[Sid],[Sidf]])\nnt = np.array([Nt,Nit,Npit,Npt1,Npt2,tt])\nnd = np.array([Nd,Nid,Npid,Npd1,Npd2,td])\nndf = np.array([Ndf,Nidf,Npidf,Npdf1,Npdf2,tdf])\nntt = np.array([num2cell(nt),NFT])\nndd = np.array([num2cell(nd),NFD])\nnddf = np.array([num2cell(ndf),NFDF])\nnin = np.array([np.transpose(nt),np.transpose(nd),np.transpose(ndf)])",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "inv",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "inv = np.array([[pit(1,np.arange(2,25+1))],[pid(1,np.arange(2,25+1))],[pidf(1,np.arange(2,25+1))]])\nsinv = np.array([[Sit],[Sid],[Sidf]])\nnt = np.array([Nt,Nit,Npit,Npt1,Npt2,tt])\nnd = np.array([Nd,Nid,Npid,Npd1,Npd2,td])\nndf = np.array([Ndf,Nidf,Npidf,Npdf1,Npdf2,tdf])\nntt = np.array([num2cell(nt),NFT])\nndd = np.array([num2cell(nd),NFD])\nnddf = np.array([num2cell(ndf),NFDF])\nnin = np.array([np.transpose(nt),np.transpose(nd),np.transpose(ndf)])\npvvv = np.array([svv,num2cell(pvv)])",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "sinv",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "sinv = np.array([[Sit],[Sid],[Sidf]])\nnt = np.array([Nt,Nit,Npit,Npt1,Npt2,tt])\nnd = np.array([Nd,Nid,Npid,Npd1,Npd2,td])\nndf = np.array([Ndf,Nidf,Npidf,Npdf1,Npdf2,tdf])\nntt = np.array([num2cell(nt),NFT])\nndd = np.array([num2cell(nd),NFD])\nnddf = np.array([num2cell(ndf),NFDF])\nnin = np.array([np.transpose(nt),np.transpose(nd),np.transpose(ndf)])\npvvv = np.array([svv,num2cell(pvv)])\ninvv = np.array([sinv,num2cell(inv)])",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "nt",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "nt = np.array([Nt,Nit,Npit,Npt1,Npt2,tt])\nnd = np.array([Nd,Nid,Npid,Npd1,Npd2,td])\nndf = np.array([Ndf,Nidf,Npidf,Npdf1,Npdf2,tdf])\nntt = np.array([num2cell(nt),NFT])\nndd = np.array([num2cell(nd),NFD])\nnddf = np.array([num2cell(ndf),NFDF])\nnin = np.array([np.transpose(nt),np.transpose(nd),np.transpose(ndf)])\npvvv = np.array([svv,num2cell(pvv)])\ninvv = np.array([sinv,num2cell(inv)])\ncnames3 = np.array(['Number of Solar Painel','Number of Inverters','Number of Solar Painel by inverter','Max. Number of String by Inverter at MPPT1','Max. Number of String by Inverter at MPPT2','Number of Power Transformer'])",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "nd",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "nd = np.array([Nd,Nid,Npid,Npd1,Npd2,td])\nndf = np.array([Ndf,Nidf,Npidf,Npdf1,Npdf2,tdf])\nntt = np.array([num2cell(nt),NFT])\nndd = np.array([num2cell(nd),NFD])\nnddf = np.array([num2cell(ndf),NFDF])\nnin = np.array([np.transpose(nt),np.transpose(nd),np.transpose(ndf)])\npvvv = np.array([svv,num2cell(pvv)])\ninvv = np.array([sinv,num2cell(inv)])\ncnames3 = np.array(['Number of Solar Painel','Number of Inverters','Number of Solar Painel by inverter','Max. Number of String by Inverter at MPPT1','Max. Number of String by Inverter at MPPT2','Number of Power Transformer'])\nrnames3 = np.array(['For tilted design','For direct design','For diffuse design'])",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "ndf",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "ndf = np.array([Ndf,Nidf,Npidf,Npdf1,Npdf2,tdf])\nntt = np.array([num2cell(nt),NFT])\nndd = np.array([num2cell(nd),NFD])\nnddf = np.array([num2cell(ndf),NFDF])\nnin = np.array([np.transpose(nt),np.transpose(nd),np.transpose(ndf)])\npvvv = np.array([svv,num2cell(pvv)])\ninvv = np.array([sinv,num2cell(inv)])\ncnames3 = np.array(['Number of Solar Painel','Number of Inverters','Number of Solar Painel by inverter','Max. Number of String by Inverter at MPPT1','Max. Number of String by Inverter at MPPT2','Number of Power Transformer'])\nrnames3 = np.array(['For tilted design','For direct design','For diffuse design'])\nt3 = uitable(f3,'Data',nin,'ColumnName',rnames3,'RowName',cnames3,'Position',np.array([20,400,1200,150]),'ColumnWidth',np.array([80]))",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "ntt",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "ntt = np.array([num2cell(nt),NFT])\nndd = np.array([num2cell(nd),NFD])\nnddf = np.array([num2cell(ndf),NFDF])\nnin = np.array([np.transpose(nt),np.transpose(nd),np.transpose(ndf)])\npvvv = np.array([svv,num2cell(pvv)])\ninvv = np.array([sinv,num2cell(inv)])\ncnames3 = np.array(['Number of Solar Painel','Number of Inverters','Number of Solar Painel by inverter','Max. Number of String by Inverter at MPPT1','Max. Number of String by Inverter at MPPT2','Number of Power Transformer'])\nrnames3 = np.array(['For tilted design','For direct design','For diffuse design'])\nt3 = uitable(f3,'Data',nin,'ColumnName',rnames3,'RowName',cnames3,'Position',np.array([20,400,1200,150]),'ColumnWidth',np.array([80]))\ntxt_title3 = uicontrol('Style','text','Position',np.array([600,635,200,20]),'String','RESULTS')",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "ndd",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "ndd = np.array([num2cell(nd),NFD])\nnddf = np.array([num2cell(ndf),NFDF])\nnin = np.array([np.transpose(nt),np.transpose(nd),np.transpose(ndf)])\npvvv = np.array([svv,num2cell(pvv)])\ninvv = np.array([sinv,num2cell(inv)])\ncnames3 = np.array(['Number of Solar Painel','Number of Inverters','Number of Solar Painel by inverter','Max. Number of String by Inverter at MPPT1','Max. Number of String by Inverter at MPPT2','Number of Power Transformer'])\nrnames3 = np.array(['For tilted design','For direct design','For diffuse design'])\nt3 = uitable(f3,'Data',nin,'ColumnName',rnames3,'RowName',cnames3,'Position',np.array([20,400,1200,150]),'ColumnWidth',np.array([80]))\ntxt_title3 = uicontrol('Style','text','Position',np.array([600,635,200,20]),'String','RESULTS')\nf4 = plt.figure(4)",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "nddf",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "nddf = np.array([num2cell(ndf),NFDF])\nnin = np.array([np.transpose(nt),np.transpose(nd),np.transpose(ndf)])\npvvv = np.array([svv,num2cell(pvv)])\ninvv = np.array([sinv,num2cell(inv)])\ncnames3 = np.array(['Number of Solar Painel','Number of Inverters','Number of Solar Painel by inverter','Max. Number of String by Inverter at MPPT1','Max. Number of String by Inverter at MPPT2','Number of Power Transformer'])\nrnames3 = np.array(['For tilted design','For direct design','For diffuse design'])\nt3 = uitable(f3,'Data',nin,'ColumnName',rnames3,'RowName',cnames3,'Position',np.array([20,400,1200,150]),'ColumnWidth',np.array([80]))\ntxt_title3 = uicontrol('Style','text','Position',np.array([600,635,200,20]),'String','RESULTS')\nf4 = plt.figure(4)\nformat('bank')",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "nin",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "nin = np.array([np.transpose(nt),np.transpose(nd),np.transpose(ndf)])\npvvv = np.array([svv,num2cell(pvv)])\ninvv = np.array([sinv,num2cell(inv)])\ncnames3 = np.array(['Number of Solar Painel','Number of Inverters','Number of Solar Painel by inverter','Max. Number of String by Inverter at MPPT1','Max. Number of String by Inverter at MPPT2','Number of Power Transformer'])\nrnames3 = np.array(['For tilted design','For direct design','For diffuse design'])\nt3 = uitable(f3,'Data',nin,'ColumnName',rnames3,'RowName',cnames3,'Position',np.array([20,400,1200,150]),'ColumnWidth',np.array([80]))\ntxt_title3 = uicontrol('Style','text','Position',np.array([600,635,200,20]),'String','RESULTS')\nf4 = plt.figure(4)\nformat('bank')\ncnames4 = np.array(['Type','ocv','scc','vmax','imax','pmax','Vmax','ocvt','otvmp','tcisc','weig','deph','widt','leng','ibest','area','ef','ncell','tol+','dur','tcell','tier'])",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "pvvv",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "pvvv = np.array([svv,num2cell(pvv)])\ninvv = np.array([sinv,num2cell(inv)])\ncnames3 = np.array(['Number of Solar Painel','Number of Inverters','Number of Solar Painel by inverter','Max. Number of String by Inverter at MPPT1','Max. Number of String by Inverter at MPPT2','Number of Power Transformer'])\nrnames3 = np.array(['For tilted design','For direct design','For diffuse design'])\nt3 = uitable(f3,'Data',nin,'ColumnName',rnames3,'RowName',cnames3,'Position',np.array([20,400,1200,150]),'ColumnWidth',np.array([80]))\ntxt_title3 = uicontrol('Style','text','Position',np.array([600,635,200,20]),'String','RESULTS')\nf4 = plt.figure(4)\nformat('bank')\ncnames4 = np.array(['Type','ocv','scc','vmax','imax','pmax','Vmax','ocvt','otvmp','tcisc','weig','deph','widt','leng','ibest','area','ef','ncell','tol+','dur','tcell','tier'])\nrnames4 = np.array(['For tilted instalation','For direct instalation','For diffuse instalation'])",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "invv",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "invv = np.array([sinv,num2cell(inv)])\ncnames3 = np.array(['Number of Solar Painel','Number of Inverters','Number of Solar Painel by inverter','Max. Number of String by Inverter at MPPT1','Max. Number of String by Inverter at MPPT2','Number of Power Transformer'])\nrnames3 = np.array(['For tilted design','For direct design','For diffuse design'])\nt3 = uitable(f3,'Data',nin,'ColumnName',rnames3,'RowName',cnames3,'Position',np.array([20,400,1200,150]),'ColumnWidth',np.array([80]))\ntxt_title3 = uicontrol('Style','text','Position',np.array([600,635,200,20]),'String','RESULTS')\nf4 = plt.figure(4)\nformat('bank')\ncnames4 = np.array(['Type','ocv','scc','vmax','imax','pmax','Vmax','ocvt','otvmp','tcisc','weig','deph','widt','leng','ibest','area','ef','ncell','tol+','dur','tcell','tier'])\nrnames4 = np.array(['For tilted instalation','For direct instalation','For diffuse instalation'])\nt4 = uitable(f4,'Data',pvvv,'ColumnName',cnames4,'RowName',rnames4,'Position',np.array([20,400,1200,150]),'ColumnWidth',np.array([40]))",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "cnames3",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "cnames3 = np.array(['Number of Solar Painel','Number of Inverters','Number of Solar Painel by inverter','Max. Number of String by Inverter at MPPT1','Max. Number of String by Inverter at MPPT2','Number of Power Transformer'])\nrnames3 = np.array(['For tilted design','For direct design','For diffuse design'])\nt3 = uitable(f3,'Data',nin,'ColumnName',rnames3,'RowName',cnames3,'Position',np.array([20,400,1200,150]),'ColumnWidth',np.array([80]))\ntxt_title3 = uicontrol('Style','text','Position',np.array([600,635,200,20]),'String','RESULTS')\nf4 = plt.figure(4)\nformat('bank')\ncnames4 = np.array(['Type','ocv','scc','vmax','imax','pmax','Vmax','ocvt','otvmp','tcisc','weig','deph','widt','leng','ibest','area','ef','ncell','tol+','dur','tcell','tier'])\nrnames4 = np.array(['For tilted instalation','For direct instalation','For diffuse instalation'])\nt4 = uitable(f4,'Data',pvvv,'ColumnName',cnames4,'RowName',rnames4,'Position',np.array([20,400,1200,150]),'ColumnWidth',np.array([40]))\ntxt_title4 = uicontrol('Style','text','Position',np.array([600,430,200,20]),'String','SOLAR PAINEL PARAMETERS')",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "rnames3",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "rnames3 = np.array(['For tilted design','For direct design','For diffuse design'])\nt3 = uitable(f3,'Data',nin,'ColumnName',rnames3,'RowName',cnames3,'Position',np.array([20,400,1200,150]),'ColumnWidth',np.array([80]))\ntxt_title3 = uicontrol('Style','text','Position',np.array([600,635,200,20]),'String','RESULTS')\nf4 = plt.figure(4)\nformat('bank')\ncnames4 = np.array(['Type','ocv','scc','vmax','imax','pmax','Vmax','ocvt','otvmp','tcisc','weig','deph','widt','leng','ibest','area','ef','ncell','tol+','dur','tcell','tier'])\nrnames4 = np.array(['For tilted instalation','For direct instalation','For diffuse instalation'])\nt4 = uitable(f4,'Data',pvvv,'ColumnName',cnames4,'RowName',rnames4,'Position',np.array([20,400,1200,150]),'ColumnWidth',np.array([40]))\ntxt_title4 = uicontrol('Style','text','Position',np.array([600,430,200,20]),'String','SOLAR PAINEL PARAMETERS')\nf5 = plt.figure(5)",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "t3",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "t3 = uitable(f3,'Data',nin,'ColumnName',rnames3,'RowName',cnames3,'Position',np.array([20,400,1200,150]),'ColumnWidth',np.array([80]))\ntxt_title3 = uicontrol('Style','text','Position',np.array([600,635,200,20]),'String','RESULTS')\nf4 = plt.figure(4)\nformat('bank')\ncnames4 = np.array(['Type','ocv','scc','vmax','imax','pmax','Vmax','ocvt','otvmp','tcisc','weig','deph','widt','leng','ibest','area','ef','ncell','tol+','dur','tcell','tier'])\nrnames4 = np.array(['For tilted instalation','For direct instalation','For diffuse instalation'])\nt4 = uitable(f4,'Data',pvvv,'ColumnName',cnames4,'RowName',rnames4,'Position',np.array([20,400,1200,150]),'ColumnWidth',np.array([40]))\ntxt_title4 = uicontrol('Style','text','Position',np.array([600,430,200,20]),'String','SOLAR PAINEL PARAMETERS')\nf5 = plt.figure(5)\nformat('bank')",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "txt_title3",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "txt_title3 = uicontrol('Style','text','Position',np.array([600,635,200,20]),'String','RESULTS')\nf4 = plt.figure(4)\nformat('bank')\ncnames4 = np.array(['Type','ocv','scc','vmax','imax','pmax','Vmax','ocvt','otvmp','tcisc','weig','deph','widt','leng','ibest','area','ef','ncell','tol+','dur','tcell','tier'])\nrnames4 = np.array(['For tilted instalation','For direct instalation','For diffuse instalation'])\nt4 = uitable(f4,'Data',pvvv,'ColumnName',cnames4,'RowName',rnames4,'Position',np.array([20,400,1200,150]),'ColumnWidth',np.array([40]))\ntxt_title4 = uicontrol('Style','text','Position',np.array([600,430,200,20]),'String','SOLAR PAINEL PARAMETERS')\nf5 = plt.figure(5)\nformat('bank')\ncnames5 = np.array(['Type','minvr','maxvr','miv','nout','mout','mdcp','meff','mint','maxt','weig','heig','widt','leng','ibest','PN','maxc1','maxc2','vouti','mip1','mip2','aci','minv','mod','tier'])",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "f4",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "f4 = plt.figure(4)\nformat('bank')\ncnames4 = np.array(['Type','ocv','scc','vmax','imax','pmax','Vmax','ocvt','otvmp','tcisc','weig','deph','widt','leng','ibest','area','ef','ncell','tol+','dur','tcell','tier'])\nrnames4 = np.array(['For tilted instalation','For direct instalation','For diffuse instalation'])\nt4 = uitable(f4,'Data',pvvv,'ColumnName',cnames4,'RowName',rnames4,'Position',np.array([20,400,1200,150]),'ColumnWidth',np.array([40]))\ntxt_title4 = uicontrol('Style','text','Position',np.array([600,430,200,20]),'String','SOLAR PAINEL PARAMETERS')\nf5 = plt.figure(5)\nformat('bank')\ncnames5 = np.array(['Type','minvr','maxvr','miv','nout','mout','mdcp','meff','mint','maxt','weig','heig','widt','leng','ibest','PN','maxc1','maxc2','vouti','mip1','mip2','aci','minv','mod','tier'])\nrnames5 = np.array(['For tilted instalation','For direct instalation','For diffuse instalation'])",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "cnames4",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "cnames4 = np.array(['Type','ocv','scc','vmax','imax','pmax','Vmax','ocvt','otvmp','tcisc','weig','deph','widt','leng','ibest','area','ef','ncell','tol+','dur','tcell','tier'])\nrnames4 = np.array(['For tilted instalation','For direct instalation','For diffuse instalation'])\nt4 = uitable(f4,'Data',pvvv,'ColumnName',cnames4,'RowName',rnames4,'Position',np.array([20,400,1200,150]),'ColumnWidth',np.array([40]))\ntxt_title4 = uicontrol('Style','text','Position',np.array([600,430,200,20]),'String','SOLAR PAINEL PARAMETERS')\nf5 = plt.figure(5)\nformat('bank')\ncnames5 = np.array(['Type','minvr','maxvr','miv','nout','mout','mdcp','meff','mint','maxt','weig','heig','widt','leng','ibest','PN','maxc1','maxc2','vouti','mip1','mip2','aci','minv','mod','tier'])\nrnames5 = np.array(['For tilted instalation','For direct instalation','For diffuse instalation'])\nt5 = uitable(f5,'Data',invv,'ColumnName',cnames5,'RowName',rnames5,'Position',np.array([20,400,1200,150]),'ColumnWidth',np.array([40]))\ntxt_title5 = uicontrol('Style','text','Position',np.array([600,225,200,20]),'String','INVERTER PARAMETERS WITH MPPT')",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "rnames4",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "rnames4 = np.array(['For tilted instalation','For direct instalation','For diffuse instalation'])\nt4 = uitable(f4,'Data',pvvv,'ColumnName',cnames4,'RowName',rnames4,'Position',np.array([20,400,1200,150]),'ColumnWidth',np.array([40]))\ntxt_title4 = uicontrol('Style','text','Position',np.array([600,430,200,20]),'String','SOLAR PAINEL PARAMETERS')\nf5 = plt.figure(5)\nformat('bank')\ncnames5 = np.array(['Type','minvr','maxvr','miv','nout','mout','mdcp','meff','mint','maxt','weig','heig','widt','leng','ibest','PN','maxc1','maxc2','vouti','mip1','mip2','aci','minv','mod','tier'])\nrnames5 = np.array(['For tilted instalation','For direct instalation','For diffuse instalation'])\nt5 = uitable(f5,'Data',invv,'ColumnName',cnames5,'RowName',rnames5,'Position',np.array([20,400,1200,150]),'ColumnWidth',np.array([40]))\ntxt_title5 = uicontrol('Style','text','Position',np.array([600,225,200,20]),'String','INVERTER PARAMETERS WITH MPPT')\nif pro == 4:",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "t4",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "t4 = uitable(f4,'Data',pvvv,'ColumnName',cnames4,'RowName',rnames4,'Position',np.array([20,400,1200,150]),'ColumnWidth',np.array([40]))\ntxt_title4 = uicontrol('Style','text','Position',np.array([600,430,200,20]),'String','SOLAR PAINEL PARAMETERS')\nf5 = plt.figure(5)\nformat('bank')\ncnames5 = np.array(['Type','minvr','maxvr','miv','nout','mout','mdcp','meff','mint','maxt','weig','heig','widt','leng','ibest','PN','maxc1','maxc2','vouti','mip1','mip2','aci','minv','mod','tier'])\nrnames5 = np.array(['For tilted instalation','For direct instalation','For diffuse instalation'])\nt5 = uitable(f5,'Data',invv,'ColumnName',cnames5,'RowName',rnames5,'Position',np.array([20,400,1200,150]),'ColumnWidth',np.array([40]))\ntxt_title5 = uicontrol('Style','text','Position',np.array([600,225,200,20]),'String','INVERTER PARAMETERS WITH MPPT')\nif pro == 4:\n    Siit,Siid,Siidf,piit,piid,piidf = inv_string4(piit,piid,piidf,fro)",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "txt_title4",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "txt_title4 = uicontrol('Style','text','Position',np.array([600,430,200,20]),'String','SOLAR PAINEL PARAMETERS')\nf5 = plt.figure(5)\nformat('bank')\ncnames5 = np.array(['Type','minvr','maxvr','miv','nout','mout','mdcp','meff','mint','maxt','weig','heig','widt','leng','ibest','PN','maxc1','maxc2','vouti','mip1','mip2','aci','minv','mod','tier'])\nrnames5 = np.array(['For tilted instalation','For direct instalation','For diffuse instalation'])\nt5 = uitable(f5,'Data',invv,'ColumnName',cnames5,'RowName',rnames5,'Position',np.array([20,400,1200,150]),'ColumnWidth',np.array([40]))\ntxt_title5 = uicontrol('Style','text','Position',np.array([600,225,200,20]),'String','INVERTER PARAMETERS WITH MPPT')\nif pro == 4:\n    Siit,Siid,Siidf,piit,piid,piidf = inv_string4(piit,piid,piidf,fro)\n    # Figure 4 - Other possible inverters",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "f5",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "f5 = plt.figure(5)\nformat('bank')\ncnames5 = np.array(['Type','minvr','maxvr','miv','nout','mout','mdcp','meff','mint','maxt','weig','heig','widt','leng','ibest','PN','maxc1','maxc2','vouti','mip1','mip2','aci','minv','mod','tier'])\nrnames5 = np.array(['For tilted instalation','For direct instalation','For diffuse instalation'])\nt5 = uitable(f5,'Data',invv,'ColumnName',cnames5,'RowName',rnames5,'Position',np.array([20,400,1200,150]),'ColumnWidth',np.array([40]))\ntxt_title5 = uicontrol('Style','text','Position',np.array([600,225,200,20]),'String','INVERTER PARAMETERS WITH MPPT')\nif pro == 4:\n    Siit,Siid,Siidf,piit,piid,piidf = inv_string4(piit,piid,piidf,fro)\n    # Figure 4 - Other possible inverters\n    f6 = plt.figure(6)",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "cnames5",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "cnames5 = np.array(['Type','minvr','maxvr','miv','nout','mout','mdcp','meff','mint','maxt','weig','heig','widt','leng','ibest','PN','maxc1','maxc2','vouti','mip1','mip2','aci','minv','mod','tier'])\nrnames5 = np.array(['For tilted instalation','For direct instalation','For diffuse instalation'])\nt5 = uitable(f5,'Data',invv,'ColumnName',cnames5,'RowName',rnames5,'Position',np.array([20,400,1200,150]),'ColumnWidth',np.array([40]))\ntxt_title5 = uicontrol('Style','text','Position',np.array([600,225,200,20]),'String','INVERTER PARAMETERS WITH MPPT')\nif pro == 4:\n    Siit,Siid,Siidf,piit,piid,piidf = inv_string4(piit,piid,piidf,fro)\n    # Figure 4 - Other possible inverters\n    f6 = plt.figure(6)\n    format('bank')\n    inv_t = np.array([num2cell(np.transpose(Niit)),Siit,num2cell(piit(:,np.arange(2,24+1)))])",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "rnames5",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "rnames5 = np.array(['For tilted instalation','For direct instalation','For diffuse instalation'])\nt5 = uitable(f5,'Data',invv,'ColumnName',cnames5,'RowName',rnames5,'Position',np.array([20,400,1200,150]),'ColumnWidth',np.array([40]))\ntxt_title5 = uicontrol('Style','text','Position',np.array([600,225,200,20]),'String','INVERTER PARAMETERS WITH MPPT')\nif pro == 4:\n    Siit,Siid,Siidf,piit,piid,piidf = inv_string4(piit,piid,piidf,fro)\n    # Figure 4 - Other possible inverters\n    f6 = plt.figure(6)\n    format('bank')\n    inv_t = np.array([num2cell(np.transpose(Niit)),Siit,num2cell(piit(:,np.arange(2,24+1)))])\n    cnames6 = np.array(['No.Inverters','Type','minvr','maxvr','miv','nout','mout','mdcp','meff','mint','maxt','weig','heig','widt','leng','ibest','PN','maxc1','maxc2','vouti','mip1','mip2','aci','minv','mod'])",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "t5",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "t5 = uitable(f5,'Data',invv,'ColumnName',cnames5,'RowName',rnames5,'Position',np.array([20,400,1200,150]),'ColumnWidth',np.array([40]))\ntxt_title5 = uicontrol('Style','text','Position',np.array([600,225,200,20]),'String','INVERTER PARAMETERS WITH MPPT')\nif pro == 4:\n    Siit,Siid,Siidf,piit,piid,piidf = inv_string4(piit,piid,piidf,fro)\n    # Figure 4 - Other possible inverters\n    f6 = plt.figure(6)\n    format('bank')\n    inv_t = np.array([num2cell(np.transpose(Niit)),Siit,num2cell(piit(:,np.arange(2,24+1)))])\n    cnames6 = np.array(['No.Inverters','Type','minvr','maxvr','miv','nout','mout','mdcp','meff','mint','maxt','weig','heig','widt','leng','ibest','PN','maxc1','maxc2','vouti','mip1','mip2','aci','minv','mod'])\n    t6 = uitable(f6,'Data',inv_t,'ColumnName',cnames6,'Position',np.array([50,50,1290,550]),'ColumnWidth',np.array([50]))",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "txt_title5",
        "kind": 5,
        "importPath": "old.PV_performance",
        "description": "old.PV_performance",
        "peekOfCode": "txt_title5 = uicontrol('Style','text','Position',np.array([600,225,200,20]),'String','INVERTER PARAMETERS WITH MPPT')\nif pro == 4:\n    Siit,Siid,Siidf,piit,piid,piidf = inv_string4(piit,piid,piidf,fro)\n    # Figure 4 - Other possible inverters\n    f6 = plt.figure(6)\n    format('bank')\n    inv_t = np.array([num2cell(np.transpose(Niit)),Siit,num2cell(piit(:,np.arange(2,24+1)))])\n    cnames6 = np.array(['No.Inverters','Type','minvr','maxvr','miv','nout','mout','mdcp','meff','mint','maxt','weig','heig','widt','leng','ibest','PN','maxc1','maxc2','vouti','mip1','mip2','aci','minv','mod'])\n    t6 = uitable(f6,'Data',inv_t,'ColumnName',cnames6,'Position',np.array([50,50,1290,550]),'ColumnWidth',np.array([50]))\n    txt_title6 = uicontrol('Style','text','Position',np.array([400,610,600,15]),'String','POSSIBLES INVERTERS FOR THE PV CHOOSEN WITH TILTED INSTALLATION')",
        "detail": "old.PV_performance",
        "documentation": {}
    },
    {
        "label": "options.Resize",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "options.Resize = 'On'\noptions.WindowStyle = 'modal'\noptions.Interpreter = 'tex'\nprompt = np.array(['Enter the longitude:','Enter the latitude:','Enter the annual average of wind speed for day times in (m/s)','Enter the annual average temperature for day times in (�C)','Enter the annual maximum temperature for day times in (�C)','Enter the annual minimum temperature for day times in (�C)','Enter the altitud in (m)','Enter the annual minimum humidity in (%)','Enter the area without shadding for the PV installation (m�)','Enter the number of phases avaliable in the nearest system. Type [1], [2] or [3]','Enter the distribution/transmission system voltage phase-pneutro.','Enter the frequency of the grid in (Hz)','Enter [2]-ON-grid optimum design or [4]-ON-grid optimum design choosing the PV model','Enter the load demand [1]-per month; [2]-annual average; [3]-Light criteria','Enter the shadding factor [0 to 1]','Enter the PV inclination angle (roof angle) [in graus] or [Nan] for optimal angle design','Enter the PV azimuth angle [in graus], North is 0 graus or [Nan] for optimal angle design'])\ndlg_title = 'Location and System Information'\nnum_lines = np.array([1,100])\ndefaultans = np.array(['-43.22','-22.91','3.98','23.15','41','14','20','99','100','3','127','60','2','2','1','Nan','Nan'])\nDadosForm = inputdlg(prompt,dlg_title,num_lines,defaultans)\nlon = str2double(DadosForm(1))\nlat = str2double(DadosForm(2))",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "options.WindowStyle",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "options.WindowStyle = 'modal'\noptions.Interpreter = 'tex'\nprompt = np.array(['Enter the longitude:','Enter the latitude:','Enter the annual average of wind speed for day times in (m/s)','Enter the annual average temperature for day times in (�C)','Enter the annual maximum temperature for day times in (�C)','Enter the annual minimum temperature for day times in (�C)','Enter the altitud in (m)','Enter the annual minimum humidity in (%)','Enter the area without shadding for the PV installation (m�)','Enter the number of phases avaliable in the nearest system. Type [1], [2] or [3]','Enter the distribution/transmission system voltage phase-pneutro.','Enter the frequency of the grid in (Hz)','Enter [2]-ON-grid optimum design or [4]-ON-grid optimum design choosing the PV model','Enter the load demand [1]-per month; [2]-annual average; [3]-Light criteria','Enter the shadding factor [0 to 1]','Enter the PV inclination angle (roof angle) [in graus] or [Nan] for optimal angle design','Enter the PV azimuth angle [in graus], North is 0 graus or [Nan] for optimal angle design'])\ndlg_title = 'Location and System Information'\nnum_lines = np.array([1,100])\ndefaultans = np.array(['-43.22','-22.91','3.98','23.15','41','14','20','99','100','3','127','60','2','2','1','Nan','Nan'])\nDadosForm = inputdlg(prompt,dlg_title,num_lines,defaultans)\nlon = str2double(DadosForm(1))\nlat = str2double(DadosForm(2))\nwind_speed = str2double(DadosForm(3))",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "options.Interpreter",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "options.Interpreter = 'tex'\nprompt = np.array(['Enter the longitude:','Enter the latitude:','Enter the annual average of wind speed for day times in (m/s)','Enter the annual average temperature for day times in (�C)','Enter the annual maximum temperature for day times in (�C)','Enter the annual minimum temperature for day times in (�C)','Enter the altitud in (m)','Enter the annual minimum humidity in (%)','Enter the area without shadding for the PV installation (m�)','Enter the number of phases avaliable in the nearest system. Type [1], [2] or [3]','Enter the distribution/transmission system voltage phase-pneutro.','Enter the frequency of the grid in (Hz)','Enter [2]-ON-grid optimum design or [4]-ON-grid optimum design choosing the PV model','Enter the load demand [1]-per month; [2]-annual average; [3]-Light criteria','Enter the shadding factor [0 to 1]','Enter the PV inclination angle (roof angle) [in graus] or [Nan] for optimal angle design','Enter the PV azimuth angle [in graus], North is 0 graus or [Nan] for optimal angle design'])\ndlg_title = 'Location and System Information'\nnum_lines = np.array([1,100])\ndefaultans = np.array(['-43.22','-22.91','3.98','23.15','41','14','20','99','100','3','127','60','2','2','1','Nan','Nan'])\nDadosForm = inputdlg(prompt,dlg_title,num_lines,defaultans)\nlon = str2double(DadosForm(1))\nlat = str2double(DadosForm(2))\nwind_speed = str2double(DadosForm(3))\nx_atemp = str2double(DadosForm(4))",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "prompt",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "prompt = np.array(['Enter the longitude:','Enter the latitude:','Enter the annual average of wind speed for day times in (m/s)','Enter the annual average temperature for day times in (�C)','Enter the annual maximum temperature for day times in (�C)','Enter the annual minimum temperature for day times in (�C)','Enter the altitud in (m)','Enter the annual minimum humidity in (%)','Enter the area without shadding for the PV installation (m�)','Enter the number of phases avaliable in the nearest system. Type [1], [2] or [3]','Enter the distribution/transmission system voltage phase-pneutro.','Enter the frequency of the grid in (Hz)','Enter [2]-ON-grid optimum design or [4]-ON-grid optimum design choosing the PV model','Enter the load demand [1]-per month; [2]-annual average; [3]-Light criteria','Enter the shadding factor [0 to 1]','Enter the PV inclination angle (roof angle) [in graus] or [Nan] for optimal angle design','Enter the PV azimuth angle [in graus], North is 0 graus or [Nan] for optimal angle design'])\ndlg_title = 'Location and System Information'\nnum_lines = np.array([1,100])\ndefaultans = np.array(['-43.22','-22.91','3.98','23.15','41','14','20','99','100','3','127','60','2','2','1','Nan','Nan'])\nDadosForm = inputdlg(prompt,dlg_title,num_lines,defaultans)\nlon = str2double(DadosForm(1))\nlat = str2double(DadosForm(2))\nwind_speed = str2double(DadosForm(3))\nx_atemp = str2double(DadosForm(4))\nmax_atemp = str2double(DadosForm(5))",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "dlg_title",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "dlg_title = 'Location and System Information'\nnum_lines = np.array([1,100])\ndefaultans = np.array(['-43.22','-22.91','3.98','23.15','41','14','20','99','100','3','127','60','2','2','1','Nan','Nan'])\nDadosForm = inputdlg(prompt,dlg_title,num_lines,defaultans)\nlon = str2double(DadosForm(1))\nlat = str2double(DadosForm(2))\nwind_speed = str2double(DadosForm(3))\nx_atemp = str2double(DadosForm(4))\nmax_atemp = str2double(DadosForm(5))\nmin_atemp = str2double(DadosForm(6))",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "num_lines",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "num_lines = np.array([1,100])\ndefaultans = np.array(['-43.22','-22.91','3.98','23.15','41','14','20','99','100','3','127','60','2','2','1','Nan','Nan'])\nDadosForm = inputdlg(prompt,dlg_title,num_lines,defaultans)\nlon = str2double(DadosForm(1))\nlat = str2double(DadosForm(2))\nwind_speed = str2double(DadosForm(3))\nx_atemp = str2double(DadosForm(4))\nmax_atemp = str2double(DadosForm(5))\nmin_atemp = str2double(DadosForm(6))\nalt = str2double(DadosForm(7))",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "defaultans",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "defaultans = np.array(['-43.22','-22.91','3.98','23.15','41','14','20','99','100','3','127','60','2','2','1','Nan','Nan'])\nDadosForm = inputdlg(prompt,dlg_title,num_lines,defaultans)\nlon = str2double(DadosForm(1))\nlat = str2double(DadosForm(2))\nwind_speed = str2double(DadosForm(3))\nx_atemp = str2double(DadosForm(4))\nmax_atemp = str2double(DadosForm(5))\nmin_atemp = str2double(DadosForm(6))\nalt = str2double(DadosForm(7))\nhum = str2double(DadosForm(8))",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "DadosForm",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "DadosForm = inputdlg(prompt,dlg_title,num_lines,defaultans)\nlon = str2double(DadosForm(1))\nlat = str2double(DadosForm(2))\nwind_speed = str2double(DadosForm(3))\nx_atemp = str2double(DadosForm(4))\nmax_atemp = str2double(DadosForm(5))\nmin_atemp = str2double(DadosForm(6))\nalt = str2double(DadosForm(7))\nhum = str2double(DadosForm(8))\narea = str2double(DadosForm(9))",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "lon",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "lon = str2double(DadosForm(1))\nlat = str2double(DadosForm(2))\nwind_speed = str2double(DadosForm(3))\nx_atemp = str2double(DadosForm(4))\nmax_atemp = str2double(DadosForm(5))\nmin_atemp = str2double(DadosForm(6))\nalt = str2double(DadosForm(7))\nhum = str2double(DadosForm(8))\narea = str2double(DadosForm(9))\nnf = str2double(DadosForm(10))",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "lat",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "lat = str2double(DadosForm(2))\nwind_speed = str2double(DadosForm(3))\nx_atemp = str2double(DadosForm(4))\nmax_atemp = str2double(DadosForm(5))\nmin_atemp = str2double(DadosForm(6))\nalt = str2double(DadosForm(7))\nhum = str2double(DadosForm(8))\narea = str2double(DadosForm(9))\nnf = str2double(DadosForm(10))\nvfn = str2double(DadosForm(11))",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "wind_speed",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "wind_speed = str2double(DadosForm(3))\nx_atemp = str2double(DadosForm(4))\nmax_atemp = str2double(DadosForm(5))\nmin_atemp = str2double(DadosForm(6))\nalt = str2double(DadosForm(7))\nhum = str2double(DadosForm(8))\narea = str2double(DadosForm(9))\nnf = str2double(DadosForm(10))\nvfn = str2double(DadosForm(11))\nfreq = str2double(DadosForm(12))",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "x_atemp",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "x_atemp = str2double(DadosForm(4))\nmax_atemp = str2double(DadosForm(5))\nmin_atemp = str2double(DadosForm(6))\nalt = str2double(DadosForm(7))\nhum = str2double(DadosForm(8))\narea = str2double(DadosForm(9))\nnf = str2double(DadosForm(10))\nvfn = str2double(DadosForm(11))\nfreq = str2double(DadosForm(12))\npro = str2double(DadosForm(13))",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "max_atemp",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "max_atemp = str2double(DadosForm(5))\nmin_atemp = str2double(DadosForm(6))\nalt = str2double(DadosForm(7))\nhum = str2double(DadosForm(8))\narea = str2double(DadosForm(9))\nnf = str2double(DadosForm(10))\nvfn = str2double(DadosForm(11))\nfreq = str2double(DadosForm(12))\npro = str2double(DadosForm(13))\n#[proj] = str2double(DadosForm(14));",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "min_atemp",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "min_atemp = str2double(DadosForm(6))\nalt = str2double(DadosForm(7))\nhum = str2double(DadosForm(8))\narea = str2double(DadosForm(9))\nnf = str2double(DadosForm(10))\nvfn = str2double(DadosForm(11))\nfreq = str2double(DadosForm(12))\npro = str2double(DadosForm(13))\n#[proj] = str2double(DadosForm(14));\n#[criteria] = str2double(DadosForm(15));",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "alt",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "alt = str2double(DadosForm(7))\nhum = str2double(DadosForm(8))\narea = str2double(DadosForm(9))\nnf = str2double(DadosForm(10))\nvfn = str2double(DadosForm(11))\nfreq = str2double(DadosForm(12))\npro = str2double(DadosForm(13))\n#[proj] = str2double(DadosForm(14));\n#[criteria] = str2double(DadosForm(15));\nsel = str2double(DadosForm(14))",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "hum",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "hum = str2double(DadosForm(8))\narea = str2double(DadosForm(9))\nnf = str2double(DadosForm(10))\nvfn = str2double(DadosForm(11))\nfreq = str2double(DadosForm(12))\npro = str2double(DadosForm(13))\n#[proj] = str2double(DadosForm(14));\n#[criteria] = str2double(DadosForm(15));\nsel = str2double(DadosForm(14))\nFS = str2double(DadosForm(15))",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "area",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "area = str2double(DadosForm(9))\nnf = str2double(DadosForm(10))\nvfn = str2double(DadosForm(11))\nfreq = str2double(DadosForm(12))\npro = str2double(DadosForm(13))\n#[proj] = str2double(DadosForm(14));\n#[criteria] = str2double(DadosForm(15));\nsel = str2double(DadosForm(14))\nFS = str2double(DadosForm(15))\nstil = str2double(DadosForm(16))",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "nf",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "nf = str2double(DadosForm(10))\nvfn = str2double(DadosForm(11))\nfreq = str2double(DadosForm(12))\npro = str2double(DadosForm(13))\n#[proj] = str2double(DadosForm(14));\n#[criteria] = str2double(DadosForm(15));\nsel = str2double(DadosForm(14))\nFS = str2double(DadosForm(15))\nstil = str2double(DadosForm(16))\nsazi = str2double(DadosForm(17))",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "vfn",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "vfn = str2double(DadosForm(11))\nfreq = str2double(DadosForm(12))\npro = str2double(DadosForm(13))\n#[proj] = str2double(DadosForm(14));\n#[criteria] = str2double(DadosForm(15));\nsel = str2double(DadosForm(14))\nFS = str2double(DadosForm(15))\nstil = str2double(DadosForm(16))\nsazi = str2double(DadosForm(17))\nproj = 4",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "freq",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "freq = str2double(DadosForm(12))\npro = str2double(DadosForm(13))\n#[proj] = str2double(DadosForm(14));\n#[criteria] = str2double(DadosForm(15));\nsel = str2double(DadosForm(14))\nFS = str2double(DadosForm(15))\nstil = str2double(DadosForm(16))\nsazi = str2double(DadosForm(17))\nproj = 4\n# [x_temp]=temp_data(x_temp);",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "pro",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "pro = str2double(DadosForm(13))\n#[proj] = str2double(DadosForm(14));\n#[criteria] = str2double(DadosForm(15));\nsel = str2double(DadosForm(14))\nFS = str2double(DadosForm(15))\nstil = str2double(DadosForm(16))\nsazi = str2double(DadosForm(17))\nproj = 4\n# [x_temp]=temp_data(x_temp);\n# [wind_speed]=wind_data(wind_speed);",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "#[proj]",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "#[proj] = str2double(DadosForm(14));\n#[criteria] = str2double(DadosForm(15));\nsel = str2double(DadosForm(14))\nFS = str2double(DadosForm(15))\nstil = str2double(DadosForm(16))\nsazi = str2double(DadosForm(17))\nproj = 4\n# [x_temp]=temp_data(x_temp);\n# [wind_speed]=wind_data(wind_speed);\n# Data_sheet",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "#[criteria]",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "#[criteria] = str2double(DadosForm(15));\nsel = str2double(DadosForm(14))\nFS = str2double(DadosForm(15))\nstil = str2double(DadosForm(16))\nsazi = str2double(DadosForm(17))\nproj = 4\n# [x_temp]=temp_data(x_temp);\n# [wind_speed]=wind_data(wind_speed);\n# Data_sheet\nfroS,froN = inverter_parameters(pro)",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "sel",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "sel = str2double(DadosForm(14))\nFS = str2double(DadosForm(15))\nstil = str2double(DadosForm(16))\nsazi = str2double(DadosForm(17))\nproj = 4\n# [x_temp]=temp_data(x_temp);\n# [wind_speed]=wind_data(wind_speed);\n# Data_sheet\nfroS,froN = inverter_parameters(pro)\n#[bat]=battery_parameters(pro);",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "FS",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "FS = str2double(DadosForm(15))\nstil = str2double(DadosForm(16))\nsazi = str2double(DadosForm(17))\nproj = 4\n# [x_temp]=temp_data(x_temp);\n# [wind_speed]=wind_data(wind_speed);\n# Data_sheet\nfroS,froN = inverter_parameters(pro)\n#[bat]=battery_parameters(pro);\nsunS,sunN,brandpv = pv_parameters(pro)",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "stil",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "stil = str2double(DadosForm(16))\nsazi = str2double(DadosForm(17))\nproj = 4\n# [x_temp]=temp_data(x_temp);\n# [wind_speed]=wind_data(wind_speed);\n# Data_sheet\nfroS,froN = inverter_parameters(pro)\n#[bat]=battery_parameters(pro);\nsunS,sunN,brandpv = pv_parameters(pro)\n#[lcc]=lc_parameters(pro);",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "sazi",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "sazi = str2double(DadosForm(17))\nproj = 4\n# [x_temp]=temp_data(x_temp);\n# [wind_speed]=wind_data(wind_speed);\n# Data_sheet\nfroS,froN = inverter_parameters(pro)\n#[bat]=battery_parameters(pro);\nsunS,sunN,brandpv = pv_parameters(pro)\n#[lcc]=lc_parameters(pro);\nFc = 0.8",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "proj",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "proj = 4\n# [x_temp]=temp_data(x_temp);\n# [wind_speed]=wind_data(wind_speed);\n# Data_sheet\nfroS,froN = inverter_parameters(pro)\n#[bat]=battery_parameters(pro);\nsunS,sunN,brandpv = pv_parameters(pro)\n#[lcc]=lc_parameters(pro);\nFc = 0.8\n# For choosing PV model",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "froS,froN",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "froS,froN = inverter_parameters(pro)\n#[bat]=battery_parameters(pro);\nsunS,sunN,brandpv = pv_parameters(pro)\n#[lcc]=lc_parameters(pro);\nFc = 0.8\n# For choosing PV model\n#pv_mo=1;\nif pro == 4:\n    pv_mo = brapv(sunS,brandpv)\n# 2 - ELECTRICITY CONSUPTION",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "sunS,sunN,brandpv",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "sunS,sunN,brandpv = pv_parameters(pro)\n#[lcc]=lc_parameters(pro);\nFc = 0.8\n# For choosing PV model\n#pv_mo=1;\nif pro == 4:\n    pv_mo = brapv(sunS,brandpv)\n# 2 - ELECTRICITY CONSUPTION\ndemand = consumption(sel,area)\n# Result from the latitude and longitude",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "Fc",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "Fc = 0.8\n# For choosing PV model\n#pv_mo=1;\nif pro == 4:\n    pv_mo = brapv(sunS,brandpv)\n# 2 - ELECTRICITY CONSUPTION\ndemand = consumption(sel,area)\n# Result from the latitude and longitude\nsol,y,incl,ori = irradiation(lat,lon,alt,x_atemp,FS,proj,stil,sazi)\nh = month_hour(y)",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "demand",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "demand = consumption(sel,area)\n# Result from the latitude and longitude\nsol,y,incl,ori = irradiation(lat,lon,alt,x_atemp,FS,proj,stil,sazi)\nh = month_hour(y)\nTm,T,sunrise_min,sunset_min = sol_por_dia(lon,lat)\n#E=mean((y.*1000)./Tm);\nE = 1000\nx_temp,max_temp,min_temp,nef = module_temperature(wind_speed,x_atemp,sunN,E,max_atemp,min_atemp)\ndist,dmax = distancia_de_sombreamento(lat,sunN,sunrise_min)\nextra = np.array([x_temp,max_temp,min_temp,dist,dmax])",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "sol,y,incl,ori",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "sol,y,incl,ori = irradiation(lat,lon,alt,x_atemp,FS,proj,stil,sazi)\nh = month_hour(y)\nTm,T,sunrise_min,sunset_min = sol_por_dia(lon,lat)\n#E=mean((y.*1000)./Tm);\nE = 1000\nx_temp,max_temp,min_temp,nef = module_temperature(wind_speed,x_atemp,sunN,E,max_atemp,min_atemp)\ndist,dmax = distancia_de_sombreamento(lat,sunN,sunrise_min)\nextra = np.array([x_temp,max_temp,min_temp,dist,dmax])\nsunN1 = np.array([sunN,x_temp,max_temp,min_temp,dist,dmax])\n# Compute the demand of the system",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "h = month_hour(y)\nTm,T,sunrise_min,sunset_min = sol_por_dia(lon,lat)\n#E=mean((y.*1000)./Tm);\nE = 1000\nx_temp,max_temp,min_temp,nef = module_temperature(wind_speed,x_atemp,sunN,E,max_atemp,min_atemp)\ndist,dmax = distancia_de_sombreamento(lat,sunN,sunrise_min)\nextra = np.array([x_temp,max_temp,min_temp,dist,dmax])\nsunN1 = np.array([sunN,x_temp,max_temp,min_temp,dist,dmax])\n# Compute the demand of the system\nP_tilt,M_tilt = power24(demand,h,froN,Fc)",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "Tm,T,sunrise_min,sunset_min",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "Tm,T,sunrise_min,sunset_min = sol_por_dia(lon,lat)\n#E=mean((y.*1000)./Tm);\nE = 1000\nx_temp,max_temp,min_temp,nef = module_temperature(wind_speed,x_atemp,sunN,E,max_atemp,min_atemp)\ndist,dmax = distancia_de_sombreamento(lat,sunN,sunrise_min)\nextra = np.array([x_temp,max_temp,min_temp,dist,dmax])\nsunN1 = np.array([sunN,x_temp,max_temp,min_temp,dist,dmax])\n# Compute the demand of the system\nP_tilt,M_tilt = power24(demand,h,froN,Fc)\nif pro == 2:",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "E",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "E = 1000\nx_temp,max_temp,min_temp,nef = module_temperature(wind_speed,x_atemp,sunN,E,max_atemp,min_atemp)\ndist,dmax = distancia_de_sombreamento(lat,sunN,sunrise_min)\nextra = np.array([x_temp,max_temp,min_temp,dist,dmax])\nsunN1 = np.array([sunN,x_temp,max_temp,min_temp,dist,dmax])\n# Compute the demand of the system\nP_tilt,M_tilt = power24(demand,h,froN,Fc)\nif pro == 2:\n    # 4 - PV DESIGN\n    Ntt,pt,p = pv2(area,M_tilt,sunN1,froN)",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "x_temp,max_temp,min_temp,nef",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "x_temp,max_temp,min_temp,nef = module_temperature(wind_speed,x_atemp,sunN,E,max_atemp,min_atemp)\ndist,dmax = distancia_de_sombreamento(lat,sunN,sunrise_min)\nextra = np.array([x_temp,max_temp,min_temp,dist,dmax])\nsunN1 = np.array([sunN,x_temp,max_temp,min_temp,dist,dmax])\n# Compute the demand of the system\nP_tilt,M_tilt = power24(demand,h,froN,Fc)\nif pro == 2:\n    # 4 - PV DESIGN\n    Ntt,pt,p = pv2(area,M_tilt,sunN1,froN)\n    # # 7 - INVERTER AND MPPT DESIGN",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "dist,dmax",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "dist,dmax = distancia_de_sombreamento(lat,sunN,sunrise_min)\nextra = np.array([x_temp,max_temp,min_temp,dist,dmax])\nsunN1 = np.array([sunN,x_temp,max_temp,min_temp,dist,dmax])\n# Compute the demand of the system\nP_tilt,M_tilt = power24(demand,h,froN,Fc)\nif pro == 2:\n    # 4 - PV DESIGN\n    Ntt,pt,p = pv2(area,M_tilt,sunN1,froN)\n    # # 7 - INVERTER AND MPPT DESIGN\n    Nit,Cit,pit,Nt,Ct,ptt,Npit,Nft,Npt1,tt,NS = inverter2t(M_tilt,min_atemp,max_atemp,p,pt,Ntt,vfn,nf,alt,hum,freq)",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "extra",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "extra = np.array([x_temp,max_temp,min_temp,dist,dmax])\nsunN1 = np.array([sunN,x_temp,max_temp,min_temp,dist,dmax])\n# Compute the demand of the system\nP_tilt,M_tilt = power24(demand,h,froN,Fc)\nif pro == 2:\n    # 4 - PV DESIGN\n    Ntt,pt,p = pv2(area,M_tilt,sunN1,froN)\n    # # 7 - INVERTER AND MPPT DESIGN\n    Nit,Cit,pit,Nt,Ct,ptt,Npit,Nft,Npt1,tt,NS = inverter2t(M_tilt,min_atemp,max_atemp,p,pt,Ntt,vfn,nf,alt,hum,freq)\n    # # OPTIMIZATION AND SELECTION CRITERIA",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "sunN1",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "sunN1 = np.array([sunN,x_temp,max_temp,min_temp,dist,dmax])\n# Compute the demand of the system\nP_tilt,M_tilt = power24(demand,h,froN,Fc)\nif pro == 2:\n    # 4 - PV DESIGN\n    Ntt,pt,p = pv2(area,M_tilt,sunN1,froN)\n    # # 7 - INVERTER AND MPPT DESIGN\n    Nit,Cit,pit,Nt,Ct,ptt,Npit,Nft,Npt1,tt,NS = inverter2t(M_tilt,min_atemp,max_atemp,p,pt,Ntt,vfn,nf,alt,hum,freq)\n    # # OPTIMIZATION AND SELECTION CRITERIA\n#if criteria==4",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "P_tilt,M_tilt",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "P_tilt,M_tilt = power24(demand,h,froN,Fc)\nif pro == 2:\n    # 4 - PV DESIGN\n    Ntt,pt,p = pv2(area,M_tilt,sunN1,froN)\n    # # 7 - INVERTER AND MPPT DESIGN\n    Nit,Cit,pit,Nt,Ct,ptt,Npit,Nft,Npt1,tt,NS = inverter2t(M_tilt,min_atemp,max_atemp,p,pt,Ntt,vfn,nf,alt,hum,freq)\n    # # OPTIMIZATION AND SELECTION CRITERIA\n#if criteria==4\n    Nto,Nito,pto,pito,Npito,Nfto,Npt1o,tto,NFTo,NSto,pato,disto,dmaxo = optm2ttopsis(ptt,Nt,Ct,pit,Nit,Cit,froN,sunN1,Npit,Nft,Npt1,tt,NS)\n    #end",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "P_tilt",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "P_tilt = cor_P(pit,P_tilt)\n# 8 - CABLES DESIGN\nprint('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')\n# Figure 1 - Day Insollation\nf1 = plt.figure(1)\nformat('bank')\nd_t = sum(y / 12)\nTm_t = sum(Tm / 12)\nh_t = np.array([[y,d_t],[Tm,Tm_t]])\nyy = np.array([h_t])",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "f1",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "f1 = plt.figure(1)\nformat('bank')\nd_t = sum(y / 12)\nTm_t = sum(Tm / 12)\nh_t = np.array([[y,d_t],[Tm,Tm_t]])\nyy = np.array([h_t])\nrnames1 = np.array(['Hours of sun with 1000W/m� Irr [h]','Hours of sun'])\ncnames1 = np.array(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','Annual'])\nt1 = uitable(f1,'Data',yy,'ColumnName',cnames1,'RowName',rnames1,'units','normalized','ColumnWidth',np.array([69]))\n#'Position',[400 93 121 243],...",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "d_t",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "d_t = sum(y / 12)\nTm_t = sum(Tm / 12)\nh_t = np.array([[y,d_t],[Tm,Tm_t]])\nyy = np.array([h_t])\nrnames1 = np.array(['Hours of sun with 1000W/m� Irr [h]','Hours of sun'])\ncnames1 = np.array(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','Annual'])\nt1 = uitable(f1,'Data',yy,'ColumnName',cnames1,'RowName',rnames1,'units','normalized','ColumnWidth',np.array([69]))\n#'Position',[400 93 121 243],...\nsubplot(2,1,1,'position')\nx = np.array([np.arange(1,12+1,1)])",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "Tm_t",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "Tm_t = sum(Tm / 12)\nh_t = np.array([[y,d_t],[Tm,Tm_t]])\nyy = np.array([h_t])\nrnames1 = np.array(['Hours of sun with 1000W/m� Irr [h]','Hours of sun'])\ncnames1 = np.array(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','Annual'])\nt1 = uitable(f1,'Data',yy,'ColumnName',cnames1,'RowName',rnames1,'units','normalized','ColumnWidth',np.array([69]))\n#'Position',[400 93 121 243],...\nsubplot(2,1,1,'position')\nx = np.array([np.arange(1,12+1,1)])\nplt.plot(x,y,'--or')",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "h_t",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "h_t = np.array([[y,d_t],[Tm,Tm_t]])\nyy = np.array([h_t])\nrnames1 = np.array(['Hours of sun with 1000W/m� Irr [h]','Hours of sun'])\ncnames1 = np.array(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','Annual'])\nt1 = uitable(f1,'Data',yy,'ColumnName',cnames1,'RowName',rnames1,'units','normalized','ColumnWidth',np.array([69]))\n#'Position',[400 93 121 243],...\nsubplot(2,1,1,'position')\nx = np.array([np.arange(1,12+1,1)])\nplt.plot(x,y,'--or')\nhold('on')",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "yy",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "yy = np.array([h_t])\nrnames1 = np.array(['Hours of sun with 1000W/m� Irr [h]','Hours of sun'])\ncnames1 = np.array(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','Annual'])\nt1 = uitable(f1,'Data',yy,'ColumnName',cnames1,'RowName',rnames1,'units','normalized','ColumnWidth',np.array([69]))\n#'Position',[400 93 121 243],...\nsubplot(2,1,1,'position')\nx = np.array([np.arange(1,12+1,1)])\nplt.plot(x,y,'--or')\nhold('on')\nplt.plot(x,Tm,'--xb')",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "rnames1",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "rnames1 = np.array(['Hours of sun with 1000W/m� Irr [h]','Hours of sun'])\ncnames1 = np.array(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','Annual'])\nt1 = uitable(f1,'Data',yy,'ColumnName',cnames1,'RowName',rnames1,'units','normalized','ColumnWidth',np.array([69]))\n#'Position',[400 93 121 243],...\nsubplot(2,1,1,'position')\nx = np.array([np.arange(1,12+1,1)])\nplt.plot(x,y,'--or')\nhold('on')\nplt.plot(x,Tm,'--xb')\ngrid",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "cnames1",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "cnames1 = np.array(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','Annual'])\nt1 = uitable(f1,'Data',yy,'ColumnName',cnames1,'RowName',rnames1,'units','normalized','ColumnWidth',np.array([69]))\n#'Position',[400 93 121 243],...\nsubplot(2,1,1,'position')\nx = np.array([np.arange(1,12+1,1)])\nplt.plot(x,y,'--or')\nhold('on')\nplt.plot(x,Tm,'--xb')\ngrid\nplt.xlabel('Months')",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "t1",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "t1 = uitable(f1,'Data',yy,'ColumnName',cnames1,'RowName',rnames1,'units','normalized','ColumnWidth',np.array([69]))\n#'Position',[400 93 121 243],...\nsubplot(2,1,1,'position')\nx = np.array([np.arange(1,12+1,1)])\nplt.plot(x,y,'--or')\nhold('on')\nplt.plot(x,Tm,'--xb')\ngrid\nplt.xlabel('Months')\nplt.ylabel('Hours [h]')",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "x = np.array([np.arange(1,12+1,1)])\nplt.plot(x,y,'--or')\nhold('on')\nplt.plot(x,Tm,'--xb')\ngrid\nplt.xlabel('Months')\nplt.ylabel('Hours [h]')\nplt.title('AVERAGE HOURS OF SUN PER DAY')\nplt.legend('Hours of sun with 1000W/m� irradiation','Hours of sun')\nsubplot(2,1,2)",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "pos1",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "pos1 = get(subplot(2,1,2),'position')\nos.delete(subplot(2,1,2))\nset(t1,'position',pos1)\n# Figure 2 - Solar power\nf2 = plt.figure(2)\nPger_t = (np.multiply(np.multiply(pt(1,6) * Nt,h(1,:)),Fc)) / 1000\nPger_a = (np.multiply(np.multiply(pta(1,6) * Nta,h(1,:)),Fc)) / 1000\nPger_o = (np.multiply(np.multiply(pto(1,6) * Nto,h(1,:)),Fc)) / 1000\nPger_c = (np.multiply(np.multiply(ptc(1,6) * Ntc,h(1,:)),Fc)) / 1000\nMger_t = sum(Pger_t / 12)",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "f2",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "f2 = plt.figure(2)\nPger_t = (np.multiply(np.multiply(pt(1,6) * Nt,h(1,:)),Fc)) / 1000\nPger_a = (np.multiply(np.multiply(pta(1,6) * Nta,h(1,:)),Fc)) / 1000\nPger_o = (np.multiply(np.multiply(pto(1,6) * Nto,h(1,:)),Fc)) / 1000\nPger_c = (np.multiply(np.multiply(ptc(1,6) * Ntc,h(1,:)),Fc)) / 1000\nMger_t = sum(Pger_t / 12)\nMger_a = sum(Pger_a / 12)\nMger_o = sum(Pger_o / 12)\nMger_c = sum(Pger_c / 12)\nger_t = np.array([Pger_t,Mger_t])",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "Pger_t",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "Pger_t = (np.multiply(np.multiply(pt(1,6) * Nt,h(1,:)),Fc)) / 1000\nPger_a = (np.multiply(np.multiply(pta(1,6) * Nta,h(1,:)),Fc)) / 1000\nPger_o = (np.multiply(np.multiply(pto(1,6) * Nto,h(1,:)),Fc)) / 1000\nPger_c = (np.multiply(np.multiply(ptc(1,6) * Ntc,h(1,:)),Fc)) / 1000\nMger_t = sum(Pger_t / 12)\nMger_a = sum(Pger_a / 12)\nMger_o = sum(Pger_o / 12)\nMger_c = sum(Pger_c / 12)\nger_t = np.array([Pger_t,Mger_t])\nger_a = np.array([Pger_a,Mger_a])",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "Pger_a",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "Pger_a = (np.multiply(np.multiply(pta(1,6) * Nta,h(1,:)),Fc)) / 1000\nPger_o = (np.multiply(np.multiply(pto(1,6) * Nto,h(1,:)),Fc)) / 1000\nPger_c = (np.multiply(np.multiply(ptc(1,6) * Ntc,h(1,:)),Fc)) / 1000\nMger_t = sum(Pger_t / 12)\nMger_a = sum(Pger_a / 12)\nMger_o = sum(Pger_o / 12)\nMger_c = sum(Pger_c / 12)\nger_t = np.array([Pger_t,Mger_t])\nger_a = np.array([Pger_a,Mger_a])\nger_o = np.array([Pger_o,Mger_o])",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "Pger_o",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "Pger_o = (np.multiply(np.multiply(pto(1,6) * Nto,h(1,:)),Fc)) / 1000\nPger_c = (np.multiply(np.multiply(ptc(1,6) * Ntc,h(1,:)),Fc)) / 1000\nMger_t = sum(Pger_t / 12)\nMger_a = sum(Pger_a / 12)\nMger_o = sum(Pger_o / 12)\nMger_c = sum(Pger_c / 12)\nger_t = np.array([Pger_t,Mger_t])\nger_a = np.array([Pger_a,Mger_a])\nger_o = np.array([Pger_o,Mger_o])\nger_c = np.array([Pger_c,Mger_c])",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "Pger_c",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "Pger_c = (np.multiply(np.multiply(ptc(1,6) * Ntc,h(1,:)),Fc)) / 1000\nMger_t = sum(Pger_t / 12)\nMger_a = sum(Pger_a / 12)\nMger_o = sum(Pger_o / 12)\nMger_c = sum(Pger_c / 12)\nger_t = np.array([Pger_t,Mger_t])\nger_a = np.array([Pger_a,Mger_a])\nger_o = np.array([Pger_o,Mger_o])\nger_c = np.array([Pger_c,Mger_c])\ndtot = mean(demand(1,:)) / 1000",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "Mger_t",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "Mger_t = sum(Pger_t / 12)\nMger_a = sum(Pger_a / 12)\nMger_o = sum(Pger_o / 12)\nMger_c = sum(Pger_c / 12)\nger_t = np.array([Pger_t,Mger_t])\nger_a = np.array([Pger_a,Mger_a])\nger_o = np.array([Pger_o,Mger_o])\nger_c = np.array([Pger_c,Mger_c])\ndtot = mean(demand(1,:)) / 1000\ndemand_tot = np.array([demand / 1000,dtot])",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "Mger_a",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "Mger_a = sum(Pger_a / 12)\nMger_o = sum(Pger_o / 12)\nMger_c = sum(Pger_c / 12)\nger_t = np.array([Pger_t,Mger_t])\nger_a = np.array([Pger_a,Mger_a])\nger_o = np.array([Pger_o,Mger_o])\nger_c = np.array([Pger_c,Mger_c])\ndtot = mean(demand(1,:)) / 1000\ndemand_tot = np.array([demand / 1000,dtot])\n#P = [demand_tot; ger_t];",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "Mger_o",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "Mger_o = sum(Pger_o / 12)\nMger_c = sum(Pger_c / 12)\nger_t = np.array([Pger_t,Mger_t])\nger_a = np.array([Pger_a,Mger_a])\nger_o = np.array([Pger_o,Mger_o])\nger_c = np.array([Pger_c,Mger_c])\ndtot = mean(demand(1,:)) / 1000\ndemand_tot = np.array([demand / 1000,dtot])\n#P = [demand_tot; ger_t];\nP = np.array([[demand_tot],[ger_t],[ger_a],[ger_o],[ger_c]])",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "Mger_c",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "Mger_c = sum(Pger_c / 12)\nger_t = np.array([Pger_t,Mger_t])\nger_a = np.array([Pger_a,Mger_a])\nger_o = np.array([Pger_o,Mger_o])\nger_c = np.array([Pger_c,Mger_c])\ndtot = mean(demand(1,:)) / 1000\ndemand_tot = np.array([demand / 1000,dtot])\n#P = [demand_tot; ger_t];\nP = np.array([[demand_tot],[ger_t],[ger_a],[ger_o],[ger_c]])\nrnames2 = np.array(['Load[kWh]','Performance[kWh]','Optimal[kWh]','Topsis[kWh]','Cost[kWh]'])",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "ger_t",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "ger_t = np.array([Pger_t,Mger_t])\nger_a = np.array([Pger_a,Mger_a])\nger_o = np.array([Pger_o,Mger_o])\nger_c = np.array([Pger_c,Mger_c])\ndtot = mean(demand(1,:)) / 1000\ndemand_tot = np.array([demand / 1000,dtot])\n#P = [demand_tot; ger_t];\nP = np.array([[demand_tot],[ger_t],[ger_a],[ger_o],[ger_c]])\nrnames2 = np.array(['Load[kWh]','Performance[kWh]','Optimal[kWh]','Topsis[kWh]','Cost[kWh]'])\ncnames2 = np.array(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','Annual'])",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "ger_a",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "ger_a = np.array([Pger_a,Mger_a])\nger_o = np.array([Pger_o,Mger_o])\nger_c = np.array([Pger_c,Mger_c])\ndtot = mean(demand(1,:)) / 1000\ndemand_tot = np.array([demand / 1000,dtot])\n#P = [demand_tot; ger_t];\nP = np.array([[demand_tot],[ger_t],[ger_a],[ger_o],[ger_c]])\nrnames2 = np.array(['Load[kWh]','Performance[kWh]','Optimal[kWh]','Topsis[kWh]','Cost[kWh]'])\ncnames2 = np.array(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','Annual'])\nt2 = uitable(f2,'Data',P,'ColumnName',cnames2,'RowName',rnames2,'units','normalized','ColumnWidth',np.array([69]))",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "ger_o",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "ger_o = np.array([Pger_o,Mger_o])\nger_c = np.array([Pger_c,Mger_c])\ndtot = mean(demand(1,:)) / 1000\ndemand_tot = np.array([demand / 1000,dtot])\n#P = [demand_tot; ger_t];\nP = np.array([[demand_tot],[ger_t],[ger_a],[ger_o],[ger_c]])\nrnames2 = np.array(['Load[kWh]','Performance[kWh]','Optimal[kWh]','Topsis[kWh]','Cost[kWh]'])\ncnames2 = np.array(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','Annual'])\nt2 = uitable(f2,'Data',P,'ColumnName',cnames2,'RowName',rnames2,'units','normalized','ColumnWidth',np.array([69]))\n#'Position',[400 93 121 243],...",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "ger_c",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "ger_c = np.array([Pger_c,Mger_c])\ndtot = mean(demand(1,:)) / 1000\ndemand_tot = np.array([demand / 1000,dtot])\n#P = [demand_tot; ger_t];\nP = np.array([[demand_tot],[ger_t],[ger_a],[ger_o],[ger_c]])\nrnames2 = np.array(['Load[kWh]','Performance[kWh]','Optimal[kWh]','Topsis[kWh]','Cost[kWh]'])\ncnames2 = np.array(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','Annual'])\nt2 = uitable(f2,'Data',P,'ColumnName',cnames2,'RowName',rnames2,'units','normalized','ColumnWidth',np.array([69]))\n#'Position',[400 93 121 243],...\nsubplot(2,1,1,'position')",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "dtot",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "dtot = mean(demand(1,:)) / 1000\ndemand_tot = np.array([demand / 1000,dtot])\n#P = [demand_tot; ger_t];\nP = np.array([[demand_tot],[ger_t],[ger_a],[ger_o],[ger_c]])\nrnames2 = np.array(['Load[kWh]','Performance[kWh]','Optimal[kWh]','Topsis[kWh]','Cost[kWh]'])\ncnames2 = np.array(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','Annual'])\nt2 = uitable(f2,'Data',P,'ColumnName',cnames2,'RowName',rnames2,'units','normalized','ColumnWidth',np.array([69]))\n#'Position',[400 93 121 243],...\nsubplot(2,1,1,'position')\nx = np.array([np.arange(1,12+1,1)])",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "demand_tot",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "demand_tot = np.array([demand / 1000,dtot])\n#P = [demand_tot; ger_t];\nP = np.array([[demand_tot],[ger_t],[ger_a],[ger_o],[ger_c]])\nrnames2 = np.array(['Load[kWh]','Performance[kWh]','Optimal[kWh]','Topsis[kWh]','Cost[kWh]'])\ncnames2 = np.array(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','Annual'])\nt2 = uitable(f2,'Data',P,'ColumnName',cnames2,'RowName',rnames2,'units','normalized','ColumnWidth',np.array([69]))\n#'Position',[400 93 121 243],...\nsubplot(2,1,1,'position')\nx = np.array([np.arange(1,12+1,1)])\nplt.plot(x,demand / 1000,'-+b')",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "#P",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "#P = [demand_tot; ger_t];\nP = np.array([[demand_tot],[ger_t],[ger_a],[ger_o],[ger_c]])\nrnames2 = np.array(['Load[kWh]','Performance[kWh]','Optimal[kWh]','Topsis[kWh]','Cost[kWh]'])\ncnames2 = np.array(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','Annual'])\nt2 = uitable(f2,'Data',P,'ColumnName',cnames2,'RowName',rnames2,'units','normalized','ColumnWidth',np.array([69]))\n#'Position',[400 93 121 243],...\nsubplot(2,1,1,'position')\nx = np.array([np.arange(1,12+1,1)])\nplt.plot(x,demand / 1000,'-+b')\ngrid",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "P = np.array([[demand_tot],[ger_t],[ger_a],[ger_o],[ger_c]])\nrnames2 = np.array(['Load[kWh]','Performance[kWh]','Optimal[kWh]','Topsis[kWh]','Cost[kWh]'])\ncnames2 = np.array(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','Annual'])\nt2 = uitable(f2,'Data',P,'ColumnName',cnames2,'RowName',rnames2,'units','normalized','ColumnWidth',np.array([69]))\n#'Position',[400 93 121 243],...\nsubplot(2,1,1,'position')\nx = np.array([np.arange(1,12+1,1)])\nplt.plot(x,demand / 1000,'-+b')\ngrid\nplt.xlabel('Months')",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "rnames2",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "rnames2 = np.array(['Load[kWh]','Performance[kWh]','Optimal[kWh]','Topsis[kWh]','Cost[kWh]'])\ncnames2 = np.array(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','Annual'])\nt2 = uitable(f2,'Data',P,'ColumnName',cnames2,'RowName',rnames2,'units','normalized','ColumnWidth',np.array([69]))\n#'Position',[400 93 121 243],...\nsubplot(2,1,1,'position')\nx = np.array([np.arange(1,12+1,1)])\nplt.plot(x,demand / 1000,'-+b')\ngrid\nplt.xlabel('Months')\nplt.ylabel('Energy [kWh]')",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "cnames2",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "cnames2 = np.array(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','Annual'])\nt2 = uitable(f2,'Data',P,'ColumnName',cnames2,'RowName',rnames2,'units','normalized','ColumnWidth',np.array([69]))\n#'Position',[400 93 121 243],...\nsubplot(2,1,1,'position')\nx = np.array([np.arange(1,12+1,1)])\nplt.plot(x,demand / 1000,'-+b')\ngrid\nplt.xlabel('Months')\nplt.ylabel('Energy [kWh]')\nplt.title('ENERGY PRODUCED BY MONTH')",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "t2",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "t2 = uitable(f2,'Data',P,'ColumnName',cnames2,'RowName',rnames2,'units','normalized','ColumnWidth',np.array([69]))\n#'Position',[400 93 121 243],...\nsubplot(2,1,1,'position')\nx = np.array([np.arange(1,12+1,1)])\nplt.plot(x,demand / 1000,'-+b')\ngrid\nplt.xlabel('Months')\nplt.ylabel('Energy [kWh]')\nplt.title('ENERGY PRODUCED BY MONTH')\nhold('on')",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "x = np.array([np.arange(1,12+1,1)])\nplt.plot(x,demand / 1000,'-+b')\ngrid\nplt.xlabel('Months')\nplt.ylabel('Energy [kWh]')\nplt.title('ENERGY PRODUCED BY MONTH')\nhold('on')\nplt.plot(x,Pger_t,'--or')\nplt.plot(x,Pger_a,':*m')\nplt.plot(x,Pger_o,'-.+g')",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "pos2",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "pos2 = get(subplot(2,1,2),'position')\nos.delete(subplot(2,1,2))\nset(t2,'position',pos2)\n# Solar Painel + Inverter Parameters\nf3 = plt.figure(3)\nSt,Sit,Sta,Sita,Sto,Sito,Stc,Sitc = pv_inv_string2(pt,pta,pto,ptc,sunS,pit,pita,pito,pitc,froS)\nif Nt != 0:\n    incl = incl\n    ori = ori\nelse:",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "f3",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "f3 = plt.figure(3)\nSt,Sit,Sta,Sita,Sto,Sito,Stc,Sitc = pv_inv_string2(pt,pta,pto,ptc,sunS,pit,pita,pito,pitc,froS)\nif Nt != 0:\n    incl = incl\n    ori = ori\nelse:\n    incl = 0\n    ori = 0\nif Nta != 0:\n    incla = incl",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "St,Sit,Sta,Sita,Sto,Sito,Stc,Sitc",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "St,Sit,Sta,Sita,Sto,Sito,Stc,Sitc = pv_inv_string2(pt,pta,pto,ptc,sunS,pit,pita,pito,pitc,froS)\nif Nt != 0:\n    incl = incl\n    ori = ori\nelse:\n    incl = 0\n    ori = 0\nif Nta != 0:\n    incla = incl\n    oria = ori",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "nt",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "nt = np.array([Nt,Nit,Npit,Npt1,NSt,tt,incl,ori,dist,dmax])\nnta = np.array([Nta,Nita,Npita,Npt1a,NSta,tta,incla,oria,dista,dmaxa])\nnto = np.array([Nto,Nito,Npito,Npt1o,NSto,tto,inclo,orio,disto,dmaxo])\nntc = np.array([Ntc,Nitc,Npitc,Npt1c,NStc,ttc,inclc,oric,distc,dmaxc])\nnft,nfta,nftc,nfto = checking(Nt,Nto,Ntc,Nta,NFT,NFTa,NFTo,NFTc)\n# nftaco=[nft;nfta;nfto;nftc];\n# ntaco=[Nt;Nta;Nto;Ntc];\n# nitaco=[Nit;Nita;Nito;Nitc];\nsvv = np.array([[St],[Sta],[Sto],[Stc]])\nsinv = np.array([[Sit],[Sita],[Sito],[Sitc]])",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "nta",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "nta = np.array([Nta,Nita,Npita,Npt1a,NSta,tta,incla,oria,dista,dmaxa])\nnto = np.array([Nto,Nito,Npito,Npt1o,NSto,tto,inclo,orio,disto,dmaxo])\nntc = np.array([Ntc,Nitc,Npitc,Npt1c,NStc,ttc,inclc,oric,distc,dmaxc])\nnft,nfta,nftc,nfto = checking(Nt,Nto,Ntc,Nta,NFT,NFTa,NFTo,NFTc)\n# nftaco=[nft;nfta;nfto;nftc];\n# ntaco=[Nt;Nta;Nto;Ntc];\n# nitaco=[Nit;Nita;Nito;Nitc];\nsvv = np.array([[St],[Sta],[Sto],[Stc]])\nsinv = np.array([[Sit],[Sita],[Sito],[Sitc]])\npvv = np.array([[pt(1,np.arange(2,25+1))],[pta(1,np.arange(2,25+1))],[pto(1,np.arange(2,25+1))],[ptc(1,np.arange(2,25+1))]])",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "nto",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "nto = np.array([Nto,Nito,Npito,Npt1o,NSto,tto,inclo,orio,disto,dmaxo])\nntc = np.array([Ntc,Nitc,Npitc,Npt1c,NStc,ttc,inclc,oric,distc,dmaxc])\nnft,nfta,nftc,nfto = checking(Nt,Nto,Ntc,Nta,NFT,NFTa,NFTo,NFTc)\n# nftaco=[nft;nfta;nfto;nftc];\n# ntaco=[Nt;Nta;Nto;Ntc];\n# nitaco=[Nit;Nita;Nito;Nitc];\nsvv = np.array([[St],[Sta],[Sto],[Stc]])\nsinv = np.array([[Sit],[Sita],[Sito],[Sitc]])\npvv = np.array([[pt(1,np.arange(2,25+1))],[pta(1,np.arange(2,25+1))],[pto(1,np.arange(2,25+1))],[ptc(1,np.arange(2,25+1))]])\ninv = np.array([[pit(1,np.arange(2,32+1))],[pita(1,np.arange(2,32+1))],[pito(1,np.arange(2,32+1))],[pitc(1,np.arange(2,32+1))]])",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "ntc",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "ntc = np.array([Ntc,Nitc,Npitc,Npt1c,NStc,ttc,inclc,oric,distc,dmaxc])\nnft,nfta,nftc,nfto = checking(Nt,Nto,Ntc,Nta,NFT,NFTa,NFTo,NFTc)\n# nftaco=[nft;nfta;nfto;nftc];\n# ntaco=[Nt;Nta;Nto;Ntc];\n# nitaco=[Nit;Nita;Nito;Nitc];\nsvv = np.array([[St],[Sta],[Sto],[Stc]])\nsinv = np.array([[Sit],[Sita],[Sito],[Sitc]])\npvv = np.array([[pt(1,np.arange(2,25+1))],[pta(1,np.arange(2,25+1))],[pto(1,np.arange(2,25+1))],[ptc(1,np.arange(2,25+1))]])\ninv = np.array([[pit(1,np.arange(2,32+1))],[pita(1,np.arange(2,32+1))],[pito(1,np.arange(2,32+1))],[pitc(1,np.arange(2,32+1))]])\npvvv = np.array([svv,num2cell(pvv)])",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "nft,nfta,nftc,nfto",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "nft,nfta,nftc,nfto = checking(Nt,Nto,Ntc,Nta,NFT,NFTa,NFTo,NFTc)\n# nftaco=[nft;nfta;nfto;nftc];\n# ntaco=[Nt;Nta;Nto;Ntc];\n# nitaco=[Nit;Nita;Nito;Nitc];\nsvv = np.array([[St],[Sta],[Sto],[Stc]])\nsinv = np.array([[Sit],[Sita],[Sito],[Sitc]])\npvv = np.array([[pt(1,np.arange(2,25+1))],[pta(1,np.arange(2,25+1))],[pto(1,np.arange(2,25+1))],[ptc(1,np.arange(2,25+1))]])\ninv = np.array([[pit(1,np.arange(2,32+1))],[pita(1,np.arange(2,32+1))],[pito(1,np.arange(2,32+1))],[pitc(1,np.arange(2,32+1))]])\npvvv = np.array([svv,num2cell(pvv)])\ninvv = np.array([sinv,num2cell(inv)])",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "svv",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "svv = np.array([[St],[Sta],[Sto],[Stc]])\nsinv = np.array([[Sit],[Sita],[Sito],[Sitc]])\npvv = np.array([[pt(1,np.arange(2,25+1))],[pta(1,np.arange(2,25+1))],[pto(1,np.arange(2,25+1))],[ptc(1,np.arange(2,25+1))]])\ninv = np.array([[pit(1,np.arange(2,32+1))],[pita(1,np.arange(2,32+1))],[pito(1,np.arange(2,32+1))],[pitc(1,np.arange(2,32+1))]])\npvvv = np.array([svv,num2cell(pvv)])\ninvv = np.array([sinv,num2cell(inv)])\nvoc_stringT,sec_stringT,Is_minT,Is_maxT,VdioT,IdioT,voc_arranjoT,sec_arranjoT,Ia_minT,Ia_maxT,dps_caT,sec_caT,Id_minT,Id_maxT,txt = protection_system(pt,pit,nft,max_atemp,Nt,Nit,wind_speed,NSt)\nvoc_stringTA,sec_stringTA,Is_minTA,Is_maxTA,VdioTA,IdioTA,voc_arranjoTA,sec_arranjoTA,Ia_minTA,Ia_maxTA,dps_caTA,sec_caTA,Id_minTA,Id_maxTA,txtA = protection_system(pta,pita,nfta,max_atemp,Nta,Nita,wind_speed,NSta)\nvoc_stringTO,sec_stringTO,Is_minTO,Is_maxTO,VdioTO,IdioTO,voc_arranjoTO,sec_arranjoTO,Ia_minTO,Ia_maxTO,dps_caTO,sec_caTO,Id_minTO,Id_maxTO,txtO = protection_system(pto,pito,nfto,max_atemp,Nto,Nito,wind_speed,NSto)\nvoc_stringTC,sec_stringTC,Is_minTC,Is_maxTC,VdioTC,IdioTC,voc_arranjoTC,sec_arranjoTC,Ia_minTC,Ia_maxTC,dps_caTC,sec_caTC,Id_minTC,Id_maxTC,txtC = protection_system(ptc,pitc,nftc,max_atemp,Ntc,Nitc,wind_speed,NStc)",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "sinv",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "sinv = np.array([[Sit],[Sita],[Sito],[Sitc]])\npvv = np.array([[pt(1,np.arange(2,25+1))],[pta(1,np.arange(2,25+1))],[pto(1,np.arange(2,25+1))],[ptc(1,np.arange(2,25+1))]])\ninv = np.array([[pit(1,np.arange(2,32+1))],[pita(1,np.arange(2,32+1))],[pito(1,np.arange(2,32+1))],[pitc(1,np.arange(2,32+1))]])\npvvv = np.array([svv,num2cell(pvv)])\ninvv = np.array([sinv,num2cell(inv)])\nvoc_stringT,sec_stringT,Is_minT,Is_maxT,VdioT,IdioT,voc_arranjoT,sec_arranjoT,Ia_minT,Ia_maxT,dps_caT,sec_caT,Id_minT,Id_maxT,txt = protection_system(pt,pit,nft,max_atemp,Nt,Nit,wind_speed,NSt)\nvoc_stringTA,sec_stringTA,Is_minTA,Is_maxTA,VdioTA,IdioTA,voc_arranjoTA,sec_arranjoTA,Ia_minTA,Ia_maxTA,dps_caTA,sec_caTA,Id_minTA,Id_maxTA,txtA = protection_system(pta,pita,nfta,max_atemp,Nta,Nita,wind_speed,NSta)\nvoc_stringTO,sec_stringTO,Is_minTO,Is_maxTO,VdioTO,IdioTO,voc_arranjoTO,sec_arranjoTO,Ia_minTO,Ia_maxTO,dps_caTO,sec_caTO,Id_minTO,Id_maxTO,txtO = protection_system(pto,pito,nfto,max_atemp,Nto,Nito,wind_speed,NSto)\nvoc_stringTC,sec_stringTC,Is_minTC,Is_maxTC,VdioTC,IdioTC,voc_arranjoTC,sec_arranjoTC,Ia_minTC,Ia_maxTC,dps_caTC,sec_caTC,Id_minTC,Id_maxTC,txtC = protection_system(ptc,pitc,nftc,max_atemp,Ntc,Nitc,wind_speed,NStc)\nntt = np.array([num2cell(nt),nft,sec_stringT,voc_stringT,IdioT,VdioT,Is_minT,Is_maxT,voc_stringT,sec_arranjoT,voc_arranjoT,Ia_minT,Ia_maxT,voc_arranjoT,sec_caT,dps_caT,Id_minT,Id_maxT,dps_caT,txt,txt,txt])",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "pvv",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "pvv = np.array([[pt(1,np.arange(2,25+1))],[pta(1,np.arange(2,25+1))],[pto(1,np.arange(2,25+1))],[ptc(1,np.arange(2,25+1))]])\ninv = np.array([[pit(1,np.arange(2,32+1))],[pita(1,np.arange(2,32+1))],[pito(1,np.arange(2,32+1))],[pitc(1,np.arange(2,32+1))]])\npvvv = np.array([svv,num2cell(pvv)])\ninvv = np.array([sinv,num2cell(inv)])\nvoc_stringT,sec_stringT,Is_minT,Is_maxT,VdioT,IdioT,voc_arranjoT,sec_arranjoT,Ia_minT,Ia_maxT,dps_caT,sec_caT,Id_minT,Id_maxT,txt = protection_system(pt,pit,nft,max_atemp,Nt,Nit,wind_speed,NSt)\nvoc_stringTA,sec_stringTA,Is_minTA,Is_maxTA,VdioTA,IdioTA,voc_arranjoTA,sec_arranjoTA,Ia_minTA,Ia_maxTA,dps_caTA,sec_caTA,Id_minTA,Id_maxTA,txtA = protection_system(pta,pita,nfta,max_atemp,Nta,Nita,wind_speed,NSta)\nvoc_stringTO,sec_stringTO,Is_minTO,Is_maxTO,VdioTO,IdioTO,voc_arranjoTO,sec_arranjoTO,Ia_minTO,Ia_maxTO,dps_caTO,sec_caTO,Id_minTO,Id_maxTO,txtO = protection_system(pto,pito,nfto,max_atemp,Nto,Nito,wind_speed,NSto)\nvoc_stringTC,sec_stringTC,Is_minTC,Is_maxTC,VdioTC,IdioTC,voc_arranjoTC,sec_arranjoTC,Ia_minTC,Ia_maxTC,dps_caTC,sec_caTC,Id_minTC,Id_maxTC,txtC = protection_system(ptc,pitc,nftc,max_atemp,Ntc,Nitc,wind_speed,NStc)\nntt = np.array([num2cell(nt),nft,sec_stringT,voc_stringT,IdioT,VdioT,Is_minT,Is_maxT,voc_stringT,sec_arranjoT,voc_arranjoT,Ia_minT,Ia_maxT,voc_arranjoT,sec_caT,dps_caT,Id_minT,Id_maxT,dps_caT,txt,txt,txt])\nntta = np.array([num2cell(nta),nfta,sec_stringTA,voc_stringTA,IdioTA,VdioTA,Is_minTA,Is_maxTA,voc_stringTA,sec_arranjoTA,voc_arranjoTA,Ia_minTA,Ia_maxTA,voc_arranjoTA,sec_caTA,dps_caTA,Id_minTA,Id_maxTA,dps_caTA,txtA,txtA,txtA])",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "inv",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "inv = np.array([[pit(1,np.arange(2,32+1))],[pita(1,np.arange(2,32+1))],[pito(1,np.arange(2,32+1))],[pitc(1,np.arange(2,32+1))]])\npvvv = np.array([svv,num2cell(pvv)])\ninvv = np.array([sinv,num2cell(inv)])\nvoc_stringT,sec_stringT,Is_minT,Is_maxT,VdioT,IdioT,voc_arranjoT,sec_arranjoT,Ia_minT,Ia_maxT,dps_caT,sec_caT,Id_minT,Id_maxT,txt = protection_system(pt,pit,nft,max_atemp,Nt,Nit,wind_speed,NSt)\nvoc_stringTA,sec_stringTA,Is_minTA,Is_maxTA,VdioTA,IdioTA,voc_arranjoTA,sec_arranjoTA,Ia_minTA,Ia_maxTA,dps_caTA,sec_caTA,Id_minTA,Id_maxTA,txtA = protection_system(pta,pita,nfta,max_atemp,Nta,Nita,wind_speed,NSta)\nvoc_stringTO,sec_stringTO,Is_minTO,Is_maxTO,VdioTO,IdioTO,voc_arranjoTO,sec_arranjoTO,Ia_minTO,Ia_maxTO,dps_caTO,sec_caTO,Id_minTO,Id_maxTO,txtO = protection_system(pto,pito,nfto,max_atemp,Nto,Nito,wind_speed,NSto)\nvoc_stringTC,sec_stringTC,Is_minTC,Is_maxTC,VdioTC,IdioTC,voc_arranjoTC,sec_arranjoTC,Ia_minTC,Ia_maxTC,dps_caTC,sec_caTC,Id_minTC,Id_maxTC,txtC = protection_system(ptc,pitc,nftc,max_atemp,Ntc,Nitc,wind_speed,NStc)\nntt = np.array([num2cell(nt),nft,sec_stringT,voc_stringT,IdioT,VdioT,Is_minT,Is_maxT,voc_stringT,sec_arranjoT,voc_arranjoT,Ia_minT,Ia_maxT,voc_arranjoT,sec_caT,dps_caT,Id_minT,Id_maxT,dps_caT,txt,txt,txt])\nntta = np.array([num2cell(nta),nfta,sec_stringTA,voc_stringTA,IdioTA,VdioTA,Is_minTA,Is_maxTA,voc_stringTA,sec_arranjoTA,voc_arranjoTA,Ia_minTA,Ia_maxTA,voc_arranjoTA,sec_caTA,dps_caTA,Id_minTA,Id_maxTA,dps_caTA,txtA,txtA,txtA])\nntto = np.array([num2cell(nto),nfto,sec_stringTO,voc_stringTO,IdioTO,VdioTO,Is_minTO,Is_maxTO,voc_stringTO,sec_arranjoTO,voc_arranjoTO,Ia_minTO,Ia_maxTO,voc_arranjoTO,sec_caTO,dps_caTO,Id_minTO,Id_maxTO,dps_caTO,txtO,txtO,txtO])",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "pvvv",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "pvvv = np.array([svv,num2cell(pvv)])\ninvv = np.array([sinv,num2cell(inv)])\nvoc_stringT,sec_stringT,Is_minT,Is_maxT,VdioT,IdioT,voc_arranjoT,sec_arranjoT,Ia_minT,Ia_maxT,dps_caT,sec_caT,Id_minT,Id_maxT,txt = protection_system(pt,pit,nft,max_atemp,Nt,Nit,wind_speed,NSt)\nvoc_stringTA,sec_stringTA,Is_minTA,Is_maxTA,VdioTA,IdioTA,voc_arranjoTA,sec_arranjoTA,Ia_minTA,Ia_maxTA,dps_caTA,sec_caTA,Id_minTA,Id_maxTA,txtA = protection_system(pta,pita,nfta,max_atemp,Nta,Nita,wind_speed,NSta)\nvoc_stringTO,sec_stringTO,Is_minTO,Is_maxTO,VdioTO,IdioTO,voc_arranjoTO,sec_arranjoTO,Ia_minTO,Ia_maxTO,dps_caTO,sec_caTO,Id_minTO,Id_maxTO,txtO = protection_system(pto,pito,nfto,max_atemp,Nto,Nito,wind_speed,NSto)\nvoc_stringTC,sec_stringTC,Is_minTC,Is_maxTC,VdioTC,IdioTC,voc_arranjoTC,sec_arranjoTC,Ia_minTC,Ia_maxTC,dps_caTC,sec_caTC,Id_minTC,Id_maxTC,txtC = protection_system(ptc,pitc,nftc,max_atemp,Ntc,Nitc,wind_speed,NStc)\nntt = np.array([num2cell(nt),nft,sec_stringT,voc_stringT,IdioT,VdioT,Is_minT,Is_maxT,voc_stringT,sec_arranjoT,voc_arranjoT,Ia_minT,Ia_maxT,voc_arranjoT,sec_caT,dps_caT,Id_minT,Id_maxT,dps_caT,txt,txt,txt])\nntta = np.array([num2cell(nta),nfta,sec_stringTA,voc_stringTA,IdioTA,VdioTA,Is_minTA,Is_maxTA,voc_stringTA,sec_arranjoTA,voc_arranjoTA,Ia_minTA,Ia_maxTA,voc_arranjoTA,sec_caTA,dps_caTA,Id_minTA,Id_maxTA,dps_caTA,txtA,txtA,txtA])\nntto = np.array([num2cell(nto),nfto,sec_stringTO,voc_stringTO,IdioTO,VdioTO,Is_minTO,Is_maxTO,voc_stringTO,sec_arranjoTO,voc_arranjoTO,Ia_minTO,Ia_maxTO,voc_arranjoTO,sec_caTO,dps_caTO,Id_minTO,Id_maxTO,dps_caTO,txtO,txtO,txtO])\nnttc = np.array([num2cell(ntc),nftc,sec_stringTC,voc_stringTC,IdioTC,VdioTC,Is_minTC,Is_maxTC,voc_stringTC,sec_arranjoTC,voc_arranjoTC,Ia_minTC,Ia_maxTC,voc_arranjoTC,sec_caTC,dps_caTC,Id_minTC,Id_maxTC,dps_caTC,txtC,txtC,txtC])",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "invv",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "invv = np.array([sinv,num2cell(inv)])\nvoc_stringT,sec_stringT,Is_minT,Is_maxT,VdioT,IdioT,voc_arranjoT,sec_arranjoT,Ia_minT,Ia_maxT,dps_caT,sec_caT,Id_minT,Id_maxT,txt = protection_system(pt,pit,nft,max_atemp,Nt,Nit,wind_speed,NSt)\nvoc_stringTA,sec_stringTA,Is_minTA,Is_maxTA,VdioTA,IdioTA,voc_arranjoTA,sec_arranjoTA,Ia_minTA,Ia_maxTA,dps_caTA,sec_caTA,Id_minTA,Id_maxTA,txtA = protection_system(pta,pita,nfta,max_atemp,Nta,Nita,wind_speed,NSta)\nvoc_stringTO,sec_stringTO,Is_minTO,Is_maxTO,VdioTO,IdioTO,voc_arranjoTO,sec_arranjoTO,Ia_minTO,Ia_maxTO,dps_caTO,sec_caTO,Id_minTO,Id_maxTO,txtO = protection_system(pto,pito,nfto,max_atemp,Nto,Nito,wind_speed,NSto)\nvoc_stringTC,sec_stringTC,Is_minTC,Is_maxTC,VdioTC,IdioTC,voc_arranjoTC,sec_arranjoTC,Ia_minTC,Ia_maxTC,dps_caTC,sec_caTC,Id_minTC,Id_maxTC,txtC = protection_system(ptc,pitc,nftc,max_atemp,Ntc,Nitc,wind_speed,NStc)\nntt = np.array([num2cell(nt),nft,sec_stringT,voc_stringT,IdioT,VdioT,Is_minT,Is_maxT,voc_stringT,sec_arranjoT,voc_arranjoT,Ia_minT,Ia_maxT,voc_arranjoT,sec_caT,dps_caT,Id_minT,Id_maxT,dps_caT,txt,txt,txt])\nntta = np.array([num2cell(nta),nfta,sec_stringTA,voc_stringTA,IdioTA,VdioTA,Is_minTA,Is_maxTA,voc_stringTA,sec_arranjoTA,voc_arranjoTA,Ia_minTA,Ia_maxTA,voc_arranjoTA,sec_caTA,dps_caTA,Id_minTA,Id_maxTA,dps_caTA,txtA,txtA,txtA])\nntto = np.array([num2cell(nto),nfto,sec_stringTO,voc_stringTO,IdioTO,VdioTO,Is_minTO,Is_maxTO,voc_stringTO,sec_arranjoTO,voc_arranjoTO,Ia_minTO,Ia_maxTO,voc_arranjoTO,sec_caTO,dps_caTO,Id_minTO,Id_maxTO,dps_caTO,txtO,txtO,txtO])\nnttc = np.array([num2cell(ntc),nftc,sec_stringTC,voc_stringTC,IdioTC,VdioTC,Is_minTC,Is_maxTC,voc_stringTC,sec_arranjoTC,voc_arranjoTC,Ia_minTC,Ia_maxTC,voc_arranjoTC,sec_caTC,dps_caTC,Id_minTC,Id_maxTC,dps_caTC,txtC,txtC,txtC])\n#nin=[nt' nta' nto' ntc'];",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "voc_stringT,sec_stringT,Is_minT,Is_maxT,VdioT,IdioT,voc_arranjoT,sec_arranjoT,Ia_minT,Ia_maxT,dps_caT,sec_caT,Id_minT,Id_maxT,txt",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "voc_stringT,sec_stringT,Is_minT,Is_maxT,VdioT,IdioT,voc_arranjoT,sec_arranjoT,Ia_minT,Ia_maxT,dps_caT,sec_caT,Id_minT,Id_maxT,txt = protection_system(pt,pit,nft,max_atemp,Nt,Nit,wind_speed,NSt)\nvoc_stringTA,sec_stringTA,Is_minTA,Is_maxTA,VdioTA,IdioTA,voc_arranjoTA,sec_arranjoTA,Ia_minTA,Ia_maxTA,dps_caTA,sec_caTA,Id_minTA,Id_maxTA,txtA = protection_system(pta,pita,nfta,max_atemp,Nta,Nita,wind_speed,NSta)\nvoc_stringTO,sec_stringTO,Is_minTO,Is_maxTO,VdioTO,IdioTO,voc_arranjoTO,sec_arranjoTO,Ia_minTO,Ia_maxTO,dps_caTO,sec_caTO,Id_minTO,Id_maxTO,txtO = protection_system(pto,pito,nfto,max_atemp,Nto,Nito,wind_speed,NSto)\nvoc_stringTC,sec_stringTC,Is_minTC,Is_maxTC,VdioTC,IdioTC,voc_arranjoTC,sec_arranjoTC,Ia_minTC,Ia_maxTC,dps_caTC,sec_caTC,Id_minTC,Id_maxTC,txtC = protection_system(ptc,pitc,nftc,max_atemp,Ntc,Nitc,wind_speed,NStc)\nntt = np.array([num2cell(nt),nft,sec_stringT,voc_stringT,IdioT,VdioT,Is_minT,Is_maxT,voc_stringT,sec_arranjoT,voc_arranjoT,Ia_minT,Ia_maxT,voc_arranjoT,sec_caT,dps_caT,Id_minT,Id_maxT,dps_caT,txt,txt,txt])\nntta = np.array([num2cell(nta),nfta,sec_stringTA,voc_stringTA,IdioTA,VdioTA,Is_minTA,Is_maxTA,voc_stringTA,sec_arranjoTA,voc_arranjoTA,Ia_minTA,Ia_maxTA,voc_arranjoTA,sec_caTA,dps_caTA,Id_minTA,Id_maxTA,dps_caTA,txtA,txtA,txtA])\nntto = np.array([num2cell(nto),nfto,sec_stringTO,voc_stringTO,IdioTO,VdioTO,Is_minTO,Is_maxTO,voc_stringTO,sec_arranjoTO,voc_arranjoTO,Ia_minTO,Ia_maxTO,voc_arranjoTO,sec_caTO,dps_caTO,Id_minTO,Id_maxTO,dps_caTO,txtO,txtO,txtO])\nnttc = np.array([num2cell(ntc),nftc,sec_stringTC,voc_stringTC,IdioTC,VdioTC,Is_minTC,Is_maxTC,voc_stringTC,sec_arranjoTC,voc_arranjoTC,Ia_minTC,Ia_maxTC,voc_arranjoTC,sec_caTC,dps_caTC,Id_minTC,Id_maxTC,dps_caTC,txtC,txtC,txtC])\n#nin=[nt' nta' nto' ntc'];\nnin = np.array([np.transpose(ntt),np.transpose(ntta),np.transpose(ntto),np.transpose(nttc)])",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "voc_stringTA,sec_stringTA,Is_minTA,Is_maxTA,VdioTA,IdioTA,voc_arranjoTA,sec_arranjoTA,Ia_minTA,Ia_maxTA,dps_caTA,sec_caTA,Id_minTA,Id_maxTA,txtA",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "voc_stringTA,sec_stringTA,Is_minTA,Is_maxTA,VdioTA,IdioTA,voc_arranjoTA,sec_arranjoTA,Ia_minTA,Ia_maxTA,dps_caTA,sec_caTA,Id_minTA,Id_maxTA,txtA = protection_system(pta,pita,nfta,max_atemp,Nta,Nita,wind_speed,NSta)\nvoc_stringTO,sec_stringTO,Is_minTO,Is_maxTO,VdioTO,IdioTO,voc_arranjoTO,sec_arranjoTO,Ia_minTO,Ia_maxTO,dps_caTO,sec_caTO,Id_minTO,Id_maxTO,txtO = protection_system(pto,pito,nfto,max_atemp,Nto,Nito,wind_speed,NSto)\nvoc_stringTC,sec_stringTC,Is_minTC,Is_maxTC,VdioTC,IdioTC,voc_arranjoTC,sec_arranjoTC,Ia_minTC,Ia_maxTC,dps_caTC,sec_caTC,Id_minTC,Id_maxTC,txtC = protection_system(ptc,pitc,nftc,max_atemp,Ntc,Nitc,wind_speed,NStc)\nntt = np.array([num2cell(nt),nft,sec_stringT,voc_stringT,IdioT,VdioT,Is_minT,Is_maxT,voc_stringT,sec_arranjoT,voc_arranjoT,Ia_minT,Ia_maxT,voc_arranjoT,sec_caT,dps_caT,Id_minT,Id_maxT,dps_caT,txt,txt,txt])\nntta = np.array([num2cell(nta),nfta,sec_stringTA,voc_stringTA,IdioTA,VdioTA,Is_minTA,Is_maxTA,voc_stringTA,sec_arranjoTA,voc_arranjoTA,Ia_minTA,Ia_maxTA,voc_arranjoTA,sec_caTA,dps_caTA,Id_minTA,Id_maxTA,dps_caTA,txtA,txtA,txtA])\nntto = np.array([num2cell(nto),nfto,sec_stringTO,voc_stringTO,IdioTO,VdioTO,Is_minTO,Is_maxTO,voc_stringTO,sec_arranjoTO,voc_arranjoTO,Ia_minTO,Ia_maxTO,voc_arranjoTO,sec_caTO,dps_caTO,Id_minTO,Id_maxTO,dps_caTO,txtO,txtO,txtO])\nnttc = np.array([num2cell(ntc),nftc,sec_stringTC,voc_stringTC,IdioTC,VdioTC,Is_minTC,Is_maxTC,voc_stringTC,sec_arranjoTC,voc_arranjoTC,Ia_minTC,Ia_maxTC,voc_arranjoTC,sec_caTC,dps_caTC,Id_minTC,Id_maxTC,dps_caTC,txtC,txtC,txtC])\n#nin=[nt' nta' nto' ntc'];\nnin = np.array([np.transpose(ntt),np.transpose(ntta),np.transpose(ntto),np.transpose(nttc)])\ncnames3 = np.array(['Number of PV modules','Number of Inverters','Number of PV modules per inverter','Max. Number of MPPT per inverter','Max. Number of Strings per MPPT','Number of Power Transformer','Module tilt angle - Inclination in [degree]','Module Azimuth angle - Orientation in [degree]','Distance of arrays in [m]','Distance of arrays for maximum power in [m]','Strings distribution per inverter/MPPT/NoDC','Elast�mero cable section per string [mm�]','Min. cable voltage insulation per string [V]','Min. diode current per string [A]','Min. diode voltage per string [V]','Min. current for breaker/fuse/disconnector per string [A]','Max. current for breaker/fuse/disconnector per string [A]','Min. Voltage for surge protector type II per string [V]','Elast�mero cable section per arrangement [mm�]','Min. cable voltage insulation per arrangement [V]','Min. current for breaker/fuse/disconnector per arrangement [A]','Max. current for breaker/fuse/disconnector per arrangement [A]','Min. Voltage for surge protector type II per arrangement [V]','Cable section in AC side [mm�]','Min. cable voltage insulation in AC side [V]','Min. current for breaker/disconnector in AC side [A]','Max. current for breaker/disconnector in AC side [A]','Min. Voltage for surge protector type II in AC side [V]','Equipotencialize modules/inverters/structure','See local power distributor regulation','Check voltage drop design for cables'])",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "voc_stringTO,sec_stringTO,Is_minTO,Is_maxTO,VdioTO,IdioTO,voc_arranjoTO,sec_arranjoTO,Ia_minTO,Ia_maxTO,dps_caTO,sec_caTO,Id_minTO,Id_maxTO,txtO",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "voc_stringTO,sec_stringTO,Is_minTO,Is_maxTO,VdioTO,IdioTO,voc_arranjoTO,sec_arranjoTO,Ia_minTO,Ia_maxTO,dps_caTO,sec_caTO,Id_minTO,Id_maxTO,txtO = protection_system(pto,pito,nfto,max_atemp,Nto,Nito,wind_speed,NSto)\nvoc_stringTC,sec_stringTC,Is_minTC,Is_maxTC,VdioTC,IdioTC,voc_arranjoTC,sec_arranjoTC,Ia_minTC,Ia_maxTC,dps_caTC,sec_caTC,Id_minTC,Id_maxTC,txtC = protection_system(ptc,pitc,nftc,max_atemp,Ntc,Nitc,wind_speed,NStc)\nntt = np.array([num2cell(nt),nft,sec_stringT,voc_stringT,IdioT,VdioT,Is_minT,Is_maxT,voc_stringT,sec_arranjoT,voc_arranjoT,Ia_minT,Ia_maxT,voc_arranjoT,sec_caT,dps_caT,Id_minT,Id_maxT,dps_caT,txt,txt,txt])\nntta = np.array([num2cell(nta),nfta,sec_stringTA,voc_stringTA,IdioTA,VdioTA,Is_minTA,Is_maxTA,voc_stringTA,sec_arranjoTA,voc_arranjoTA,Ia_minTA,Ia_maxTA,voc_arranjoTA,sec_caTA,dps_caTA,Id_minTA,Id_maxTA,dps_caTA,txtA,txtA,txtA])\nntto = np.array([num2cell(nto),nfto,sec_stringTO,voc_stringTO,IdioTO,VdioTO,Is_minTO,Is_maxTO,voc_stringTO,sec_arranjoTO,voc_arranjoTO,Ia_minTO,Ia_maxTO,voc_arranjoTO,sec_caTO,dps_caTO,Id_minTO,Id_maxTO,dps_caTO,txtO,txtO,txtO])\nnttc = np.array([num2cell(ntc),nftc,sec_stringTC,voc_stringTC,IdioTC,VdioTC,Is_minTC,Is_maxTC,voc_stringTC,sec_arranjoTC,voc_arranjoTC,Ia_minTC,Ia_maxTC,voc_arranjoTC,sec_caTC,dps_caTC,Id_minTC,Id_maxTC,dps_caTC,txtC,txtC,txtC])\n#nin=[nt' nta' nto' ntc'];\nnin = np.array([np.transpose(ntt),np.transpose(ntta),np.transpose(ntto),np.transpose(nttc)])\ncnames3 = np.array(['Number of PV modules','Number of Inverters','Number of PV modules per inverter','Max. Number of MPPT per inverter','Max. Number of Strings per MPPT','Number of Power Transformer','Module tilt angle - Inclination in [degree]','Module Azimuth angle - Orientation in [degree]','Distance of arrays in [m]','Distance of arrays for maximum power in [m]','Strings distribution per inverter/MPPT/NoDC','Elast�mero cable section per string [mm�]','Min. cable voltage insulation per string [V]','Min. diode current per string [A]','Min. diode voltage per string [V]','Min. current for breaker/fuse/disconnector per string [A]','Max. current for breaker/fuse/disconnector per string [A]','Min. Voltage for surge protector type II per string [V]','Elast�mero cable section per arrangement [mm�]','Min. cable voltage insulation per arrangement [V]','Min. current for breaker/fuse/disconnector per arrangement [A]','Max. current for breaker/fuse/disconnector per arrangement [A]','Min. Voltage for surge protector type II per arrangement [V]','Cable section in AC side [mm�]','Min. cable voltage insulation in AC side [V]','Min. current for breaker/disconnector in AC side [A]','Max. current for breaker/disconnector in AC side [A]','Min. Voltage for surge protector type II in AC side [V]','Equipotencialize modules/inverters/structure','See local power distributor regulation','Check voltage drop design for cables'])\nrnames3 = np.array(['Performance Design','Optimal Design','Topsis Design','Cost Design'])",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "voc_stringTC,sec_stringTC,Is_minTC,Is_maxTC,VdioTC,IdioTC,voc_arranjoTC,sec_arranjoTC,Ia_minTC,Ia_maxTC,dps_caTC,sec_caTC,Id_minTC,Id_maxTC,txtC",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "voc_stringTC,sec_stringTC,Is_minTC,Is_maxTC,VdioTC,IdioTC,voc_arranjoTC,sec_arranjoTC,Ia_minTC,Ia_maxTC,dps_caTC,sec_caTC,Id_minTC,Id_maxTC,txtC = protection_system(ptc,pitc,nftc,max_atemp,Ntc,Nitc,wind_speed,NStc)\nntt = np.array([num2cell(nt),nft,sec_stringT,voc_stringT,IdioT,VdioT,Is_minT,Is_maxT,voc_stringT,sec_arranjoT,voc_arranjoT,Ia_minT,Ia_maxT,voc_arranjoT,sec_caT,dps_caT,Id_minT,Id_maxT,dps_caT,txt,txt,txt])\nntta = np.array([num2cell(nta),nfta,sec_stringTA,voc_stringTA,IdioTA,VdioTA,Is_minTA,Is_maxTA,voc_stringTA,sec_arranjoTA,voc_arranjoTA,Ia_minTA,Ia_maxTA,voc_arranjoTA,sec_caTA,dps_caTA,Id_minTA,Id_maxTA,dps_caTA,txtA,txtA,txtA])\nntto = np.array([num2cell(nto),nfto,sec_stringTO,voc_stringTO,IdioTO,VdioTO,Is_minTO,Is_maxTO,voc_stringTO,sec_arranjoTO,voc_arranjoTO,Ia_minTO,Ia_maxTO,voc_arranjoTO,sec_caTO,dps_caTO,Id_minTO,Id_maxTO,dps_caTO,txtO,txtO,txtO])\nnttc = np.array([num2cell(ntc),nftc,sec_stringTC,voc_stringTC,IdioTC,VdioTC,Is_minTC,Is_maxTC,voc_stringTC,sec_arranjoTC,voc_arranjoTC,Ia_minTC,Ia_maxTC,voc_arranjoTC,sec_caTC,dps_caTC,Id_minTC,Id_maxTC,dps_caTC,txtC,txtC,txtC])\n#nin=[nt' nta' nto' ntc'];\nnin = np.array([np.transpose(ntt),np.transpose(ntta),np.transpose(ntto),np.transpose(nttc)])\ncnames3 = np.array(['Number of PV modules','Number of Inverters','Number of PV modules per inverter','Max. Number of MPPT per inverter','Max. Number of Strings per MPPT','Number of Power Transformer','Module tilt angle - Inclination in [degree]','Module Azimuth angle - Orientation in [degree]','Distance of arrays in [m]','Distance of arrays for maximum power in [m]','Strings distribution per inverter/MPPT/NoDC','Elast�mero cable section per string [mm�]','Min. cable voltage insulation per string [V]','Min. diode current per string [A]','Min. diode voltage per string [V]','Min. current for breaker/fuse/disconnector per string [A]','Max. current for breaker/fuse/disconnector per string [A]','Min. Voltage for surge protector type II per string [V]','Elast�mero cable section per arrangement [mm�]','Min. cable voltage insulation per arrangement [V]','Min. current for breaker/fuse/disconnector per arrangement [A]','Max. current for breaker/fuse/disconnector per arrangement [A]','Min. Voltage for surge protector type II per arrangement [V]','Cable section in AC side [mm�]','Min. cable voltage insulation in AC side [V]','Min. current for breaker/disconnector in AC side [A]','Max. current for breaker/disconnector in AC side [A]','Min. Voltage for surge protector type II in AC side [V]','Equipotencialize modules/inverters/structure','See local power distributor regulation','Check voltage drop design for cables'])\nrnames3 = np.array(['Performance Design','Optimal Design','Topsis Design','Cost Design'])\nt3 = uitable(f3,'Data',nin,'ColumnName',rnames3,'RowName',cnames3,'Position',np.array([50,350,1320,350]),'ColumnWidth',np.array([150]))",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "ntt",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "ntt = np.array([num2cell(nt),nft,sec_stringT,voc_stringT,IdioT,VdioT,Is_minT,Is_maxT,voc_stringT,sec_arranjoT,voc_arranjoT,Ia_minT,Ia_maxT,voc_arranjoT,sec_caT,dps_caT,Id_minT,Id_maxT,dps_caT,txt,txt,txt])\nntta = np.array([num2cell(nta),nfta,sec_stringTA,voc_stringTA,IdioTA,VdioTA,Is_minTA,Is_maxTA,voc_stringTA,sec_arranjoTA,voc_arranjoTA,Ia_minTA,Ia_maxTA,voc_arranjoTA,sec_caTA,dps_caTA,Id_minTA,Id_maxTA,dps_caTA,txtA,txtA,txtA])\nntto = np.array([num2cell(nto),nfto,sec_stringTO,voc_stringTO,IdioTO,VdioTO,Is_minTO,Is_maxTO,voc_stringTO,sec_arranjoTO,voc_arranjoTO,Ia_minTO,Ia_maxTO,voc_arranjoTO,sec_caTO,dps_caTO,Id_minTO,Id_maxTO,dps_caTO,txtO,txtO,txtO])\nnttc = np.array([num2cell(ntc),nftc,sec_stringTC,voc_stringTC,IdioTC,VdioTC,Is_minTC,Is_maxTC,voc_stringTC,sec_arranjoTC,voc_arranjoTC,Ia_minTC,Ia_maxTC,voc_arranjoTC,sec_caTC,dps_caTC,Id_minTC,Id_maxTC,dps_caTC,txtC,txtC,txtC])\n#nin=[nt' nta' nto' ntc'];\nnin = np.array([np.transpose(ntt),np.transpose(ntta),np.transpose(ntto),np.transpose(nttc)])\ncnames3 = np.array(['Number of PV modules','Number of Inverters','Number of PV modules per inverter','Max. Number of MPPT per inverter','Max. Number of Strings per MPPT','Number of Power Transformer','Module tilt angle - Inclination in [degree]','Module Azimuth angle - Orientation in [degree]','Distance of arrays in [m]','Distance of arrays for maximum power in [m]','Strings distribution per inverter/MPPT/NoDC','Elast�mero cable section per string [mm�]','Min. cable voltage insulation per string [V]','Min. diode current per string [A]','Min. diode voltage per string [V]','Min. current for breaker/fuse/disconnector per string [A]','Max. current for breaker/fuse/disconnector per string [A]','Min. Voltage for surge protector type II per string [V]','Elast�mero cable section per arrangement [mm�]','Min. cable voltage insulation per arrangement [V]','Min. current for breaker/fuse/disconnector per arrangement [A]','Max. current for breaker/fuse/disconnector per arrangement [A]','Min. Voltage for surge protector type II per arrangement [V]','Cable section in AC side [mm�]','Min. cable voltage insulation in AC side [V]','Min. current for breaker/disconnector in AC side [A]','Max. current for breaker/disconnector in AC side [A]','Min. Voltage for surge protector type II in AC side [V]','Equipotencialize modules/inverters/structure','See local power distributor regulation','Check voltage drop design for cables'])\nrnames3 = np.array(['Performance Design','Optimal Design','Topsis Design','Cost Design'])\nt3 = uitable(f3,'Data',nin,'ColumnName',rnames3,'RowName',cnames3,'Position',np.array([50,350,1320,350]),'ColumnWidth',np.array([150]))\n#txt_title3 = uicontrol('Style', 'text', 'Position', [600 635 200 20], 'String', 'RESULTS');",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "ntta",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "ntta = np.array([num2cell(nta),nfta,sec_stringTA,voc_stringTA,IdioTA,VdioTA,Is_minTA,Is_maxTA,voc_stringTA,sec_arranjoTA,voc_arranjoTA,Ia_minTA,Ia_maxTA,voc_arranjoTA,sec_caTA,dps_caTA,Id_minTA,Id_maxTA,dps_caTA,txtA,txtA,txtA])\nntto = np.array([num2cell(nto),nfto,sec_stringTO,voc_stringTO,IdioTO,VdioTO,Is_minTO,Is_maxTO,voc_stringTO,sec_arranjoTO,voc_arranjoTO,Ia_minTO,Ia_maxTO,voc_arranjoTO,sec_caTO,dps_caTO,Id_minTO,Id_maxTO,dps_caTO,txtO,txtO,txtO])\nnttc = np.array([num2cell(ntc),nftc,sec_stringTC,voc_stringTC,IdioTC,VdioTC,Is_minTC,Is_maxTC,voc_stringTC,sec_arranjoTC,voc_arranjoTC,Ia_minTC,Ia_maxTC,voc_arranjoTC,sec_caTC,dps_caTC,Id_minTC,Id_maxTC,dps_caTC,txtC,txtC,txtC])\n#nin=[nt' nta' nto' ntc'];\nnin = np.array([np.transpose(ntt),np.transpose(ntta),np.transpose(ntto),np.transpose(nttc)])\ncnames3 = np.array(['Number of PV modules','Number of Inverters','Number of PV modules per inverter','Max. Number of MPPT per inverter','Max. Number of Strings per MPPT','Number of Power Transformer','Module tilt angle - Inclination in [degree]','Module Azimuth angle - Orientation in [degree]','Distance of arrays in [m]','Distance of arrays for maximum power in [m]','Strings distribution per inverter/MPPT/NoDC','Elast�mero cable section per string [mm�]','Min. cable voltage insulation per string [V]','Min. diode current per string [A]','Min. diode voltage per string [V]','Min. current for breaker/fuse/disconnector per string [A]','Max. current for breaker/fuse/disconnector per string [A]','Min. Voltage for surge protector type II per string [V]','Elast�mero cable section per arrangement [mm�]','Min. cable voltage insulation per arrangement [V]','Min. current for breaker/fuse/disconnector per arrangement [A]','Max. current for breaker/fuse/disconnector per arrangement [A]','Min. Voltage for surge protector type II per arrangement [V]','Cable section in AC side [mm�]','Min. cable voltage insulation in AC side [V]','Min. current for breaker/disconnector in AC side [A]','Max. current for breaker/disconnector in AC side [A]','Min. Voltage for surge protector type II in AC side [V]','Equipotencialize modules/inverters/structure','See local power distributor regulation','Check voltage drop design for cables'])\nrnames3 = np.array(['Performance Design','Optimal Design','Topsis Design','Cost Design'])\nt3 = uitable(f3,'Data',nin,'ColumnName',rnames3,'RowName',cnames3,'Position',np.array([50,350,1320,350]),'ColumnWidth',np.array([150]))\n#txt_title3 = uicontrol('Style', 'text', 'Position', [600 635 200 20], 'String', 'RESULTS');\ncnames4 = np.array(['model','ocv','scc','vmp','imp','pmp','Vmax','otvoc','otvmp','tcisc','weig','deph','widt','leng','ibest','ef','ncell','tol+','dur','tcell','tier','temp','TEMP','NOCT','Inop'])",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "ntto",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "ntto = np.array([num2cell(nto),nfto,sec_stringTO,voc_stringTO,IdioTO,VdioTO,Is_minTO,Is_maxTO,voc_stringTO,sec_arranjoTO,voc_arranjoTO,Ia_minTO,Ia_maxTO,voc_arranjoTO,sec_caTO,dps_caTO,Id_minTO,Id_maxTO,dps_caTO,txtO,txtO,txtO])\nnttc = np.array([num2cell(ntc),nftc,sec_stringTC,voc_stringTC,IdioTC,VdioTC,Is_minTC,Is_maxTC,voc_stringTC,sec_arranjoTC,voc_arranjoTC,Ia_minTC,Ia_maxTC,voc_arranjoTC,sec_caTC,dps_caTC,Id_minTC,Id_maxTC,dps_caTC,txtC,txtC,txtC])\n#nin=[nt' nta' nto' ntc'];\nnin = np.array([np.transpose(ntt),np.transpose(ntta),np.transpose(ntto),np.transpose(nttc)])\ncnames3 = np.array(['Number of PV modules','Number of Inverters','Number of PV modules per inverter','Max. Number of MPPT per inverter','Max. Number of Strings per MPPT','Number of Power Transformer','Module tilt angle - Inclination in [degree]','Module Azimuth angle - Orientation in [degree]','Distance of arrays in [m]','Distance of arrays for maximum power in [m]','Strings distribution per inverter/MPPT/NoDC','Elast�mero cable section per string [mm�]','Min. cable voltage insulation per string [V]','Min. diode current per string [A]','Min. diode voltage per string [V]','Min. current for breaker/fuse/disconnector per string [A]','Max. current for breaker/fuse/disconnector per string [A]','Min. Voltage for surge protector type II per string [V]','Elast�mero cable section per arrangement [mm�]','Min. cable voltage insulation per arrangement [V]','Min. current for breaker/fuse/disconnector per arrangement [A]','Max. current for breaker/fuse/disconnector per arrangement [A]','Min. Voltage for surge protector type II per arrangement [V]','Cable section in AC side [mm�]','Min. cable voltage insulation in AC side [V]','Min. current for breaker/disconnector in AC side [A]','Max. current for breaker/disconnector in AC side [A]','Min. Voltage for surge protector type II in AC side [V]','Equipotencialize modules/inverters/structure','See local power distributor regulation','Check voltage drop design for cables'])\nrnames3 = np.array(['Performance Design','Optimal Design','Topsis Design','Cost Design'])\nt3 = uitable(f3,'Data',nin,'ColumnName',rnames3,'RowName',cnames3,'Position',np.array([50,350,1320,350]),'ColumnWidth',np.array([150]))\n#txt_title3 = uicontrol('Style', 'text', 'Position', [600 635 200 20], 'String', 'RESULTS');\ncnames4 = np.array(['model','ocv','scc','vmp','imp','pmp','Vmax','otvoc','otvmp','tcisc','weig','deph','widt','leng','ibest','ef','ncell','tol+','dur','tcell','tier','temp','TEMP','NOCT','Inop'])\nrnames4 = np.array(['Performance PV data','Optimal PV data','Topsis PV data','Cost PV data'])",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "nttc",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "nttc = np.array([num2cell(ntc),nftc,sec_stringTC,voc_stringTC,IdioTC,VdioTC,Is_minTC,Is_maxTC,voc_stringTC,sec_arranjoTC,voc_arranjoTC,Ia_minTC,Ia_maxTC,voc_arranjoTC,sec_caTC,dps_caTC,Id_minTC,Id_maxTC,dps_caTC,txtC,txtC,txtC])\n#nin=[nt' nta' nto' ntc'];\nnin = np.array([np.transpose(ntt),np.transpose(ntta),np.transpose(ntto),np.transpose(nttc)])\ncnames3 = np.array(['Number of PV modules','Number of Inverters','Number of PV modules per inverter','Max. Number of MPPT per inverter','Max. Number of Strings per MPPT','Number of Power Transformer','Module tilt angle - Inclination in [degree]','Module Azimuth angle - Orientation in [degree]','Distance of arrays in [m]','Distance of arrays for maximum power in [m]','Strings distribution per inverter/MPPT/NoDC','Elast�mero cable section per string [mm�]','Min. cable voltage insulation per string [V]','Min. diode current per string [A]','Min. diode voltage per string [V]','Min. current for breaker/fuse/disconnector per string [A]','Max. current for breaker/fuse/disconnector per string [A]','Min. Voltage for surge protector type II per string [V]','Elast�mero cable section per arrangement [mm�]','Min. cable voltage insulation per arrangement [V]','Min. current for breaker/fuse/disconnector per arrangement [A]','Max. current for breaker/fuse/disconnector per arrangement [A]','Min. Voltage for surge protector type II per arrangement [V]','Cable section in AC side [mm�]','Min. cable voltage insulation in AC side [V]','Min. current for breaker/disconnector in AC side [A]','Max. current for breaker/disconnector in AC side [A]','Min. Voltage for surge protector type II in AC side [V]','Equipotencialize modules/inverters/structure','See local power distributor regulation','Check voltage drop design for cables'])\nrnames3 = np.array(['Performance Design','Optimal Design','Topsis Design','Cost Design'])\nt3 = uitable(f3,'Data',nin,'ColumnName',rnames3,'RowName',cnames3,'Position',np.array([50,350,1320,350]),'ColumnWidth',np.array([150]))\n#txt_title3 = uicontrol('Style', 'text', 'Position', [600 635 200 20], 'String', 'RESULTS');\ncnames4 = np.array(['model','ocv','scc','vmp','imp','pmp','Vmax','otvoc','otvmp','tcisc','weig','deph','widt','leng','ibest','ef','ncell','tol+','dur','tcell','tier','temp','TEMP','NOCT','Inop'])\nrnames4 = np.array(['Performance PV data','Optimal PV data','Topsis PV data','Cost PV data'])\nt4 = uitable(f3,'Data',pvvv,'ColumnName',cnames4,'RowName',rnames4,'Position',np.array([50,200,1400,115]),'ColumnWidth',np.array([60]))",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "nin",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "nin = np.array([np.transpose(ntt),np.transpose(ntta),np.transpose(ntto),np.transpose(nttc)])\ncnames3 = np.array(['Number of PV modules','Number of Inverters','Number of PV modules per inverter','Max. Number of MPPT per inverter','Max. Number of Strings per MPPT','Number of Power Transformer','Module tilt angle - Inclination in [degree]','Module Azimuth angle - Orientation in [degree]','Distance of arrays in [m]','Distance of arrays for maximum power in [m]','Strings distribution per inverter/MPPT/NoDC','Elast�mero cable section per string [mm�]','Min. cable voltage insulation per string [V]','Min. diode current per string [A]','Min. diode voltage per string [V]','Min. current for breaker/fuse/disconnector per string [A]','Max. current for breaker/fuse/disconnector per string [A]','Min. Voltage for surge protector type II per string [V]','Elast�mero cable section per arrangement [mm�]','Min. cable voltage insulation per arrangement [V]','Min. current for breaker/fuse/disconnector per arrangement [A]','Max. current for breaker/fuse/disconnector per arrangement [A]','Min. Voltage for surge protector type II per arrangement [V]','Cable section in AC side [mm�]','Min. cable voltage insulation in AC side [V]','Min. current for breaker/disconnector in AC side [A]','Max. current for breaker/disconnector in AC side [A]','Min. Voltage for surge protector type II in AC side [V]','Equipotencialize modules/inverters/structure','See local power distributor regulation','Check voltage drop design for cables'])\nrnames3 = np.array(['Performance Design','Optimal Design','Topsis Design','Cost Design'])\nt3 = uitable(f3,'Data',nin,'ColumnName',rnames3,'RowName',cnames3,'Position',np.array([50,350,1320,350]),'ColumnWidth',np.array([150]))\n#txt_title3 = uicontrol('Style', 'text', 'Position', [600 635 200 20], 'String', 'RESULTS');\ncnames4 = np.array(['model','ocv','scc','vmp','imp','pmp','Vmax','otvoc','otvmp','tcisc','weig','deph','widt','leng','ibest','ef','ncell','tol+','dur','tcell','tier','temp','TEMP','NOCT','Inop'])\nrnames4 = np.array(['Performance PV data','Optimal PV data','Topsis PV data','Cost PV data'])\nt4 = uitable(f3,'Data',pvvv,'ColumnName',cnames4,'RowName',rnames4,'Position',np.array([50,200,1400,115]),'ColumnWidth',np.array([60]))\n#txt_title4 = uicontrol('Style', 'text', 'Position', [600 430 200 20], 'String', 'SOLAR PAINEL PARAMETERS');\ncnames5 = np.array(['model','Imppt','Nmpp','Icc','Vmpptm','VmpptM','mVn','MVn','Nodc','Pdc','Iac','Pac','Sac','mVac','MVac','mf','Mf','THD','FP','Ef','minT','maxT','weig','heig','widt','leng','ibest','Phase','Hum','Alt','mod','tier'])",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "cnames3",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "cnames3 = np.array(['Number of PV modules','Number of Inverters','Number of PV modules per inverter','Max. Number of MPPT per inverter','Max. Number of Strings per MPPT','Number of Power Transformer','Module tilt angle - Inclination in [degree]','Module Azimuth angle - Orientation in [degree]','Distance of arrays in [m]','Distance of arrays for maximum power in [m]','Strings distribution per inverter/MPPT/NoDC','Elast�mero cable section per string [mm�]','Min. cable voltage insulation per string [V]','Min. diode current per string [A]','Min. diode voltage per string [V]','Min. current for breaker/fuse/disconnector per string [A]','Max. current for breaker/fuse/disconnector per string [A]','Min. Voltage for surge protector type II per string [V]','Elast�mero cable section per arrangement [mm�]','Min. cable voltage insulation per arrangement [V]','Min. current for breaker/fuse/disconnector per arrangement [A]','Max. current for breaker/fuse/disconnector per arrangement [A]','Min. Voltage for surge protector type II per arrangement [V]','Cable section in AC side [mm�]','Min. cable voltage insulation in AC side [V]','Min. current for breaker/disconnector in AC side [A]','Max. current for breaker/disconnector in AC side [A]','Min. Voltage for surge protector type II in AC side [V]','Equipotencialize modules/inverters/structure','See local power distributor regulation','Check voltage drop design for cables'])\nrnames3 = np.array(['Performance Design','Optimal Design','Topsis Design','Cost Design'])\nt3 = uitable(f3,'Data',nin,'ColumnName',rnames3,'RowName',cnames3,'Position',np.array([50,350,1320,350]),'ColumnWidth',np.array([150]))\n#txt_title3 = uicontrol('Style', 'text', 'Position', [600 635 200 20], 'String', 'RESULTS');\ncnames4 = np.array(['model','ocv','scc','vmp','imp','pmp','Vmax','otvoc','otvmp','tcisc','weig','deph','widt','leng','ibest','ef','ncell','tol+','dur','tcell','tier','temp','TEMP','NOCT','Inop'])\nrnames4 = np.array(['Performance PV data','Optimal PV data','Topsis PV data','Cost PV data'])\nt4 = uitable(f3,'Data',pvvv,'ColumnName',cnames4,'RowName',rnames4,'Position',np.array([50,200,1400,115]),'ColumnWidth',np.array([60]))\n#txt_title4 = uicontrol('Style', 'text', 'Position', [600 430 200 20], 'String', 'SOLAR PAINEL PARAMETERS');\ncnames5 = np.array(['model','Imppt','Nmpp','Icc','Vmpptm','VmpptM','mVn','MVn','Nodc','Pdc','Iac','Pac','Sac','mVac','MVac','mf','Mf','THD','FP','Ef','minT','maxT','weig','heig','widt','leng','ibest','Phase','Hum','Alt','mod','tier'])\nrnames5 = np.array(['Performance Inverter data','Optimal Inverter data','Topsis Inverter data','Cost Inverter data'])",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "rnames3",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "rnames3 = np.array(['Performance Design','Optimal Design','Topsis Design','Cost Design'])\nt3 = uitable(f3,'Data',nin,'ColumnName',rnames3,'RowName',cnames3,'Position',np.array([50,350,1320,350]),'ColumnWidth',np.array([150]))\n#txt_title3 = uicontrol('Style', 'text', 'Position', [600 635 200 20], 'String', 'RESULTS');\ncnames4 = np.array(['model','ocv','scc','vmp','imp','pmp','Vmax','otvoc','otvmp','tcisc','weig','deph','widt','leng','ibest','ef','ncell','tol+','dur','tcell','tier','temp','TEMP','NOCT','Inop'])\nrnames4 = np.array(['Performance PV data','Optimal PV data','Topsis PV data','Cost PV data'])\nt4 = uitable(f3,'Data',pvvv,'ColumnName',cnames4,'RowName',rnames4,'Position',np.array([50,200,1400,115]),'ColumnWidth',np.array([60]))\n#txt_title4 = uicontrol('Style', 'text', 'Position', [600 430 200 20], 'String', 'SOLAR PAINEL PARAMETERS');\ncnames5 = np.array(['model','Imppt','Nmpp','Icc','Vmpptm','VmpptM','mVn','MVn','Nodc','Pdc','Iac','Pac','Sac','mVac','MVac','mf','Mf','THD','FP','Ef','minT','maxT','weig','heig','widt','leng','ibest','Phase','Hum','Alt','mod','tier'])\nrnames5 = np.array(['Performance Inverter data','Optimal Inverter data','Topsis Inverter data','Cost Inverter data'])\nt5 = uitable(f3,'Data',invv,'ColumnName',cnames5,'RowName',rnames5,'Position',np.array([50,50,1400,115]),'ColumnWidth',np.array([60]))",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "t3",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "t3 = uitable(f3,'Data',nin,'ColumnName',rnames3,'RowName',cnames3,'Position',np.array([50,350,1320,350]),'ColumnWidth',np.array([150]))\n#txt_title3 = uicontrol('Style', 'text', 'Position', [600 635 200 20], 'String', 'RESULTS');\ncnames4 = np.array(['model','ocv','scc','vmp','imp','pmp','Vmax','otvoc','otvmp','tcisc','weig','deph','widt','leng','ibest','ef','ncell','tol+','dur','tcell','tier','temp','TEMP','NOCT','Inop'])\nrnames4 = np.array(['Performance PV data','Optimal PV data','Topsis PV data','Cost PV data'])\nt4 = uitable(f3,'Data',pvvv,'ColumnName',cnames4,'RowName',rnames4,'Position',np.array([50,200,1400,115]),'ColumnWidth',np.array([60]))\n#txt_title4 = uicontrol('Style', 'text', 'Position', [600 430 200 20], 'String', 'SOLAR PAINEL PARAMETERS');\ncnames5 = np.array(['model','Imppt','Nmpp','Icc','Vmpptm','VmpptM','mVn','MVn','Nodc','Pdc','Iac','Pac','Sac','mVac','MVac','mf','Mf','THD','FP','Ef','minT','maxT','weig','heig','widt','leng','ibest','Phase','Hum','Alt','mod','tier'])\nrnames5 = np.array(['Performance Inverter data','Optimal Inverter data','Topsis Inverter data','Cost Inverter data'])\nt5 = uitable(f3,'Data',invv,'ColumnName',cnames5,'RowName',rnames5,'Position',np.array([50,50,1400,115]),'ColumnWidth',np.array([60]))\n#txt_title5 = uicontrol('Style', 'text', 'Position', [600 225 200 20], 'String', 'INVERTER PARAMETERS WITH MPPT');",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "#txt_title3",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "#txt_title3 = uicontrol('Style', 'text', 'Position', [600 635 200 20], 'String', 'RESULTS');\ncnames4 = np.array(['model','ocv','scc','vmp','imp','pmp','Vmax','otvoc','otvmp','tcisc','weig','deph','widt','leng','ibest','ef','ncell','tol+','dur','tcell','tier','temp','TEMP','NOCT','Inop'])\nrnames4 = np.array(['Performance PV data','Optimal PV data','Topsis PV data','Cost PV data'])\nt4 = uitable(f3,'Data',pvvv,'ColumnName',cnames4,'RowName',rnames4,'Position',np.array([50,200,1400,115]),'ColumnWidth',np.array([60]))\n#txt_title4 = uicontrol('Style', 'text', 'Position', [600 430 200 20], 'String', 'SOLAR PAINEL PARAMETERS');\ncnames5 = np.array(['model','Imppt','Nmpp','Icc','Vmpptm','VmpptM','mVn','MVn','Nodc','Pdc','Iac','Pac','Sac','mVac','MVac','mf','Mf','THD','FP','Ef','minT','maxT','weig','heig','widt','leng','ibest','Phase','Hum','Alt','mod','tier'])\nrnames5 = np.array(['Performance Inverter data','Optimal Inverter data','Topsis Inverter data','Cost Inverter data'])\nt5 = uitable(f3,'Data',invv,'ColumnName',cnames5,'RowName',rnames5,'Position',np.array([50,50,1400,115]),'ColumnWidth',np.array([60]))\n#txt_title5 = uicontrol('Style', 'text', 'Position', [600 225 200 20], 'String', 'INVERTER PARAMETERS WITH MPPT');\nif pro == 4:",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "cnames4",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "cnames4 = np.array(['model','ocv','scc','vmp','imp','pmp','Vmax','otvoc','otvmp','tcisc','weig','deph','widt','leng','ibest','ef','ncell','tol+','dur','tcell','tier','temp','TEMP','NOCT','Inop'])\nrnames4 = np.array(['Performance PV data','Optimal PV data','Topsis PV data','Cost PV data'])\nt4 = uitable(f3,'Data',pvvv,'ColumnName',cnames4,'RowName',rnames4,'Position',np.array([50,200,1400,115]),'ColumnWidth',np.array([60]))\n#txt_title4 = uicontrol('Style', 'text', 'Position', [600 430 200 20], 'String', 'SOLAR PAINEL PARAMETERS');\ncnames5 = np.array(['model','Imppt','Nmpp','Icc','Vmpptm','VmpptM','mVn','MVn','Nodc','Pdc','Iac','Pac','Sac','mVac','MVac','mf','Mf','THD','FP','Ef','minT','maxT','weig','heig','widt','leng','ibest','Phase','Hum','Alt','mod','tier'])\nrnames5 = np.array(['Performance Inverter data','Optimal Inverter data','Topsis Inverter data','Cost Inverter data'])\nt5 = uitable(f3,'Data',invv,'ColumnName',cnames5,'RowName',rnames5,'Position',np.array([50,50,1400,115]),'ColumnWidth',np.array([60]))\n#txt_title5 = uicontrol('Style', 'text', 'Position', [600 225 200 20], 'String', 'INVERTER PARAMETERS WITH MPPT');\nif pro == 4:\n    St,Sit,Sta,Sita,Sto,Sito,Stc,Sitc = pv_inv_string4(pt,pta,pto,ptc,sunS,piit,piita,piitc,piito,froS)",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "rnames4",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "rnames4 = np.array(['Performance PV data','Optimal PV data','Topsis PV data','Cost PV data'])\nt4 = uitable(f3,'Data',pvvv,'ColumnName',cnames4,'RowName',rnames4,'Position',np.array([50,200,1400,115]),'ColumnWidth',np.array([60]))\n#txt_title4 = uicontrol('Style', 'text', 'Position', [600 430 200 20], 'String', 'SOLAR PAINEL PARAMETERS');\ncnames5 = np.array(['model','Imppt','Nmpp','Icc','Vmpptm','VmpptM','mVn','MVn','Nodc','Pdc','Iac','Pac','Sac','mVac','MVac','mf','Mf','THD','FP','Ef','minT','maxT','weig','heig','widt','leng','ibest','Phase','Hum','Alt','mod','tier'])\nrnames5 = np.array(['Performance Inverter data','Optimal Inverter data','Topsis Inverter data','Cost Inverter data'])\nt5 = uitable(f3,'Data',invv,'ColumnName',cnames5,'RowName',rnames5,'Position',np.array([50,50,1400,115]),'ColumnWidth',np.array([60]))\n#txt_title5 = uicontrol('Style', 'text', 'Position', [600 225 200 20], 'String', 'INVERTER PARAMETERS WITH MPPT');\nif pro == 4:\n    St,Sit,Sta,Sita,Sto,Sito,Stc,Sitc = pv_inv_string4(pt,pta,pto,ptc,sunS,piit,piita,piitc,piito,froS)\n    # Figure 4 - Other possible inverters",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "t4",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "t4 = uitable(f3,'Data',pvvv,'ColumnName',cnames4,'RowName',rnames4,'Position',np.array([50,200,1400,115]),'ColumnWidth',np.array([60]))\n#txt_title4 = uicontrol('Style', 'text', 'Position', [600 430 200 20], 'String', 'SOLAR PAINEL PARAMETERS');\ncnames5 = np.array(['model','Imppt','Nmpp','Icc','Vmpptm','VmpptM','mVn','MVn','Nodc','Pdc','Iac','Pac','Sac','mVac','MVac','mf','Mf','THD','FP','Ef','minT','maxT','weig','heig','widt','leng','ibest','Phase','Hum','Alt','mod','tier'])\nrnames5 = np.array(['Performance Inverter data','Optimal Inverter data','Topsis Inverter data','Cost Inverter data'])\nt5 = uitable(f3,'Data',invv,'ColumnName',cnames5,'RowName',rnames5,'Position',np.array([50,50,1400,115]),'ColumnWidth',np.array([60]))\n#txt_title5 = uicontrol('Style', 'text', 'Position', [600 225 200 20], 'String', 'INVERTER PARAMETERS WITH MPPT');\nif pro == 4:\n    St,Sit,Sta,Sita,Sto,Sito,Stc,Sitc = pv_inv_string4(pt,pta,pto,ptc,sunS,piit,piita,piitc,piito,froS)\n    # Figure 4 - Other possible inverters\n    f6 = plt.figure(6)",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "#txt_title4",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "#txt_title4 = uicontrol('Style', 'text', 'Position', [600 430 200 20], 'String', 'SOLAR PAINEL PARAMETERS');\ncnames5 = np.array(['model','Imppt','Nmpp','Icc','Vmpptm','VmpptM','mVn','MVn','Nodc','Pdc','Iac','Pac','Sac','mVac','MVac','mf','Mf','THD','FP','Ef','minT','maxT','weig','heig','widt','leng','ibest','Phase','Hum','Alt','mod','tier'])\nrnames5 = np.array(['Performance Inverter data','Optimal Inverter data','Topsis Inverter data','Cost Inverter data'])\nt5 = uitable(f3,'Data',invv,'ColumnName',cnames5,'RowName',rnames5,'Position',np.array([50,50,1400,115]),'ColumnWidth',np.array([60]))\n#txt_title5 = uicontrol('Style', 'text', 'Position', [600 225 200 20], 'String', 'INVERTER PARAMETERS WITH MPPT');\nif pro == 4:\n    St,Sit,Sta,Sita,Sto,Sito,Stc,Sitc = pv_inv_string4(pt,pta,pto,ptc,sunS,piit,piita,piitc,piito,froS)\n    # Figure 4 - Other possible inverters\n    f6 = plt.figure(6)\n    format('bank')",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "cnames5",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "cnames5 = np.array(['model','Imppt','Nmpp','Icc','Vmpptm','VmpptM','mVn','MVn','Nodc','Pdc','Iac','Pac','Sac','mVac','MVac','mf','Mf','THD','FP','Ef','minT','maxT','weig','heig','widt','leng','ibest','Phase','Hum','Alt','mod','tier'])\nrnames5 = np.array(['Performance Inverter data','Optimal Inverter data','Topsis Inverter data','Cost Inverter data'])\nt5 = uitable(f3,'Data',invv,'ColumnName',cnames5,'RowName',rnames5,'Position',np.array([50,50,1400,115]),'ColumnWidth',np.array([60]))\n#txt_title5 = uicontrol('Style', 'text', 'Position', [600 225 200 20], 'String', 'INVERTER PARAMETERS WITH MPPT');\nif pro == 4:\n    St,Sit,Sta,Sita,Sto,Sito,Stc,Sitc = pv_inv_string4(pt,pta,pto,ptc,sunS,piit,piita,piitc,piito,froS)\n    # Figure 4 - Other possible inverters\n    f6 = plt.figure(6)\n    format('bank')\n    inv_t = np.array([num2cell(np.transpose(Niit)),np.transpose(Sit),num2cell(piit(:,np.arange(2,32+1)))])",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "rnames5",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "rnames5 = np.array(['Performance Inverter data','Optimal Inverter data','Topsis Inverter data','Cost Inverter data'])\nt5 = uitable(f3,'Data',invv,'ColumnName',cnames5,'RowName',rnames5,'Position',np.array([50,50,1400,115]),'ColumnWidth',np.array([60]))\n#txt_title5 = uicontrol('Style', 'text', 'Position', [600 225 200 20], 'String', 'INVERTER PARAMETERS WITH MPPT');\nif pro == 4:\n    St,Sit,Sta,Sita,Sto,Sito,Stc,Sitc = pv_inv_string4(pt,pta,pto,ptc,sunS,piit,piita,piitc,piito,froS)\n    # Figure 4 - Other possible inverters\n    f6 = plt.figure(6)\n    format('bank')\n    inv_t = np.array([num2cell(np.transpose(Niit)),np.transpose(Sit),num2cell(piit(:,np.arange(2,32+1)))])\n    cnames6 = np.array(['no','model','Imppt','Nmpp','Icc','Vmpptm','VmpptM','mVn','MVn','Nodc','Pdc','Iac','Pac','Sac','mVac','MVac','mf','Mf','THD','FP','Ef','minT','maxT','weig','heig','widt','leng','ibest','Phase','Hum','Alt','mod','tier'])",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "t5",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "t5 = uitable(f3,'Data',invv,'ColumnName',cnames5,'RowName',rnames5,'Position',np.array([50,50,1400,115]),'ColumnWidth',np.array([60]))\n#txt_title5 = uicontrol('Style', 'text', 'Position', [600 225 200 20], 'String', 'INVERTER PARAMETERS WITH MPPT');\nif pro == 4:\n    St,Sit,Sta,Sita,Sto,Sito,Stc,Sitc = pv_inv_string4(pt,pta,pto,ptc,sunS,piit,piita,piitc,piito,froS)\n    # Figure 4 - Other possible inverters\n    f6 = plt.figure(6)\n    format('bank')\n    inv_t = np.array([num2cell(np.transpose(Niit)),np.transpose(Sit),num2cell(piit(:,np.arange(2,32+1)))])\n    cnames6 = np.array(['no','model','Imppt','Nmpp','Icc','Vmpptm','VmpptM','mVn','MVn','Nodc','Pdc','Iac','Pac','Sac','mVac','MVac','mf','Mf','THD','FP','Ef','minT','maxT','weig','heig','widt','leng','ibest','Phase','Hum','Alt','mod','tier'])\n    t6 = uitable(f6,'Data',inv_t,'ColumnName',cnames6,'Position',np.array([50,50,1290,550]),'ColumnWidth',np.array([50]))",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "#txt_title5",
        "kind": 5,
        "importPath": "old.PV_topsis",
        "description": "old.PV_topsis",
        "peekOfCode": "#txt_title5 = uicontrol('Style', 'text', 'Position', [600 225 200 20], 'String', 'INVERTER PARAMETERS WITH MPPT');\nif pro == 4:\n    St,Sit,Sta,Sita,Sto,Sito,Stc,Sitc = pv_inv_string4(pt,pta,pto,ptc,sunS,piit,piita,piitc,piito,froS)\n    # Figure 4 - Other possible inverters\n    f6 = plt.figure(6)\n    format('bank')\n    inv_t = np.array([num2cell(np.transpose(Niit)),np.transpose(Sit),num2cell(piit(:,np.arange(2,32+1)))])\n    cnames6 = np.array(['no','model','Imppt','Nmpp','Icc','Vmpptm','VmpptM','mVn','MVn','Nodc','Pdc','Iac','Pac','Sac','mVac','MVac','mf','Mf','THD','FP','Ef','minT','maxT','weig','heig','widt','leng','ibest','Phase','Hum','Alt','mod','tier'])\n    t6 = uitable(f6,'Data',inv_t,'ColumnName',cnames6,'Position',np.array([50,50,1290,550]),'ColumnWidth',np.array([50]))\n    txt_title6 = uicontrol('Style','text','Position',np.array([400,610,600,15]),'String','POSSIBLES INVERTERS FOR THE PV CHOOSEN WITH MAXIMUM PERFORMANCE DESIGN')",
        "detail": "old.PV_topsis",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "old.script_MATHEUS",
        "description": "old.script_MATHEUS",
        "peekOfCode": "x = np.array([np.arange(1,12+1,1)])\nif vff == 380:\n    demand2 = np.array([1360,1293,1310,1267,1184,1156,1148,1212,1289,1379,1355,1470])\n    pvsol = np.array([1766,1597,1625,1282,1279,1118,1317,1641,1510,1636,1733,1812])\n    conv = np.array([375.65,371.97,401.38,366.22,333.21,308.33,303.3,364.52,335.93,377.73,357.47,363.12])\nelse:\n    demand2 = np.array([360,356,328,380,364,250,223,248,276,289,346,369])\n    pvsol = np.array([400,363,403,331,351,287,358,358,331,364,361,387])\n    conv = np.array([375.65,371.97,401.38,366.22,333.21,308.33,303.3,364.52,335.93,377.73,357.47,363.12])\n#d=[demand2; pvsol; ger_t; ger_d; ger_df];",
        "detail": "old.script_MATHEUS",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "old.script_MATHEUS",
        "description": "old.script_MATHEUS",
        "peekOfCode": "d = np.array([[demand2],[pvsol],[conv],[Pger_t]])\nplt.plot(x,demand2,'-.b','LineWidth',2)\ngrid\nplt.xlabel('Months')\nplt.ylabel('Energy [kWh]')\nplt.title('ENERGY PRODUCED BY MONTH')\nhold('on')\nplt.plot(x,pvsol,'-.+g','LineWidth',2)\nplt.plot(x,conv,'-.ok','LineWidth',2)\nplt.plot(x,Pger_t,'--xr','LineWidth',2)",
        "detail": "old.script_MATHEUS",
        "documentation": {}
    },
    {
        "label": "sol_por_dia",
        "kind": 2,
        "importPath": "old.sol_por_dia",
        "description": "old.sol_por_dia",
        "peekOfCode": "def sol_por_dia(lon = None,lat = None): \n    ###########################################################################\n    # https://www.inf.ufrgs.br/~cabral/Nascer_Por_Sol.html\n    # Created by: Gustavo Dill - April 2020                                   #\n    # T = tempo de dura�ao do dia\n# phi = latitude do local\n# theta = declina�ao da terra\n# n = dia sequencial do ano\n# A seguir, tomar o T, divid�-lo por 2. Agora subtrai-se do meio-dia o    #\n# valor de T, seguido da soma de T ao meio-dia. Os 2 hor�rios obtidos s�o #",
        "detail": "old.sol_por_dia",
        "documentation": {}
    },
    {
        "label": "temp_data",
        "kind": 2,
        "importPath": "old.temp_data",
        "description": "old.temp_data",
        "peekOfCode": "def temp_data(x_temp = None): \n    if x_temp == 1:\n        options.Resize = 'On'\n        options.WindowStyle = 'modal'\n        options.Interpreter = 'tex'\n        prompt = np.array(['Enter the average temperature in January (in �C) \\n','Enter the average temperature in February (in �C) \\n','Enter the average temperature in March (in �C) \\n','Enter the average temperature in April (in �C) \\n','Enter the average temperature in May (in �C) \\n','Enter the average temperature in June (in �C) \\n','Enter the average temperature in July (in �C) \\n','Enter the average temperature in August (in �C) \\n','Enter the average temperature in September (in �C) \\n','Enter the average temperature in October (in �C) \\n','Enter the average temperature in November (in �C) \\n','Enter the average temperature in December (in �C) \\n'])\n        dlg_title = 'Average temperature per month'\n        num_lines = np.array([1,100])\n        defaultans = np.array(['26.1','26','25.2','23.6','21.8','20.9','20.6','21','21.7','22.5','23.8','24.6'])\n        DadosForm = inputdlg(prompt,dlg_title,num_lines,defaultans)",
        "detail": "old.temp_data",
        "documentation": {}
    },
    {
        "label": "volt_t",
        "kind": 2,
        "importPath": "old.volt_t",
        "description": "old.volt_t",
        "peekOfCode": "def volt_t(pos_t = None,vfn = None,nf = None,Ntt = None): \n    # Viable Inverters for the distribution system, voltage and number of\n# phases\n    n = 1\n    lv,cv = pos_t.shape\n    for i in np.arange(1,lv+1).reshape(-1):\n        if ((pos_t(i,28) == nf) and (vfn == 127) and (nf == 1)):\n            pos_v[n,:] = pos_t(i,:)\n            Ntt[n,:] = Ntt(i,:)\n            ttt[n,1] = 1",
        "detail": "old.volt_t",
        "documentation": {}
    },
    {
        "label": "volt_t1",
        "kind": 2,
        "importPath": "old.volt_t1",
        "description": "old.volt_t1",
        "peekOfCode": "def volt_t1(pos_t = None,vfn = None,nf = None,Ntt_t = None): \n    # Viable Inverters for the distribution system, voltage and number of\n# phases\n    n = 1\n    lv,cv = pos_t.shape\n    for i in np.arange(1,lv+1).reshape(-1):\n        if ((pos_t(i,28) == nf) and (vfn == 127) and (nf == 1)):\n            pos_v[n,:] = pos_t(i,:)\n            Ntt_v[n,:] = Ntt_t(i,:)\n            ttt[n,1] = 1",
        "detail": "old.volt_t1",
        "documentation": {}
    },
    {
        "label": "wind_data",
        "kind": 2,
        "importPath": "old.wind_data",
        "description": "old.wind_data",
        "peekOfCode": "def wind_data(wind_speed = None): \n    if wind_speed == 1:\n        options.Resize = 'On'\n        options.WindowStyle = 'modal'\n        options.Interpreter = 'tex'\n        prompt = np.array(['Enter the average wind speed in January (in m/s) \\n','Enter the average wind speed in February (in m/s) \\n','Enter the average wind speed in March (in m/s) \\n','Enter the average wind speed in April (in m/s) \\n','Enter the average wind speed in May (in m/s) \\n','Enter the average wind speed in June (in m/s) \\n','Enter the average wind speed in July (in m/s) \\n','Enter the average wind speed in August (in m/s) \\n','Enter the average wind speed in September (in m/s) \\n','Enter the average wind speed in October (in m/s) \\n','Enter the average wind speed in November (in m/s) \\n','Enter the average wind speed in December (in m/s) \\n'])\n        dlg_title = 'average wind speed per month'\n        num_lines = np.array([1,100])\n        defaultans = str2double\n        DadosForm = inputdlg(prompt,dlg_title,num_lines,defaultans)",
        "detail": "old.wind_data",
        "documentation": {}
    },
    {
        "label": "load_modules",
        "kind": 2,
        "importPath": "utils.io",
        "description": "utils.io",
        "peekOfCode": "def load_modules(path):\n    return 'WIP'\ndef load_inverters(path):\n    return 'WIP'\ndef load_site_profile(path):\n    return 'WIP'",
        "detail": "utils.io",
        "documentation": {}
    },
    {
        "label": "load_inverters",
        "kind": 2,
        "importPath": "utils.io",
        "description": "utils.io",
        "peekOfCode": "def load_inverters(path):\n    return 'WIP'\ndef load_site_profile(path):\n    return 'WIP'",
        "detail": "utils.io",
        "documentation": {}
    },
    {
        "label": "load_site_profile",
        "kind": 2,
        "importPath": "utils.io",
        "description": "utils.io",
        "peekOfCode": "def load_site_profile(path):\n    return 'WIP'",
        "detail": "utils.io",
        "documentation": {}
    }
]